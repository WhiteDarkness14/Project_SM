
Project_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a688  0800a688  0001a688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa4  0800aaa4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaac  0800aaac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aab0  0800aab0  0001aab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001e0  0800ac94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800ac94  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae02  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003356  00000000  00000000  0003b012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0003e368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028453  00000000  00000000  00040c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d43a  00000000  00000000  000690b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5548  00000000  00000000  000864ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ba35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b3c  00000000  00000000  0017ba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a66c 	.word	0x0800a66c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a66c 	.word	0x0800a66c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	/* Ustawienie wszystkich wartosci na 0 */
	pid->integrator = 0.0f;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
	pid->prevE = 0.0f;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
	
	pid->differentiator = 0.0f;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28

	/* Ustawienie wartosci regulatora */
	pid->Kp = 1.0f;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->Ki = 0.1f;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <PIDController_Init+0x64>)
 8000f14:	605a      	str	r2, [r3, #4]
	pid->Kd = 0.07f;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <PIDController_Init+0x68>)
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->tau = 0.1f;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <PIDController_Init+0x64>)
 8000f20:	60da      	str	r2, [r3, #12]
	pid->limMin = 0.0f;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
	pid->limMax = 1000.0f;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <PIDController_Init+0x6c>)
 8000f2e:	615a      	str	r2, [r3, #20]
	pid->Tp = 0.250f;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8000f36:	619a      	str	r2, [r3, #24]

}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	3dcccccd 	.word	0x3dcccccd
 8000f48:	3d8f5c29 	.word	0x3d8f5c29
 8000f4c:	447a0000 	.word	0x447a0000

08000f50 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement){
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f5c:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Uchyb */
	float error = setpoint - measurement;
 8000f60:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	edc7 7a05 	vstr	s15, [r7, #20]
	
	/* Czlon proporcjonalny */
	float proportional = pid->Kp*error;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a04 	vstr	s15, [r7, #16]
	
	/* Czlon calkujacy */
	pid->integrator = pid->Ki*pid->Tp*0.5f*(error + pid->prevE) + pid->integrator;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000fa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	edc3 7a07 	vstr	s15, [r3, #28]


	/* Obliczanie ograniczen czlonu calkujacego */
	float limMinInt, limMaxInt;

	if (pid->limMax > proportional) {
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d509      	bpl.n	8000fe4 <PIDController_Update+0x94>
		limMaxInt = pid->limMax - proportional;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	edc7 7a06 	vstr	s15, [r7, #24]
 8000fe2:	e002      	b.n	8000fea <PIDController_Update+0x9a>
	} else {
		limMaxInt = 0.0f;
 8000fe4:	f04f 0300 	mov.w	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
	}

	if (pid->limMin < proportional) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	dd09      	ble.n	8001012 <PIDController_Update+0xc2>
		limMinInt = pid->limMin - proportional;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	ed93 7a04 	vldr	s14, [r3, #16]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	edc7 7a07 	vstr	s15, [r7, #28]
 8001010:	e002      	b.n	8001018 <PIDController_Update+0xc8>
	} else {
		limMinInt = 0.0f;
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
	}
	
	if(pid->integrator > limMaxInt) {
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	edd3 7a07 	vldr	s15, [r3, #28]
 800101e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102a:	d503      	bpl.n	8001034 <PIDController_Update+0xe4>
		pid->integrator = limMaxInt;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	61da      	str	r2, [r3, #28]
 8001032:	e00c      	b.n	800104e <PIDController_Update+0xfe>
	} else if (pid->integrator <limMinInt){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edd3 7a07 	vldr	s15, [r3, #28]
 800103a:	ed97 7a07 	vldr	s14, [r7, #28]
 800103e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	dd02      	ble.n	800104e <PIDController_Update+0xfe>
		pid->integrator = limMinInt;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	61da      	str	r2, [r3, #28]
	}

	/* Czlon rozniczkujacy */
	pid->differentiator = (2.0f*pid->Kd*(measurement - pid->prevMeasurement)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	edd3 7a02 	vldr	s15, [r3, #8]
 8001054:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800105e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001062:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
			    + (2.0f*pid->tau - pid->Tp) * pid->differentiator)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001070:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	edd3 7a06 	vldr	s15, [r3, #24]
 800107a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 6a27 	vadd.f32	s13, s14, s15
			    / (2.0f*pid->tau + pid->Tp);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001092:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a06 	vldr	s15, [r3, #24]
 800109c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid->differentiator = (2.0f*pid->Kd*(measurement - pid->prevMeasurement)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* sygnal sterujacy */
	pid->u = proportional + pid->integrator + pid->differentiator;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80010b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/* Ograniczenie syngalu */

	if(pid->u > pid->limMax) {
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd04      	ble.n	80010e8 <PIDController_Update+0x198>
		pid->u = pid->limMax;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e6:	e00e      	b.n	8001106 <PIDController_Update+0x1b6>
	} else if(pid->u < pid->limMin){
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	d503      	bpl.n	8001106 <PIDController_Update+0x1b6>
		pid->u = pid->limMin;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Zapisanie nowego 'poprzedniego' bledu oraz pomiaru */
	pid->prevE = error;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	621a      	str	r2, [r3, #32]
	pid->prevMeasurement = measurement;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	629a      	str	r2, [r3, #40]	; 0x28

	/* Przekazanie sygnalu sterujacego */
	return pid->u;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	ee07 3a90 	vmov	s15, r3
}
 800111a:	eeb0 0a67 	vmov.f32	s0, s15
 800111e:	3724      	adds	r7, #36	; 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <BH1750_Init+0x34>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001136:	f000 f813 	bl	8001160 <BH1750_Reset>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d107      	bne.n	8001150 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001140:	2045      	movs	r0, #69	; 0x45
 8001142:	f000 f859 	bl	80011f8 <BH1750_SetMtreg>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <BH1750_Init+0x28>
			return BH1750_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e000      	b.n	8001152 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000214 	.word	0x20000214

08001160 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001166:	2307      	movs	r3, #7
 8001168:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <BH1750_Reset+0x30>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	230a      	movs	r3, #10
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2146      	movs	r1, #70	; 0x46
 8001178:	f001 fea2 	bl	8002ec0 <HAL_I2C_Master_Transmit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <BH1750_Reset+0x26>
		return BH1750_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000214 	.word	0x20000214

08001194 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af02      	add	r7, sp, #8
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d106      	bne.n	80011b6 <BH1750_SetMode+0x22>
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <BH1750_SetMode+0x22>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e018      	b.n	80011e8 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <BH1750_SetMode+0x30>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e011      	b.n	80011e8 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <BH1750_SetMode+0x5c>)
 80011c8:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <BH1750_SetMode+0x60>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	1dfa      	adds	r2, r7, #7
 80011d0:	230a      	movs	r3, #10
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2146      	movs	r1, #70	; 0x46
 80011d8:	f001 fe72 	bl	8002ec0 <HAL_I2C_Master_Transmit>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <BH1750_SetMode+0x52>
		return BH1750_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000210 	.word	0x20000210
 80011f4:	20000214 	.word	0x20000214

080011f8 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b1e      	cmp	r3, #30
 8001206:	d902      	bls.n	800120e <BH1750_SetMtreg+0x16>
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d101      	bne.n	8001212 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e037      	b.n	8001282 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <BH1750_SetMtreg+0x94>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001222:	b2db      	uxtb	r3, r3
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	b25b      	sxtb	r3, r3
 8001230:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001234:	b25b      	sxtb	r3, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <BH1750_SetMtreg+0x98>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	230a      	movs	r3, #10
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	2146      	movs	r1, #70	; 0x46
 800124a:	f001 fe39 	bl	8002ec0 <HAL_I2C_Master_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e012      	b.n	8001282 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <BH1750_SetMtreg+0x98>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	230a      	movs	r3, #10
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	2146      	movs	r1, #70	; 0x46
 800126e:	f001 fe27 	bl	8002ec0 <HAL_I2C_Master_Transmit>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000218 	.word	0x20000218
 8001290:	20000214 	.word	0x20000214

08001294 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af02      	add	r7, sp, #8
 800129a:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <BH1750_ReadLight+0xa0>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f107 0208 	add.w	r2, r7, #8
 80012a4:	230a      	movs	r3, #10
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2302      	movs	r3, #2
 80012aa:	2146      	movs	r1, #70	; 0x46
 80012ac:	f001 fefc 	bl	80030a8 <HAL_I2C_Master_Receive>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d138      	bne.n	8001328 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80012b6:	7a3b      	ldrb	r3, [r7, #8]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	7a7a      	ldrb	r2, [r7, #9]
 80012bc:	4313      	orrs	r3, r2
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <BH1750_ReadLight+0xa4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b45      	cmp	r3, #69	; 0x45
 80012d0:	d00f      	beq.n	80012f2 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <BH1750_ReadLight+0xa4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012de:	eddf 6a17 	vldr	s13, [pc, #92]	; 800133c <BH1750_ReadLight+0xa8>
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ee:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <BH1750_ReadLight+0xac>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b21      	cmp	r3, #33	; 0x21
 80012f8:	d003      	beq.n	8001302 <BH1750_ReadLight+0x6e>
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <BH1750_ReadLight+0xac>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d107      	bne.n	8001312 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8001302:	ed97 7a03 	vldr	s14, [r7, #12]
 8001306:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130e:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001312:	ed97 7a03 	vldr	s14, [r7, #12]
 8001316:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001344 <BH1750_ReadLight+0xb0>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	e000      	b.n	800132a <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000214 	.word	0x20000214
 8001338:	20000218 	.word	0x20000218
 800133c:	428a0000 	.word	0x428a0000
 8001340:	20000210 	.word	0x20000210
 8001344:	3f99999a 	.word	0x3f99999a

08001348 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
       switch (key[0]) {
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <HAL_UART_RxCpltCallback+0x94>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b65      	cmp	r3, #101	; 0x65
 8001356:	d01c      	beq.n	8001392 <HAL_UART_RxCpltCallback+0x4a>
 8001358:	2b71      	cmp	r3, #113	; 0x71
 800135a:	d135      	bne.n	80013c8 <HAL_UART_RxCpltCallback+0x80>
             case 'q': yr += 10; if(yr > limitMax) yr = limitMax;   break;
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 800136c:	edc3 7a00 	vstr	s15, [r3]
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 8001372:	ed93 7a00 	vldr	s14, [r3]
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_UART_RxCpltCallback+0x9c>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dc00      	bgt.n	8001388 <HAL_UART_RxCpltCallback+0x40>
 8001386:	e01f      	b.n	80013c8 <HAL_UART_RxCpltCallback+0x80>
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_UART_RxCpltCallback+0x9c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	e01a      	b.n	80013c8 <HAL_UART_RxCpltCallback+0x80>
             case 'e': yr -= 10; if(yr < limitMin) yr = limitMin;   break;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800139c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_RxCpltCallback+0xa0>)
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	d400      	bmi.n	80013be <HAL_UART_RxCpltCallback+0x76>
 80013bc:	e003      	b.n	80013c6 <HAL_UART_RxCpltCallback+0x7e>
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_UART_RxCpltCallback+0xa0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_UART_RxCpltCallback+0x98>)
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	bf00      	nop
       }
       HAL_UART_Receive_IT(&huart3, key, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	4904      	ldr	r1, [pc, #16]	; (80013dc <HAL_UART_RxCpltCallback+0x94>)
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <HAL_UART_RxCpltCallback+0xa4>)
 80013ce:	f004 fd9a 	bl	8005f06 <HAL_UART_Receive_IT>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000081c 	.word	0x2000081c
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000828 	.word	0x20000828
 80013e8:	20000820 	.word	0x20000820
 80013ec:	20000298 	.word	0x20000298

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f001 f8e8 	bl	80025ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f8bd 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 faed 	bl	80019dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001402:	f000 fa8d 	bl	8001920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001406:	f000 fabb 	bl	8001980 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800140a:	f000 f91d 	bl	8001648 <MX_I2C1_Init>
  MX_TIM1_Init();
 800140e:	f000 f9db 	bl	80017c8 <MX_TIM1_Init>
  MX_I2C4_Init();
 8001412:	f000 f999 	bl	8001748 <MX_I2C4_Init>
  MX_I2C2_Init();
 8001416:	f000 f957 	bl	80016c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hi2c2);
 800141a:	4849      	ldr	r0, [pc, #292]	; (8001540 <main+0x150>)
 800141c:	f7ff fe84 	bl	8001128 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001420:	2011      	movs	r0, #17
 8001422:	f7ff feb7 	bl	8001194 <BH1750_SetMode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001426:	2100      	movs	r1, #0
 8001428:	4846      	ldr	r0, [pc, #280]	; (8001544 <main+0x154>)
 800142a:	f003 fce9 	bl	8004e00 <HAL_TIM_PWM_Start>
  PIDController_Init(&pid);
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <main+0x158>)
 8001430:	f7ff fd56 	bl	8000ee0 <PIDController_Init>
  HAL_UART_Receive_IT(&huart3, key, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4945      	ldr	r1, [pc, #276]	; (800154c <main+0x15c>)
 8001438:	4845      	ldr	r0, [pc, #276]	; (8001550 <main+0x160>)
 800143a:	f004 fd64 	bl	8005f06 <HAL_UART_Receive_IT>
  tm1637Init();
 800143e:	f000 fbd1 	bl	8001be4 <tm1637Init>
  tm1637SetBrightness(3);
 8001442:	2003      	movs	r0, #3
 8001444:	f000 fc82 	bl	8001d4c <tm1637SetBrightness>
//  tm1637DisplayDecimal(1234, 1);
  float light;
	HAL_Delay(1000);
 8001448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800144c:	f001 f91a 	bl	8002684 <HAL_Delay>
	BH1750_ReadLight(&light);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff1e 	bl	8001294 <BH1750_ReadLight>
	limitMin = light;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <main+0x164>)
 800145c:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <main+0x154>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001466:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146c:	f001 f90a 	bl	8002684 <HAL_Delay>
	BH1750_ReadLight(&light);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff0e 	bl	8001294 <BH1750_ReadLight>
	limitMax = light;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a37      	ldr	r2, [pc, #220]	; (8001558 <main+0x168>)
 800147c:	6013      	str	r3, [r2, #0]
  HAL_Delay(1000);
 800147e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001482:	f001 f8ff 	bl	8002684 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  BH1750_ReadLight(&measure);
 8001486:	4835      	ldr	r0, [pc, #212]	; (800155c <main+0x16c>)
 8001488:	f7ff ff04 	bl	8001294 <BH1750_ReadLight>
	  u = (uint16_t)PIDController_Update(&pid, yr, measure);
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <main+0x170>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <main+0x16c>)
 8001494:	ed93 7a00 	vldr	s14, [r3]
 8001498:	eef0 0a47 	vmov.f32	s1, s14
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	4829      	ldr	r0, [pc, #164]	; (8001548 <main+0x158>)
 80014a2:	f7ff fd55 	bl	8000f50 <PIDController_Update>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ae:	ee17 3a90 	vmov	r3, s15
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <main+0x174>)
 80014b6:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <main+0x174>)
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <main+0x154>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
	  wyswietlaczf = measure*10;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <main+0x16c>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <main+0x178>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
	  wyswietlacz = wyswietlaczf;
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <main+0x178>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	4b21      	ldr	r3, [pc, #132]	; (800156c <main+0x17c>)
 80014e6:	601a      	str	r2, [r3, #0]
	  tm1637DisplayDecimal(wyswietlacz, 0);
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <main+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fbbe 	bl	8001c70 <tm1637DisplayDecimal>
	  sprintf((char*)text, "%.2f,%d,%.2f \n", measure, u, yr);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <main+0x16c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f845 	bl	8000588 <__aeabi_f2d>
 80014fe:	4604      	mov	r4, r0
 8001500:	460d      	mov	r5, r1
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <main+0x174>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461e      	mov	r6, r3
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <main+0x170>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f83b 	bl	8000588 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800151a:	9600      	str	r6, [sp, #0]
 800151c:	4622      	mov	r2, r4
 800151e:	462b      	mov	r3, r5
 8001520:	4913      	ldr	r1, [pc, #76]	; (8001570 <main+0x180>)
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <main+0x184>)
 8001524:	f006 fe78 	bl	8008218 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 500);
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <main+0x184>)
 800152a:	f7fe fe71 	bl	8000210 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001536:	490f      	ldr	r1, [pc, #60]	; (8001574 <main+0x184>)
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <main+0x160>)
 800153a:	f004 fc51 	bl	8005de0 <HAL_UART_Transmit>
  {
 800153e:	e7a2      	b.n	8001486 <main+0x96>
 8001540:	2000076c 	.word	0x2000076c
 8001544:	200007d0 	.word	0x200007d0
 8001548:	20000268 	.word	0x20000268
 800154c:	2000081c 	.word	0x2000081c
 8001550:	20000298 	.word	0x20000298
 8001554:	20000820 	.word	0x20000820
 8001558:	20000828 	.word	0x20000828
 800155c:	200007b8 	.word	0x200007b8
 8001560:	20000000 	.word	0x20000000
 8001564:	20000824 	.word	0x20000824
 8001568:	20000200 	.word	0x20000200
 800156c:	200001fc 	.word	0x200001fc
 8001570:	0800a688 	.word	0x0800a688
 8001574:	200007bc 	.word	0x200007bc

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	; 0x50
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f006 f9d4 	bl	8007934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800159c:	f002 fad2 	bl	8003b44 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <SystemClock_Config+0xc8>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <SystemClock_Config+0xc8>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <SystemClock_Config+0xc8>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <SystemClock_Config+0xcc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <SystemClock_Config+0xcc>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <SystemClock_Config+0xcc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015e8:	2304      	movs	r3, #4
 80015ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015ec:	2348      	movs	r3, #72	; 0x48
 80015ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015f4:	2303      	movs	r3, #3
 80015f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fab1 	bl	8003b64 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001608:	f000 fae6 	bl	8001bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fd3f 	bl	80040ac <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001634:	f000 fad0 	bl	8001bd8 <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	3750      	adds	r7, #80	; 0x50
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000

08001648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_I2C1_Init+0x74>)
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <MX_I2C1_Init+0x78>)
 8001650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_I2C1_Init+0x74>)
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <MX_I2C1_Init+0x7c>)
 8001656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_I2C1_Init+0x74>)
 8001660:	2201      	movs	r2, #1
 8001662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001682:	480e      	ldr	r0, [pc, #56]	; (80016bc <MX_I2C1_Init+0x74>)
 8001684:	f001 fb8c 	bl	8002da0 <HAL_I2C_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168e:	f000 faa3 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <MX_I2C1_Init+0x74>)
 8001696:	f002 f875 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016a0:	f000 fa9a 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a4:	2100      	movs	r1, #0
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_I2C1_Init+0x74>)
 80016a8:	f002 f8b7 	bl	800381a <HAL_I2CEx_ConfigDigitalFilter>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016b2:	f000 fa91 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000031c 	.word	0x2000031c
 80016c0:	40005400 	.word	0x40005400
 80016c4:	00808cd2 	.word	0x00808cd2

080016c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_I2C2_Init+0x74>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_I2C2_Init+0x78>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_I2C2_Init+0x74>)
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <MX_I2C2_Init+0x7c>)
 80016d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_I2C2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_I2C2_Init+0x74>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_I2C2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_I2C2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C2_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C2_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C2_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <MX_I2C2_Init+0x74>)
 8001704:	f001 fb4c 	bl	8002da0 <HAL_I2C_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800170e:	f000 fa63 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <MX_I2C2_Init+0x74>)
 8001716:	f002 f835 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001720:	f000 fa5a 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_I2C2_Init+0x74>)
 8001728:	f002 f877 	bl	800381a <HAL_I2CEx_ConfigDigitalFilter>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001732:	f000 fa51 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000076c 	.word	0x2000076c
 8001740:	40005800 	.word	0x40005800
 8001744:	00808cd2 	.word	0x00808cd2

08001748 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_I2C4_Init+0x74>)
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <MX_I2C4_Init+0x78>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_I2C4_Init+0x74>)
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <MX_I2C4_Init+0x7c>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_I2C4_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_I2C4_Init+0x74>)
 8001760:	2201      	movs	r2, #1
 8001762:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_I2C4_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_I2C4_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C4_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C4_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C4_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <MX_I2C4_Init+0x74>)
 8001784:	f001 fb0c 	bl	8002da0 <HAL_I2C_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800178e:	f000 fa23 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_I2C4_Init+0x74>)
 8001796:	f001 fff5 	bl	8003784 <HAL_I2CEx_ConfigAnalogFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80017a0:	f000 fa1a 	bl	8001bd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_I2C4_Init+0x74>)
 80017a8:	f002 f837 	bl	800381a <HAL_I2CEx_ConfigDigitalFilter>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017b2:	f000 fa11 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000021c 	.word	0x2000021c
 80017c0:	40006000 	.word	0x40006000
 80017c4:	00808cd2 	.word	0x00808cd2

080017c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b09a      	sub	sp, #104	; 0x68
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	222c      	movs	r2, #44	; 0x2c
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f006 f896 	bl	8007934 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <MX_TIM1_Init+0x150>)
 800180a:	4a44      	ldr	r2, [pc, #272]	; (800191c <MX_TIM1_Init+0x154>)
 800180c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800180e:	4b42      	ldr	r3, [pc, #264]	; (8001918 <MX_TIM1_Init+0x150>)
 8001810:	2247      	movs	r2, #71	; 0x47
 8001812:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <MX_TIM1_Init+0x150>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <MX_TIM1_Init+0x150>)
 800181c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001820:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <MX_TIM1_Init+0x150>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <MX_TIM1_Init+0x150>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <MX_TIM1_Init+0x150>)
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001834:	4838      	ldr	r0, [pc, #224]	; (8001918 <MX_TIM1_Init+0x150>)
 8001836:	f003 fa2b 	bl	8004c90 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001840:	f000 f9ca 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800184e:	4619      	mov	r1, r3
 8001850:	4831      	ldr	r0, [pc, #196]	; (8001918 <MX_TIM1_Init+0x150>)
 8001852:	f003 fce3 	bl	800521c <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800185c:	f000 f9bc 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001860:	482d      	ldr	r0, [pc, #180]	; (8001918 <MX_TIM1_Init+0x150>)
 8001862:	f003 fa6c 	bl	8004d3e <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800186c:	f000 f9b4 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800187c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001880:	4619      	mov	r1, r3
 8001882:	4825      	ldr	r0, [pc, #148]	; (8001918 <MX_TIM1_Init+0x150>)
 8001884:	f004 f952 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800188e:	f000 f9a3 	bl	8001bd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	; 0x60
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800189e:	2300      	movs	r3, #0
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	4818      	ldr	r0, [pc, #96]	; (8001918 <MX_TIM1_Init+0x150>)
 80018b8:	f003 fb9c 	bl	8004ff4 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018c2:	f000 f989 	bl	8001bd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM1_Init+0x150>)
 80018fc:	f004 f9a4 	bl	8005c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001906:	f000 f967 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM1_Init+0x150>)
 800190c:	f000 fc0e 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001910:	bf00      	nop
 8001912:	3768      	adds	r7, #104	; 0x68
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200007d0 	.word	0x200007d0
 800191c:	40010000 	.word	0x40010000

08001920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_USART3_UART_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_USART3_UART_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_USART3_UART_Init+0x58>)
 8001964:	f004 f9ee 	bl	8005d44 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800196e:	f000 f933 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000298 	.word	0x20000298
 800197c:	40004800 	.word	0x40004800

08001980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800198a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	2206      	movs	r2, #6
 8001990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001994:	2202      	movs	r2, #2
 8001996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c4:	f001 ff75 	bl	80038b2 <HAL_PCD_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019ce:	f000 f903 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000368 	.word	0x20000368

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08e      	sub	sp, #56	; 0x38
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	4b74      	ldr	r3, [pc, #464]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a73      	ldr	r2, [pc, #460]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a0a:	4b6e      	ldr	r3, [pc, #440]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a6d      	ldr	r2, [pc, #436]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0320 	and.w	r3, r3, #32
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a67      	ldr	r2, [pc, #412]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a61      	ldr	r2, [pc, #388]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a5b      	ldr	r2, [pc, #364]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a49      	ldr	r2, [pc, #292]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <MX_GPIO_Init+0x1e8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ab8:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <MX_GPIO_Init+0x1ec>)
 8001aba:	f001 f957 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4842      	ldr	r0, [pc, #264]	; (8001bcc <MX_GPIO_Init+0x1f0>)
 8001ac4:	f001 f952 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001adc:	4619      	mov	r1, r3
 8001ade:	483c      	ldr	r0, [pc, #240]	; (8001bd0 <MX_GPIO_Init+0x1f4>)
 8001ae0:	f000 ff98 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ae4:	2332      	movs	r3, #50	; 0x32
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001af4:	230b      	movs	r3, #11
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4834      	ldr	r0, [pc, #208]	; (8001bd0 <MX_GPIO_Init+0x1f4>)
 8001b00:	f000 ff88 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b04:	2386      	movs	r3, #134	; 0x86
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b14:	230b      	movs	r3, #11
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482d      	ldr	r0, [pc, #180]	; (8001bd4 <MX_GPIO_Init+0x1f8>)
 8001b20:	f000 ff78 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b24:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4822      	ldr	r0, [pc, #136]	; (8001bc8 <MX_GPIO_Init+0x1ec>)
 8001b3e:	f000 ff69 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b54:	230b      	movs	r3, #11
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481a      	ldr	r0, [pc, #104]	; (8001bc8 <MX_GPIO_Init+0x1ec>)
 8001b60:	f000 ff58 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b64:	2340      	movs	r3, #64	; 0x40
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_GPIO_Init+0x1f0>)
 8001b7c:	f000 ff4a 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <MX_GPIO_Init+0x1f0>)
 8001b94:	f000 ff3e 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001baa:	230b      	movs	r3, #11
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_GPIO_Init+0x1f0>)
 8001bb6:	f000 ff2d 	bl	8002a14 <HAL_GPIO_Init>

}
 8001bba:	bf00      	nop
 8001bbc:	3738      	adds	r7, #56	; 0x38
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <tm1637Init+0x84>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <tm1637Init+0x84>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <tm1637Init+0x84>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <tm1637Init+0x84>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <tm1637Init+0x84>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <tm1637Init+0x84>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001c2e:	2311      	movs	r3, #17
 8001c30:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <tm1637Init+0x88>)
 8001c44:	f000 fee6 	bl	8002a14 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8001c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c4c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <tm1637Init+0x88>)
 8001c56:	f000 fedd 	bl	8002a14 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8001c5a:	2008      	movs	r0, #8
 8001c5c:	f000 f876 	bl	8001d4c <tm1637SetBrightness>
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40021400 	.word	0x40021400

08001c70 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e032      	b.n	8001ce6 <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <tm1637DisplayDecimal+0xd4>)
 8001c84:	fb83 2301 	smull	r2, r3, r3, r1
 8001c88:	109a      	asrs	r2, r3, #2
 8001c8a:	17cb      	asrs	r3, r1, #31
 8001c8c:	1ad2      	subs	r2, r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	1aca      	subs	r2, r1, r3
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <tm1637DisplayDecimal+0xd8>)
 8001c9a:	5c99      	ldrb	r1, [r3, r2]
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d110      	bne.n	8001cd0 <tm1637DisplayDecimal+0x60>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8001cb4:	f107 020c 	add.w	r2, r7, #12
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc2:	b2d9      	uxtb	r1, r3
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4413      	add	r3, r2
 8001ccc:	460a      	mov	r2, r1
 8001cce:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <tm1637DisplayDecimal+0xd4>)
 8001cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd8:	1092      	asrs	r2, r2, #2
 8001cda:	17db      	asrs	r3, r3, #31
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	ddc9      	ble.n	8001c80 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8001cec:	f000 f843 	bl	8001d76 <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001cf0:	2040      	movs	r0, #64	; 0x40
 8001cf2:	f000 f872 	bl	8001dda <_tm1637WriteByte>
    _tm1637ReadResult();
 8001cf6:	f000 f860 	bl	8001dba <_tm1637ReadResult>
    _tm1637Stop();
 8001cfa:	f000 f849 	bl	8001d90 <_tm1637Stop>

    _tm1637Start();
 8001cfe:	f000 f83a 	bl	8001d76 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001d02:	20c0      	movs	r0, #192	; 0xc0
 8001d04:	f000 f869 	bl	8001dda <_tm1637WriteByte>
    _tm1637ReadResult();
 8001d08:	f000 f857 	bl	8001dba <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e00f      	b.n	8001d32 <tm1637DisplayDecimal+0xc2>
        _tm1637WriteByte(digitArr[3 - i]);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	f1c3 0303 	rsb	r3, r3, #3
 8001d18:	f107 0218 	add.w	r2, r7, #24
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f859 	bl	8001dda <_tm1637WriteByte>
        _tm1637ReadResult();
 8001d28:	f000 f847 	bl	8001dba <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	ddec      	ble.n	8001d12 <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8001d38:	f000 f82a 	bl	8001d90 <_tm1637Stop>
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	66666667 	.word	0x66666667
 8001d48:	0800a698 	.word	0x0800a698

08001d4c <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8001d56:	f000 f80e 	bl	8001d76 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	3b79      	subs	r3, #121	; 0x79
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f83a 	bl	8001dda <_tm1637WriteByte>
    _tm1637ReadResult();
 8001d66:	f000 f828 	bl	8001dba <_tm1637ReadResult>
    _tm1637Stop();
 8001d6a:	f000 f811 	bl	8001d90 <_tm1637Stop>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_tm1637Start>:

void _tm1637Start(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8001d7a:	f000 f875 	bl	8001e68 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8001d7e:	f000 f88b 	bl	8001e98 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f000 f853 	bl	8001e2e <_tm1637DelayUsec>
    _tm1637DioLow();
 8001d88:	f000 f892 	bl	8001eb0 <_tm1637DioLow>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001d94:	f000 f874 	bl	8001e80 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f000 f848 	bl	8001e2e <_tm1637DelayUsec>
    _tm1637DioLow();
 8001d9e:	f000 f887 	bl	8001eb0 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001da2:	2002      	movs	r0, #2
 8001da4:	f000 f843 	bl	8001e2e <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001da8:	f000 f85e 	bl	8001e68 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001dac:	2002      	movs	r0, #2
 8001dae:	f000 f83e 	bl	8001e2e <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001db2:	f000 f871 	bl	8001e98 <_tm1637DioHigh>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001dbe:	f000 f85f 	bl	8001e80 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001dc2:	2005      	movs	r0, #5
 8001dc4:	f000 f833 	bl	8001e2e <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001dc8:	f000 f84e 	bl	8001e68 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f000 f82e 	bl	8001e2e <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001dd2:	f000 f855 	bl	8001e80 <_tm1637ClkLow>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e019      	b.n	8001e1e <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8001dea:	f000 f849 	bl	8001e80 <_tm1637ClkLow>
        if (b & 0x01) {
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8001df8:	f000 f84e 	bl	8001e98 <_tm1637DioHigh>
 8001dfc:	e001      	b.n	8001e02 <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8001dfe:	f000 f857 	bl	8001eb0 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8001e02:	2003      	movs	r0, #3
 8001e04:	f000 f813 	bl	8001e2e <_tm1637DelayUsec>
        b >>= 1;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8001e0e:	f000 f82b 	bl	8001e68 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f80b 	bl	8001e2e <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b07      	cmp	r3, #7
 8001e22:	dde2      	ble.n	8001dea <_tm1637WriteByte+0x10>
    }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8001e36:	e00c      	b.n	8001e52 <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e003      	b.n	8001e46 <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8001e3e:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	ddf8      	ble.n	8001e3e <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ef      	bne.n	8001e38 <_tm1637DelayUsec+0xa>
        }
    }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e72:	4802      	ldr	r0, [pc, #8]	; (8001e7c <_tm1637ClkHigh+0x14>)
 8001e74:	f000 ff7a 	bl	8002d6c <HAL_GPIO_WritePin>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021400 	.word	0x40021400

08001e80 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001e84:	2200      	movs	r2, #0
 8001e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <_tm1637ClkLow+0x14>)
 8001e8c:	f000 ff6e 	bl	8002d6c <HAL_GPIO_WritePin>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021400 	.word	0x40021400

08001e98 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea2:	4802      	ldr	r0, [pc, #8]	; (8001eac <_tm1637DioHigh+0x14>)
 8001ea4:	f000 ff62 	bl	8002d6c <HAL_GPIO_WritePin>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021400 	.word	0x40021400

08001eb0 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eba:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <_tm1637DioLow+0x14>)
 8001ebc:	f000 ff56 	bl	8002d6c <HAL_GPIO_WritePin>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021400 	.word	0x40021400

08001ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_MspInit+0x44>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x44>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x44>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x44>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0ae      	sub	sp, #184	; 0xb8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2284      	movs	r2, #132	; 0x84
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 fcff 	bl	8007934 <memset>
  if(hi2c->Instance==I2C1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_I2C_MspInit+0x1c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d13e      	bne.n	8001fbe <HAL_I2C_MspInit+0xae>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f44:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 faad 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001f5c:	f7ff fe3c 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4a5c      	ldr	r2, [pc, #368]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001f66:	f043 0302 	orr.w	r3, r3, #2
 8001f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6c:	4b5a      	ldr	r3, [pc, #360]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f78:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f80:	2312      	movs	r3, #18
 8001f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f92:	2304      	movs	r3, #4
 8001f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	484f      	ldr	r0, [pc, #316]	; (80020dc <HAL_I2C_MspInit+0x1cc>)
 8001fa0:	f000 fd38 	bl	8002a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fa4:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b49      	ldr	r3, [pc, #292]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001fbc:	e085      	b.n	80020ca <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_I2C_MspInit+0x1d0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d13d      	bne.n	8002044 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd4:	f107 0320 	add.w	r3, r7, #32
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 fa69 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001fe4:	f7ff fdf8 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002006:	2312      	movs	r3, #18
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002018:	2304      	movs	r3, #4
 800201a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800201e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002022:	4619      	mov	r1, r3
 8002024:	482f      	ldr	r0, [pc, #188]	; (80020e4 <HAL_I2C_MspInit+0x1d4>)
 8002026:	f000 fcf5 	bl	8002a14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
}
 8002042:	e042      	b.n	80020ca <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C4)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <HAL_I2C_MspInit+0x1d8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d13d      	bne.n	80020ca <HAL_I2C_MspInit+0x1ba>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800204e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002052:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fa26 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 800206a:	f7ff fdb5 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002086:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800208a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208e:	2312      	movs	r3, #18
 8002090:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80020a0:	2304      	movs	r3, #4
 80020a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020aa:	4619      	mov	r1, r3
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <HAL_I2C_MspInit+0x1d4>)
 80020ae:	f000 fcb1 	bl	8002a14 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_I2C_MspInit+0x1c8>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
}
 80020ca:	bf00      	nop
 80020cc:	37b8      	adds	r7, #184	; 0xb8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40005800 	.word	0x40005800
 80020e4:	40021400 	.word	0x40021400
 80020e8:	40006000 	.word	0x40006000

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_TIM_Base_MspInit+0x38>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10b      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_TIM_Base_MspInit+0x3c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a11      	ldr	r2, [pc, #68]	; (8002190 <HAL_TIM_MspPostInit+0x64>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d11c      	bne.n	8002188 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_TIM_MspPostInit+0x68>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002166:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_TIM_MspPostInit+0x6c>)
 8002184:	f000 fc46 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010000 	.word	0x40010000
 8002194:	40023800 	.word	0x40023800
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0aa      	sub	sp, #168	; 0xa8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	2284      	movs	r2, #132	; 0x84
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f005 fbb9 	bl	8007934 <memset>
  if(huart->Instance==USART3)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_UART_MspInit+0xc4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d144      	bne.n	8002256 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 f968 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021e6:	f7ff fcf7 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_UART_MspInit+0xc8>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_UART_MspInit+0xc8>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <HAL_UART_MspInit+0xc8>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_UART_MspInit+0xc8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_UART_MspInit+0xc8>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_UART_MspInit+0xc8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800221a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800221e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002234:	2307      	movs	r3, #7
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800223e:	4619      	mov	r1, r3
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <HAL_UART_MspInit+0xcc>)
 8002242:	f000 fbe7 	bl	8002a14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2027      	movs	r0, #39	; 0x27
 800224c:	f000 fb19 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002250:	2027      	movs	r0, #39	; 0x27
 8002252:	f000 fb32 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	37a8      	adds	r7, #168	; 0xa8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40004800 	.word	0x40004800
 8002264:	40023800 	.word	0x40023800
 8002268:	40020c00 	.word	0x40020c00

0800226c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0ac      	sub	sp, #176	; 0xb0
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	2284      	movs	r2, #132	; 0x84
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f005 fb51 	bl	8007934 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229a:	d159      	bne.n	8002350 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800229c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 f8ff 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80022b8:	f7ff fc8e 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_PCD_MspInit+0xec>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a25      	ldr	r2, [pc, #148]	; (8002358 <HAL_PCD_MspInit+0xec>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_PCD_MspInit+0xec>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022ee:	230a      	movs	r3, #10
 80022f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f8:	4619      	mov	r1, r3
 80022fa:	4818      	ldr	r0, [pc, #96]	; (800235c <HAL_PCD_MspInit+0xf0>)
 80022fc:	f000 fb8a 	bl	8002a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002318:	4619      	mov	r1, r3
 800231a:	4810      	ldr	r0, [pc, #64]	; (800235c <HAL_PCD_MspInit+0xf0>)
 800231c:	f000 fb7a 	bl	8002a14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_PCD_MspInit+0xec>)
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_PCD_MspInit+0xec>)
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	6353      	str	r3, [r2, #52]	; 0x34
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_PCD_MspInit+0xec>)
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_PCD_MspInit+0xec>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_PCD_MspInit+0xec>)
 800233e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002342:	6453      	str	r3, [r2, #68]	; 0x44
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_PCD_MspInit+0xec>)
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	37b0      	adds	r7, #176	; 0xb0
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40020000 	.word	0x40020000

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 f94a 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <USART3_IRQHandler+0x10>)
 80023ba:	f003 fdf3 	bl	8005fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000298 	.word	0x20000298

080023c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	return 1;
 80023cc:	2301      	movs	r3, #1
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_kill>:

int _kill(int pid, int sig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023e2:	f005 fa7d 	bl	80078e0 <__errno>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2216      	movs	r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
	return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_exit>:

void _exit (int status)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffe7 	bl	80023d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800240a:	e7fe      	b.n	800240a <_exit+0x12>

0800240c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e00a      	b.n	8002434 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800241e:	f3af 8000 	nop.w
 8002422:	4601      	mov	r1, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	60ba      	str	r2, [r7, #8]
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf0      	blt.n	800241e <_read+0x12>
	}

return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e009      	b.n	800246c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	3301      	adds	r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	dbf1      	blt.n	8002458 <_write+0x12>
	}
	return len;
 8002474:	687b      	ldr	r3, [r7, #4]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_close>:

int _close(int file)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
	return -1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a6:	605a      	str	r2, [r3, #4]
	return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_isatty>:

int _isatty(int file)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	return 1;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
	return 0;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f0:	4a14      	ldr	r2, [pc, #80]	; (8002544 <_sbrk+0x5c>)
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <_sbrk+0x60>)
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <_sbrk+0x64>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <_sbrk+0x64>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <_sbrk+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	d207      	bcs.n	8002528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002518:	f005 f9e2 	bl	80078e0 <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	220c      	movs	r2, #12
 8002520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
 8002526:	e009      	b.n	800253c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <_sbrk+0x64>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4413      	add	r3, r2
 8002536:	4a05      	ldr	r2, [pc, #20]	; (800254c <_sbrk+0x64>)
 8002538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20050000 	.word	0x20050000
 8002548:	00000400 	.word	0x00000400
 800254c:	20000204 	.word	0x20000204
 8002550:	20000840 	.word	0x20000840

08002554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257e:	490e      	ldr	r1, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002594:	4c0b      	ldr	r4, [pc, #44]	; (80025c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ffd7 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f005 f9a1 	bl	80078ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7fe ff21 	bl	80013f0 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80025bc:	0800aab4 	.word	0x0800aab4
  ldr r2, =_sbss
 80025c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80025c4:	20000840 	.word	0x20000840

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>

080025ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ce:	2003      	movs	r0, #3
 80025d0:	f000 f94c 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 f805 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025da:	f7ff fc75 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f967 	bl	80028d6 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 f92f 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000004 	.word	0x20000004
 800263c:	2000000c 	.word	0x2000000c
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	2000000c 	.word	0x2000000c
 8002668:	2000082c 	.word	0x2000082c

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000082c 	.word	0x2000082c

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000000c 	.word	0x2000000c

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <__NVIC_SetPriorityGrouping+0x40>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x40>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	05fa0000 	.word	0x05fa0000

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	; (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7ff ff8e 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff29 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff3e 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff8e 	bl	80027c0 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5d 	bl	800276c <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff31 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff feb6 	bl	800266c <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d008      	beq.n	8002920 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e052      	b.n	80029c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0216 	bic.w	r2, r2, #22
 800292e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800293e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_DMA_Abort+0x62>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0208 	bic.w	r2, r2, #8
 800295e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002970:	e013      	b.n	800299a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002972:	f7ff fe7b 	bl	800266c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b05      	cmp	r3, #5
 800297e:	d90c      	bls.n	800299a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2203      	movs	r2, #3
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e015      	b.n	80029c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e4      	bne.n	8002972 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d004      	beq.n	80029ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e00c      	b.n	8002a06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2205      	movs	r2, #5
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e175      	b.n	8002d20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 8164 	bne.w	8002d1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x56>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80be 	beq.w	8002d1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_GPIO_Init+0x324>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_GPIO_Init+0x324>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <HAL_GPIO_Init+0x324>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bb6:	4a61      	ldr	r2, [pc, #388]	; (8002d3c <HAL_GPIO_Init+0x328>)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	220f      	movs	r2, #15
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_GPIO_Init+0x32c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d037      	beq.n	8002c52 <HAL_GPIO_Init+0x23e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_GPIO_Init+0x330>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d031      	beq.n	8002c4e <HAL_GPIO_Init+0x23a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a56      	ldr	r2, [pc, #344]	; (8002d48 <HAL_GPIO_Init+0x334>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d02b      	beq.n	8002c4a <HAL_GPIO_Init+0x236>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a55      	ldr	r2, [pc, #340]	; (8002d4c <HAL_GPIO_Init+0x338>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d025      	beq.n	8002c46 <HAL_GPIO_Init+0x232>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_GPIO_Init+0x33c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01f      	beq.n	8002c42 <HAL_GPIO_Init+0x22e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a53      	ldr	r2, [pc, #332]	; (8002d54 <HAL_GPIO_Init+0x340>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x22a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_GPIO_Init+0x344>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x226>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x348>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x222>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a50      	ldr	r2, [pc, #320]	; (8002d60 <HAL_GPIO_Init+0x34c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x21e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4f      	ldr	r2, [pc, #316]	; (8002d64 <HAL_GPIO_Init+0x350>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x21a>
 8002c2a:	2309      	movs	r3, #9
 8002c2c:	e012      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c2e:	230a      	movs	r3, #10
 8002c30:	e010      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c32:	2308      	movs	r3, #8
 8002c34:	e00e      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00c      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e00a      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x240>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c64:	4935      	ldr	r1, [pc, #212]	; (8002d3c <HAL_GPIO_Init+0x328>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cea:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_GPIO_Init+0x354>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f ae86 	bls.w	8002a34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40021400 	.word	0x40021400
 8002d58:	40021800 	.word	0x40021800
 8002d5c:	40021c00 	.word	0x40021c00
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40022400 	.word	0x40022400
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d88:	e003      	b.n	8002d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d8a:	887b      	ldrh	r3, [r7, #2]
 8002d8c:	041a      	lsls	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	619a      	str	r2, [r3, #24]
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff f8a2 	bl	8001f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e006      	b.n	8002e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d104      	bne.n	8002e3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_I2C_Init+0x11c>)
 8002e46:	430b      	orrs	r3, r1
 8002e48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	02008000 	.word	0x02008000

08002ec0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	f040 80da 	bne.w	8003096 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2C_Master_Transmit+0x30>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0d3      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ef8:	f7ff fbb8 	bl	800266c <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	2319      	movs	r3, #25
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f9e6 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0be      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2221      	movs	r2, #33	; 0x21
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2bff      	cmp	r3, #255	; 0xff
 8002f4a:	d90e      	bls.n	8002f6a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	22ff      	movs	r2, #255	; 0xff
 8002f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fbdc 	bl	8003720 <I2C_TransferConfig>
 8002f68:	e06c      	b.n	8003044 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fbcb 	bl	8003720 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f8a:	e05b      	b.n	8003044 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9e3 	bl	800335c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07b      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d034      	beq.n	8003044 <HAL_I2C_Master_Transmit+0x184>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d130      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2180      	movs	r1, #128	; 0x80
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f975 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04d      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2bff      	cmp	r3, #255	; 0xff
 8003004:	d90e      	bls.n	8003024 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	b2da      	uxtb	r2, r3
 8003012:	8979      	ldrh	r1, [r7, #10]
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb7f 	bl	8003720 <I2C_TransferConfig>
 8003022:	e00f      	b.n	8003044 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	b2da      	uxtb	r2, r3
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fb6e 	bl	8003720 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d19e      	bne.n	8002f8c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f9c2 	bl	80033dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e01a      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003076:	400b      	ands	r3, r1
 8003078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	80002000 	.word	0x80002000
 80030a4:	fe00e800 	.word	0xfe00e800

080030a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	461a      	mov	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	817b      	strh	r3, [r7, #10]
 80030b8:	4613      	mov	r3, r2
 80030ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	f040 80db 	bne.w	8003280 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_I2C_Master_Receive+0x30>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0d4      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e0:	f7ff fac4 	bl	800266c <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2319      	movs	r3, #25
 80030ec:	2201      	movs	r2, #1
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8f2 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0bf      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2222      	movs	r2, #34	; 0x22
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2210      	movs	r2, #16
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	893a      	ldrh	r2, [r7, #8]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d90e      	bls.n	8003152 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	b2da      	uxtb	r2, r3
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	4b52      	ldr	r3, [pc, #328]	; (800328c <HAL_I2C_Master_Receive+0x1e4>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fae8 	bl	8003720 <I2C_TransferConfig>
 8003150:	e06d      	b.n	800322e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	4b49      	ldr	r3, [pc, #292]	; (800328c <HAL_I2C_Master_Receive+0x1e4>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fad7 	bl	8003720 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003172:	e05c      	b.n	800322e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f96b 	bl	8003454 <I2C_WaitOnRXNEFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e07c      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d034      	beq.n	800322e <HAL_I2C_Master_Receive+0x186>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d130      	bne.n	800322e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	2200      	movs	r2, #0
 80031d4:	2180      	movs	r1, #128	; 0x80
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f880 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e04d      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d90e      	bls.n	800320e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	2300      	movs	r3, #0
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa8a 	bl	8003720 <I2C_TransferConfig>
 800320c:	e00f      	b.n	800322e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	2300      	movs	r3, #0
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fa79 	bl	8003720 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d19d      	bne.n	8003174 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f8cd 	bl	80033dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e01a      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2220      	movs	r2, #32
 8003252:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_I2C_Master_Receive+0x1e8>)
 8003260:	400b      	ands	r3, r1
 8003262:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	80002400 	.word	0x80002400
 8003290:	fe00e800 	.word	0xfe00e800

08003294 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d103      	bne.n	80032b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d007      	beq.n	80032d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	619a      	str	r2, [r3, #24]
  }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e022      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d01e      	beq.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7ff f9b9 	bl	800266c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d113      	bne.n	8003334 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e00f      	b.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	429a      	cmp	r2, r3
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d0cd      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003368:	e02c      	b.n	80033c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8ea 	bl	8003548 <I2C_IsErrorOccurred>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e02a      	b.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d01e      	beq.n	80033c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7ff f971 	bl	800266c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d113      	bne.n	80033c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e007      	b.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d1cb      	bne.n	800336a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	e028      	b.n	800343c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8aa 	bl	8003548 <I2C_IsErrorOccurred>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e026      	b.n	800344c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7ff f935 	bl	800266c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d1cf      	bne.n	80033ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003460:	e064      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f86e 	bl	8003548 <I2C_IsErrorOccurred>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e062      	b.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b20      	cmp	r3, #32
 8003482:	d138      	bne.n	80034f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d105      	bne.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e04e      	b.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d107      	bne.n	80034bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2204      	movs	r2, #4
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
 80034ba:	e002      	b.n	80034c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2220      	movs	r2, #32
 80034c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80034d6:	400b      	ands	r3, r1
 80034d8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e022      	b.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7ff f8b9 	bl	800266c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10f      	bne.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b04      	cmp	r3, #4
 8003538:	d193      	bne.n	8003462 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fe00e800 	.word	0xfe00e800

08003548 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d075      	beq.n	8003660 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2210      	movs	r2, #16
 800357a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800357c:	e056      	b.n	800362c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d052      	beq.n	800362c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7ff f871 	bl	800266c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_IsErrorOccurred+0x54>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d147      	bne.n	800362c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035be:	d12e      	bne.n	800361e <I2C_IsErrorOccurred+0xd6>
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c6:	d02a      	beq.n	800361e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d027      	beq.n	800361e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035de:	f7ff f845 	bl	800266c <HAL_GetTick>
 80035e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	e01b      	b.n	800361e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035e6:	f7ff f841 	bl	800266c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b19      	cmp	r3, #25
 80035f2:	d914      	bls.n	800361e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b20      	cmp	r3, #32
 800362a:	d1dc      	bne.n	80035e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	d003      	beq.n	8003642 <I2C_IsErrorOccurred+0xfa>
 800363a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800363e:	2b00      	cmp	r3, #0
 8003640:	d09d      	beq.n	800357e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2220      	movs	r2, #32
 8003650:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003682:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f043 0308 	orr.w	r3, r3, #8
 800369a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01c      	beq.n	8003710 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fddc 	bl	8003294 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b0d      	ldr	r3, [pc, #52]	; (800371c <I2C_IsErrorOccurred+0x1d4>)
 80036e8:	400b      	ands	r3, r1
 80036ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	fe00e800 	.word	0xfe00e800

08003720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	4613      	mov	r3, r2
 8003730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003738:	7a7b      	ldrb	r3, [r7, #9]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003740:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	4313      	orrs	r3, r2
 800374a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800374e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	0d5b      	lsrs	r3, r3, #21
 800375a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <I2C_TransferConfig+0x60>)
 8003760:	430b      	orrs	r3, r1
 8003762:	43db      	mvns	r3, r3
 8003764:	ea02 0103 	and.w	r1, r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	03ff63ff 	.word	0x03ff63ff

08003784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	d138      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e032      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6819      	ldr	r1, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	d139      	bne.n	80038a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800383a:	2302      	movs	r3, #2
 800383c:	e033      	b.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2224      	movs	r2, #36	; 0x24
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800386c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b4:	b08f      	sub	sp, #60	; 0x3c
 80038b6:	af0a      	add	r7, sp, #40	; 0x28
 80038b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e116      	b.n	8003af2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fcc4 	bl	800226c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d102      	bne.n	80038fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fd56 	bl	80073b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	687e      	ldr	r6, [r7, #4]
 8003910:	466d      	mov	r5, sp
 8003912:	f106 0410 	add.w	r4, r6, #16
 8003916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003922:	e885 0003 	stmia.w	r5, {r0, r1}
 8003926:	1d33      	adds	r3, r6, #4
 8003928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	f003 fcea 	bl	8007304 <USB_CoreInit>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0d7      	b.n	8003af2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f003 fd44 	bl	80073d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e04a      	b.n	80039ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003954:	7bfa      	ldrb	r2, [r7, #15]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	333d      	adds	r3, #61	; 0x3d
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	333c      	adds	r3, #60	; 0x3c
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	b298      	uxth	r0, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3342      	adds	r3, #66	; 0x42
 8003990:	4602      	mov	r2, r0
 8003992:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	333f      	adds	r3, #63	; 0x3f
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3344      	adds	r3, #68	; 0x44
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3348      	adds	r3, #72	; 0x48
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3350      	adds	r3, #80	; 0x50
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	3301      	adds	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3af      	bcc.n	8003954 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e044      	b.n	8003a84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	3301      	adds	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3b5      	bcc.n	80039fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	687e      	ldr	r6, [r7, #4]
 8003a96:	466d      	mov	r5, sp
 8003a98:	f106 0410 	add.w	r4, r6, #16
 8003a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aac:	1d33      	adds	r3, r6, #4
 8003aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	f003 fcdd 	bl	8007470 <USB_DevInit>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e014      	b.n	8003af2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d102      	bne.n	8003ae6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f80b 	bl	8003afc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 fe97 	bl	800781e <USB_DevDisconnect>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003afc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	10000003 	.word	0x10000003

08003b44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40007000 	.word	0x40007000

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e291      	b.n	800409e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8087 	beq.w	8003c96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b88:	4b96      	ldr	r3, [pc, #600]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00c      	beq.n	8003bae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b94:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d112      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x62>
 8003ba0:	4b90      	ldr	r3, [pc, #576]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bac:	d10b      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	4b8d      	ldr	r3, [pc, #564]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d06c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x130>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d168      	bne.n	8003c94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e26b      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x7a>
 8003bd0:	4b84      	ldr	r3, [pc, #528]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a83      	ldr	r2, [pc, #524]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	e02e      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x9c>
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a7e      	ldr	r2, [pc, #504]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7b      	ldr	r2, [pc, #492]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0xc0>
 8003c0a:	4b76      	ldr	r3, [pc, #472]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a75      	ldr	r2, [pc, #468]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a72      	ldr	r2, [pc, #456]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xd8>
 8003c24:	4b6f      	ldr	r3, [pc, #444]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b6c      	ldr	r3, [pc, #432]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6b      	ldr	r2, [pc, #428]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe fd12 	bl	800266c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fd0e 	bl	800266c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e21f      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe8>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fcfe 	bl	800266c <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe fcfa 	bl	800266c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e20b      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x110>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d069      	beq.n	8003d76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b4d      	ldr	r3, [pc, #308]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x190>
 8003cba:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x17a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1df      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	493d      	ldr	r1, [pc, #244]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e040      	b.n	8003d76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe fcb0 	bl	800266c <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fe fcac 	bl	800266c <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e1bd      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4929      	ldr	r1, [pc, #164]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e018      	b.n	8003d76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc8c 	bl	800266c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d58:	f7fe fc88 	bl	800266c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e199      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d038      	beq.n	8003df4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d019      	beq.n	8003dbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fc69 	bl	800266c <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fc65 	bl	800266c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e176      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x23a>
 8003dbc:	e01a      	b.n	8003df4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4a08      	ldr	r2, [pc, #32]	; (8003de4 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fc4f 	bl	800266c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fc4b 	bl	800266c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d903      	bls.n	8003de8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e15c      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
 8003de4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b91      	ldr	r3, [pc, #580]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a4 	beq.w	8003f4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a87      	ldr	r2, [pc, #540]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b85      	ldr	r3, [pc, #532]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	4b82      	ldr	r3, [pc, #520]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e36:	4b7f      	ldr	r3, [pc, #508]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7e      	ldr	r2, [pc, #504]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fe fc13 	bl	800266c <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fe fc0f 	bl	800266c <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e120      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5c:	4b75      	ldr	r3, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x31a>
 8003e70:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a6e      	ldr	r2, [pc, #440]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e02d      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x33c>
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a69      	ldr	r2, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b67      	ldr	r3, [pc, #412]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a66      	ldr	r2, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x35e>
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x376>
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a5a      	ldr	r2, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b58      	ldr	r3, [pc, #352]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a57      	ldr	r2, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fbc3 	bl	800266c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fe fbbf 	bl	800266c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0ce      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x386>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fbad 	bl	800266c <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe fba9 	bl	800266c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0b8      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80a4 	beq.w	800409c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f54:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d06b      	beq.n	8004038 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d149      	bne.n	8003ffc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a30      	ldr	r2, [pc, #192]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe fb7a 	bl	800266c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fb76 	bl	800266c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e087      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fe fb4a 	bl	800266c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fe fb46 	bl	800266c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e057      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x478>
 8003ffa:	e04f      	b.n	800409c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0b      	ldr	r2, [pc, #44]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe fb30 	bl	800266c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe fb2c 	bl	800266c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e03d      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x4ac>
 800402e:	e035      	b.n	800409c <HAL_RCC_OscConfig+0x538>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x544>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d028      	beq.n	8004098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d121      	bne.n	8004098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d11a      	bne.n	8004098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d111      	bne.n	8004098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0d0      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c4:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d910      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 020f 	bic.w	r2, r3, #15
 80040da:	4965      	ldr	r1, [pc, #404]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4313      	orrs	r3, r2
 80040e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d040      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e073      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06b      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4936      	ldr	r1, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fe fa64 	bl	800266c <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	e00a      	b.n	80041be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a8:	f7fe fa60 	bl	800266c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e053      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 020c 	and.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1eb      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d210      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4922      	ldr	r1, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x1cc>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1d0>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1d4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe f9c0 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	0800a6ac 	.word	0x0800a6ac
 800427c:	20000004 	.word	0x20000004
 8004280:	20000008 	.word	0x20000008

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	2300      	movs	r3, #0
 8004296:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	4b67      	ldr	r3, [pc, #412]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x40>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	f200 80bd 	bhi.w	8004428 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x3a>
 80042b6:	e0b7      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b61      	ldr	r3, [pc, #388]	; (8004440 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ba:	60bb      	str	r3, [r7, #8]
      break;
 80042bc:	e0b7      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b61      	ldr	r3, [pc, #388]	; (8004444 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042c0:	60bb      	str	r3, [r7, #8]
      break;
 80042c2:	e0b4      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b5d      	ldr	r3, [pc, #372]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042ce:	4b5b      	ldr	r3, [pc, #364]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d04d      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b58      	ldr	r3, [pc, #352]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	461a      	mov	r2, r3
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	ea02 0800 	and.w	r8, r2, r0
 80042f2:	ea03 0901 	and.w	r9, r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	014b      	lsls	r3, r1, #5
 8004304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004308:	0142      	lsls	r2, r0, #5
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	ebb0 0008 	subs.w	r0, r0, r8
 8004312:	eb61 0109 	sbc.w	r1, r1, r9
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004324:	0182      	lsls	r2, r0, #6
 8004326:	1a12      	subs	r2, r2, r0
 8004328:	eb63 0301 	sbc.w	r3, r3, r1
 800432c:	f04f 0000 	mov.w	r0, #0
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	00d9      	lsls	r1, r3, #3
 8004336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800433a:	00d0      	lsls	r0, r2, #3
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	eb12 0208 	adds.w	r2, r2, r8
 8004344:	eb43 0309 	adc.w	r3, r3, r9
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	0259      	lsls	r1, r3, #9
 8004352:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004356:	0250      	lsls	r0, r2, #9
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f7fc fc3e 	bl	8000be8 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e04a      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	099b      	lsrs	r3, r3, #6
 800437c:	461a      	mov	r2, r3
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	ea02 0400 	and.w	r4, r2, r0
 800438e:	ea03 0501 	and.w	r5, r3, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	014b      	lsls	r3, r1, #5
 80043a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043a4:	0142      	lsls	r2, r0, #5
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	1b00      	subs	r0, r0, r4
 80043ac:	eb61 0105 	sbc.w	r1, r1, r5
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	018b      	lsls	r3, r1, #6
 80043ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043be:	0182      	lsls	r2, r0, #6
 80043c0:	1a12      	subs	r2, r2, r0
 80043c2:	eb63 0301 	sbc.w	r3, r3, r1
 80043c6:	f04f 0000 	mov.w	r0, #0
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	00d9      	lsls	r1, r3, #3
 80043d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043d4:	00d0      	lsls	r0, r2, #3
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	1912      	adds	r2, r2, r4
 80043dc:	eb45 0303 	adc.w	r3, r5, r3
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	0299      	lsls	r1, r3, #10
 80043ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ee:	0290      	lsls	r0, r2, #10
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f7fc fbf2 	bl	8000be8 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	60bb      	str	r3, [r7, #8]
      break;
 8004426:	e002      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800442a:	60bb      	str	r3, [r7, #8]
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	68bb      	ldr	r3, [r7, #8]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200

08004448 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000004 	.word	0x20000004

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff0 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	0800a6bc 	.word	0x0800a6bc

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffdc 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0b5b      	lsrs	r3, r3, #13
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800a6bc 	.word	0x0800a6bc

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d012      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044d8:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a68      	ldr	r2, [pc, #416]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	4964      	ldr	r1, [pc, #400]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	4959      	ldr	r1, [pc, #356]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004546:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	494a      	ldr	r1, [pc, #296]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004564:	d101      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 808b 	beq.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a39      	ldr	r2, [pc, #228]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fe f858 	bl	800266c <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c0:	f7fe f854 	bl	800266c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e357      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045d2:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d035      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d02e      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d114      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fe f81c 	bl	800266c <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fe f818 	bl	800266c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e319      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d111      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004676:	400b      	ands	r3, r1
 8004678:	4901      	ldr	r1, [pc, #4]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
 800467e:	e00b      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004680:	40023800 	.word	0x40023800
 8004684:	40007000 	.word	0x40007000
 8004688:	0ffffcff 	.word	0x0ffffcff
 800468c:	4bb1      	ldr	r3, [pc, #708]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4ab0      	ldr	r2, [pc, #704]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004692:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	4bae      	ldr	r3, [pc, #696]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800469a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	49ab      	ldr	r1, [pc, #684]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d010      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b6:	4ba7      	ldr	r3, [pc, #668]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046bc:	4aa5      	ldr	r2, [pc, #660]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046c6:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	49a0      	ldr	r1, [pc, #640]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e4:	4b9b      	ldr	r3, [pc, #620]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f2:	4998      	ldr	r1, [pc, #608]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004706:	4b93      	ldr	r3, [pc, #588]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004714:	498f      	ldr	r1, [pc, #572]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004728:	4b8a      	ldr	r3, [pc, #552]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004736:	4987      	ldr	r1, [pc, #540]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	497e      	ldr	r1, [pc, #504]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476c:	4b79      	ldr	r3, [pc, #484]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	4976      	ldr	r1, [pc, #472]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478e:	4b71      	ldr	r3, [pc, #452]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f023 020c 	bic.w	r2, r3, #12
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	496d      	ldr	r1, [pc, #436]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b0:	4b68      	ldr	r3, [pc, #416]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	4965      	ldr	r1, [pc, #404]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d2:	4b60      	ldr	r3, [pc, #384]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e0:	495c      	ldr	r1, [pc, #368]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f4:	4b57      	ldr	r3, [pc, #348]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	4954      	ldr	r1, [pc, #336]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004816:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	494b      	ldr	r1, [pc, #300]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004838:	4b46      	ldr	r3, [pc, #280]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	4943      	ldr	r1, [pc, #268]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800485a:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	493a      	ldr	r1, [pc, #232]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800488a:	4932      	ldr	r1, [pc, #200]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	4929      	ldr	r1, [pc, #164]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048bc:	d101      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048be:	2301      	movs	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	4919      	ldr	r1, [pc, #100]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004900:	4b14      	ldr	r3, [pc, #80]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004910:	4910      	ldr	r1, [pc, #64]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d006      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80d9 	beq.w	8004ade <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004938:	f7fd fe98 	bl	800266c <HAL_GetTick>
 800493c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493e:	e00b      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004940:	f7fd fe94 	bl	800266c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d904      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e197      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ed      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d021      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11d      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004986:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	019a      	lsls	r2, r3, #6
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	071b      	lsls	r3, r3, #28
 80049ac:	4957      	ldr	r1, [pc, #348]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d129      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0f1b      	lsrs	r3, r3, #28
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f023 021f 	bic.w	r2, r3, #31
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0f1b      	lsrs	r3, r3, #28
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	019a      	lsls	r2, r3, #6
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	071b      	lsls	r3, r3, #28
 8004a74:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d011      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	019a      	lsls	r2, r3, #6
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4919      	ldr	r1, [pc, #100]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aac:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fdd8 	bl	800266c <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac0:	f7fd fdd4 	bl	800266c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0d7      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	f040 80cd 	bne.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fd fdbb 	bl	800266c <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004afa:	f7fd fdb7 	bl	800266c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b64      	cmp	r3, #100	; 0x64
 8004b06:	d903      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0ba      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b10:	4b5e      	ldr	r3, [pc, #376]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d0ed      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d02e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d12a      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	019a      	lsls	r2, r3, #6
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	4944      	ldr	r1, [pc, #272]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	493d      	ldr	r1, [pc, #244]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d022      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb0:	d11d      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	0e1b      	lsrs	r3, r3, #24
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	0f1b      	lsrs	r3, r3, #28
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	071b      	lsls	r3, r3, #28
 8004be6:	4929      	ldr	r1, [pc, #164]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d028      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	019a      	lsls	r2, r3, #6
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	4917      	ldr	r1, [pc, #92]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4911      	ldr	r1, [pc, #68]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fd fd08 	bl	800266c <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c60:	f7fd fd04 	bl	800266c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e007      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7e:	d1ef      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e049      	b.n	8004d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fa18 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fb6e 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e049      	b.n	8004de4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f841 	bl	8004dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f000 fb17 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_TIM_PWM_Start+0x24>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	e03c      	b.n	8004e9e <HAL_TIM_PWM_Start+0x9e>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d109      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x3e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	e02f      	b.n	8004e9e <HAL_TIM_PWM_Start+0x9e>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_PWM_Start+0x58>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e022      	b.n	8004e9e <HAL_TIM_PWM_Start+0x9e>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d109      	bne.n	8004e72 <HAL_TIM_PWM_Start+0x72>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e015      	b.n	8004e9e <HAL_TIM_PWM_Start+0x9e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_PWM_Start+0x8c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e008      	b.n	8004e9e <HAL_TIM_PWM_Start+0x9e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e092      	b.n	8004fcc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xb6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb4:	e023      	b.n	8004efe <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xc6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	e01b      	b.n	8004efe <HAL_TIM_PWM_Start+0xfe>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0xd6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed4:	e013      	b.n	8004efe <HAL_TIM_PWM_Start+0xfe>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0xe6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee4:	e00b      	b.n	8004efe <HAL_TIM_PWM_Start+0xfe>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0xf6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef4:	e003      	b.n	8004efe <HAL_TIM_PWM_Start+0xfe>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fdea 	bl	8005ae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <HAL_TIM_PWM_Start+0x1d4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_TIM_PWM_Start+0x120>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2f      	ldr	r2, [pc, #188]	; (8004fd8 <HAL_TIM_PWM_Start+0x1d8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_PWM_Start+0x124>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_TIM_PWM_Start+0x126>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <HAL_TIM_PWM_Start+0x1d4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d022      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d01d      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <HAL_TIM_PWM_Start+0x1dc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d018      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_TIM_PWM_Start+0x1e0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_TIM_PWM_Start+0x1e4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00e      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <HAL_TIM_PWM_Start+0x1d8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d009      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	; (8004fe8 <HAL_TIM_PWM_Start+0x1e8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d004      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x18a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_TIM_PWM_Start+0x1ec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d115      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_TIM_PWM_Start+0x1f0>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b06      	cmp	r3, #6
 8004f9a:	d015      	beq.n	8004fc8 <HAL_TIM_PWM_Start+0x1c8>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa2:	d011      	beq.n	8004fc8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	e008      	b.n	8004fc8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e000      	b.n	8004fca <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40001800 	.word	0x40001800
 8004ff0:	00010007 	.word	0x00010007

08004ff4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2300      	movs	r3, #0
 8005002:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800500e:	2302      	movs	r3, #2
 8005010:	e0ff      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b14      	cmp	r3, #20
 800501e:	f200 80f0 	bhi.w	8005202 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800507d 	.word	0x0800507d
 800502c:	08005203 	.word	0x08005203
 8005030:	08005203 	.word	0x08005203
 8005034:	08005203 	.word	0x08005203
 8005038:	080050bd 	.word	0x080050bd
 800503c:	08005203 	.word	0x08005203
 8005040:	08005203 	.word	0x08005203
 8005044:	08005203 	.word	0x08005203
 8005048:	080050ff 	.word	0x080050ff
 800504c:	08005203 	.word	0x08005203
 8005050:	08005203 	.word	0x08005203
 8005054:	08005203 	.word	0x08005203
 8005058:	0800513f 	.word	0x0800513f
 800505c:	08005203 	.word	0x08005203
 8005060:	08005203 	.word	0x08005203
 8005064:	08005203 	.word	0x08005203
 8005068:	08005181 	.word	0x08005181
 800506c:	08005203 	.word	0x08005203
 8005070:	08005203 	.word	0x08005203
 8005074:	08005203 	.word	0x08005203
 8005078:	080051c1 	.word	0x080051c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fa34 	bl	80054f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0208 	orr.w	r2, r2, #8
 8005096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0204 	bic.w	r2, r2, #4
 80050a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691a      	ldr	r2, [r3, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	619a      	str	r2, [r3, #24]
      break;
 80050ba:	e0a5      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fa86 	bl	80055d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6999      	ldr	r1, [r3, #24]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
      break;
 80050fc:	e084      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fadd 	bl	80056c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0208 	orr.w	r2, r2, #8
 8005118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0204 	bic.w	r2, r2, #4
 8005128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69d9      	ldr	r1, [r3, #28]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	61da      	str	r2, [r3, #28]
      break;
 800513c:	e064      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fb33 	bl	80057b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69d9      	ldr	r1, [r3, #28]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	021a      	lsls	r2, r3, #8
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	61da      	str	r2, [r3, #28]
      break;
 800517e:	e043      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fb6a 	bl	8005860 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0208 	orr.w	r2, r2, #8
 800519a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0204 	bic.w	r2, r2, #4
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051be:	e023      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fb9c 	bl	8005904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005200:	e002      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
      break;
 8005206:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIM_ConfigClockSource+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e0b4      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x186>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4b56      	ldr	r3, [pc, #344]	; (80053ac <HAL_TIM_ConfigClockSource+0x190>)
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x172>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xa6>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11a>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfa>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13a>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f000 fbe5 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f000 fbce 	bl	8005aa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fb42 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	; 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fb9b 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 fb61 	bl	8005a0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	; 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fb8b 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fb22 	bl	80059ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb7b 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fb72 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	fffeff88 	.word	0xfffeff88

080053b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d00f      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00b      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a3b      	ldr	r2, [pc, #236]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a3a      	ldr	r2, [pc, #232]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d027      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a2c      	ldr	r2, [pc, #176]	; (80054c8 <TIM_Base_SetConfig+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d023      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a2b      	ldr	r2, [pc, #172]	; (80054cc <TIM_Base_SetConfig+0x11c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <TIM_Base_SetConfig+0x120>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d01b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d017      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <TIM_Base_SetConfig+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <TIM_Base_SetConfig+0x12c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00f      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <TIM_Base_SetConfig+0x130>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00b      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a25      	ldr	r2, [pc, #148]	; (80054e4 <TIM_Base_SetConfig+0x134>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d007      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a24      	ldr	r2, [pc, #144]	; (80054e8 <TIM_Base_SetConfig+0x138>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a23      	ldr	r2, [pc, #140]	; (80054ec <TIM_Base_SetConfig+0x13c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d108      	bne.n	8005474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <TIM_Base_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0xf8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <TIM_Base_SetConfig+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40010000 	.word	0x40010000
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40010400 	.word	0x40010400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800
 80054e4:	40001800 	.word	0x40001800
 80054e8:	40001c00 	.word	0x40001c00
 80054ec:	40002000 	.word	0x40002000

080054f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f023 0201 	bic.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <TIM_OC1_SetConfig+0xd8>)
 800551c:	4013      	ands	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 0302 	bic.w	r3, r3, #2
 8005538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_OC1_SetConfig+0xdc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC1_SetConfig+0x64>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <TIM_OC1_SetConfig+0xe0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10c      	bne.n	800556e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 0308 	bic.w	r3, r3, #8
 800555a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0304 	bic.w	r3, r3, #4
 800556c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a16      	ldr	r2, [pc, #88]	; (80055cc <TIM_OC1_SetConfig+0xdc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC1_SetConfig+0x8e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <TIM_OC1_SetConfig+0xe0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d111      	bne.n	80055a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800558c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	bf00      	nop
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	fffeff8f 	.word	0xfffeff8f
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400

080055d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f023 0210 	bic.w	r2, r3, #16
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4b2e      	ldr	r3, [pc, #184]	; (80056b8 <TIM_OC2_SetConfig+0xe4>)
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 0320 	bic.w	r3, r3, #32
 800561e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a23      	ldr	r2, [pc, #140]	; (80056bc <TIM_OC2_SetConfig+0xe8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC2_SetConfig+0x68>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <TIM_OC2_SetConfig+0xec>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d10d      	bne.n	8005658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <TIM_OC2_SetConfig+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC2_SetConfig+0x94>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <TIM_OC2_SetConfig+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d113      	bne.n	8005690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800566e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	feff8fff 	.word	0xfeff8fff
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40010400 	.word	0x40010400

080056c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <TIM_OC3_SetConfig+0xe0>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800570c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <TIM_OC3_SetConfig+0xe4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC3_SetConfig+0x66>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a21      	ldr	r2, [pc, #132]	; (80057ac <TIM_OC3_SetConfig+0xe8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10d      	bne.n	8005746 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <TIM_OC3_SetConfig+0xe4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC3_SetConfig+0x92>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <TIM_OC3_SetConfig+0xe8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d113      	bne.n	800577e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800575c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	fffeff8f 	.word	0xfffeff8f
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40010400 	.word	0x40010400

080057b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <TIM_OC4_SetConfig+0xa4>)
 80057dc:	4013      	ands	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <TIM_OC4_SetConfig+0xa8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC4_SetConfig+0x68>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_OC4_SetConfig+0xac>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d109      	bne.n	800582c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	feff8fff 	.word	0xfeff8fff
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400

08005860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <TIM_OC5_SetConfig+0x98>)
 800588c:	4013      	ands	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a12      	ldr	r2, [pc, #72]	; (80058fc <TIM_OC5_SetConfig+0x9c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC5_SetConfig+0x5e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a11      	ldr	r2, [pc, #68]	; (8005900 <TIM_OC5_SetConfig+0xa0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d109      	bne.n	80058d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	621a      	str	r2, [r3, #32]
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	fffeff8f 	.word	0xfffeff8f
 80058fc:	40010000 	.word	0x40010000
 8005900:	40010400 	.word	0x40010400

08005904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <TIM_OC6_SetConfig+0x9c>)
 8005930:	4013      	ands	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <TIM_OC6_SetConfig+0xa0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC6_SetConfig+0x60>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <TIM_OC6_SetConfig+0xa4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	feff8fff 	.word	0xfeff8fff
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f043 0307 	orr.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2201      	movs	r2, #1
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e06d      	b.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a30      	ldr	r2, [pc, #192]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2f      	ldr	r2, [pc, #188]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d108      	bne.n	8005b8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d022      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb6:	d01d      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d018      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1c      	ldr	r2, [pc, #112]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a15      	ldr	r2, [pc, #84]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10c      	bne.n	8005c0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40001800 	.word	0x40001800

08005c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e065      	b.n	8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d115      	bne.n	8005d1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	051b      	lsls	r3, r3, #20
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40010400 	.word	0x40010400

08005d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e040      	b.n	8005dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fc fa18 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fbf8 	bl	8006578 <UART_SetConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fe4e 	bl	8006a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fed5 	bl	8006b80 <UART_CheckIdleState>
 8005dd6:	4603      	mov	r3, r0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	f040 8081 	bne.w	8005efc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_UART_Transmit+0x26>
 8005e00:	88fb      	ldrh	r3, [r7, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e079      	b.n	8005efe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Transmit+0x38>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e072      	b.n	8005efe <HAL_UART_Transmit+0x11e>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2221      	movs	r2, #33	; 0x21
 8005e2c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e2e:	f7fc fc1d 	bl	800266c <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d108      	bne.n	8005e60 <HAL_UART_Transmit+0x80>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	61bb      	str	r3, [r7, #24]
 8005e5e:	e003      	b.n	8005e68 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e70:	e02c      	b.n	8005ecc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 feb2 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e038      	b.n	8005efe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e007      	b.n	8005eba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1cc      	bne.n	8005e72 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2140      	movs	r1, #64	; 0x40
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fe7f 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e005      	b.n	8005efe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08a      	sub	sp, #40	; 0x28
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	4613      	mov	r3, r2
 8005f12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d13d      	bne.n	8005f98 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_UART_Receive_IT+0x22>
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e036      	b.n	8005f9a <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_UART_Receive_IT+0x34>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e02f      	b.n	8005f9a <HAL_UART_Receive_IT+0x94>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d018      	beq.n	8005f88 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	e853 3f00 	ldrex	r3, [r3]
 8005f62:	613b      	str	r3, [r7, #16]
   return(result);
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	6a3a      	ldr	r2, [r7, #32]
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e6      	bne.n	8005f56 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 feee 	bl	8006d70 <UART_Start_Receive_IT>
 8005f94:	4603      	mov	r3, r0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	; 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b0ba      	sub	sp, #232	; 0xe8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005fce:	f640 030f 	movw	r3, #2063	; 0x80f
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d115      	bne.n	800600c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe4:	f003 0320 	and.w	r3, r3, #32
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00f      	beq.n	800600c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 828f 	beq.w	8006520 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      }
      return;
 800600a:	e289      	b.n	8006520 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800600c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8117 	beq.w	8006244 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006022:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006026:	4b85      	ldr	r3, [pc, #532]	; (800623c <HAL_UART_IRQHandler+0x298>)
 8006028:	4013      	ands	r3, r2
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 810a 	beq.w	8006244 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d011      	beq.n	8006060 <HAL_UART_IRQHandler+0xbc>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00b      	beq.n	8006060 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2201      	movs	r2, #1
 800604e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d011      	beq.n	8006090 <HAL_UART_IRQHandler+0xec>
 800606c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2202      	movs	r2, #2
 800607e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d011      	beq.n	80060c0 <HAL_UART_IRQHandler+0x11c>
 800609c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2204      	movs	r2, #4
 80060ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2208      	movs	r2, #8
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f2:	f043 0208 	orr.w	r2, r3, #8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <HAL_UART_IRQHandler+0x18a>
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800611c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006124:	f043 0220 	orr.w	r2, r3, #32
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 81f5 	beq.w	8006524 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800617a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800617e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006182:	2b00      	cmp	r3, #0
 8006184:	d04f      	beq.n	8006226 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 febc 	bl	8006f04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d141      	bne.n	800621e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061a8:	e853 3f00 	ldrex	r3, [r3]
 80061ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3308      	adds	r3, #8
 80061c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1d9      	bne.n	800619a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d013      	beq.n	8006216 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_UART_IRQHandler+0x29c>)
 80061f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fc fbe7 	bl	80029ce <HAL_DMA_Abort_IT>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d017      	beq.n	8006236 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006210:	4610      	mov	r0, r2
 8006212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006214:	e00f      	b.n	8006236 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f998 	bl	800654c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800621c:	e00b      	b.n	8006236 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f994 	bl	800654c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006224:	e007      	b.n	8006236 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f990 	bl	800654c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006234:	e176      	b.n	8006524 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006236:	bf00      	nop
    return;
 8006238:	e174      	b.n	8006524 <HAL_UART_IRQHandler+0x580>
 800623a:	bf00      	nop
 800623c:	04000120 	.word	0x04000120
 8006240:	08006fcb 	.word	0x08006fcb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 8144 	bne.w	80064d6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 813d 	beq.w	80064d6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8136 	beq.w	80064d6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2210      	movs	r2, #16
 8006270:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	f040 80b2 	bne.w	80063e6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800628e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8148 	beq.w	8006528 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800629e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062a2:	429a      	cmp	r2, r3
 80062a4:	f080 8140 	bcs.w	8006528 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062bc:	f000 8085 	beq.w	80063ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1da      	bne.n	80062c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800631a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800632e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006332:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006336:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e1      	bne.n	800630a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800636a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800636c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e3      	bne.n	8006346 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639a:	f023 0310 	bic.w	r3, r3, #16
 800639e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80063ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fc fa92 	bl	80028ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	b29b      	uxth	r3, r3
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8be 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e4:	e0a0      	b.n	8006528 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8092 	beq.w	800652c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 808d 	beq.w	800652c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
 8006436:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800643a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e4      	bne.n	8006412 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	623b      	str	r3, [r7, #32]
   return(result);
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3308      	adds	r3, #8
 8006468:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800646c:	633a      	str	r2, [r7, #48]	; 0x30
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e3      	bne.n	8006448 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0310 	bic.w	r3, r3, #16
 80064a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	617b      	str	r3, [r7, #20]
   return(result);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e4      	bne.n	8006492 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f846 	bl	8006560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064d4:	e02a      	b.n	800652c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01c      	beq.n	8006530 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
    }
    return;
 80064fe:	e017      	b.n	8006530 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <HAL_UART_IRQHandler+0x58e>
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd6c 	bl	8006ff6 <UART_EndTransmit_IT>
    return;
 800651e:	e008      	b.n	8006532 <HAL_UART_IRQHandler+0x58e>
      return;
 8006520:	bf00      	nop
 8006522:	e006      	b.n	8006532 <HAL_UART_IRQHandler+0x58e>
    return;
 8006524:	bf00      	nop
 8006526:	e004      	b.n	8006532 <HAL_UART_IRQHandler+0x58e>
      return;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <HAL_UART_IRQHandler+0x58e>
      return;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_UART_IRQHandler+0x58e>
    return;
 8006530:	bf00      	nop
  }

}
 8006532:	37e8      	adds	r7, #232	; 0xe8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4ba7      	ldr	r3, [pc, #668]	; (8006840 <UART_SetConfig+0x2c8>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6812      	ldr	r2, [r2, #0]
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a95      	ldr	r2, [pc, #596]	; (8006844 <UART_SetConfig+0x2cc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d120      	bne.n	8006636 <UART_SetConfig+0xbe>
 80065f4:	4b94      	ldr	r3, [pc, #592]	; (8006848 <UART_SetConfig+0x2d0>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d816      	bhi.n	8006630 <UART_SetConfig+0xb8>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <UART_SetConfig+0x90>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006619 	.word	0x08006619
 800660c:	08006625 	.word	0x08006625
 8006610:	0800661f 	.word	0x0800661f
 8006614:	0800662b 	.word	0x0800662b
 8006618:	2301      	movs	r3, #1
 800661a:	77fb      	strb	r3, [r7, #31]
 800661c:	e14f      	b.n	80068be <UART_SetConfig+0x346>
 800661e:	2302      	movs	r3, #2
 8006620:	77fb      	strb	r3, [r7, #31]
 8006622:	e14c      	b.n	80068be <UART_SetConfig+0x346>
 8006624:	2304      	movs	r3, #4
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e149      	b.n	80068be <UART_SetConfig+0x346>
 800662a:	2308      	movs	r3, #8
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e146      	b.n	80068be <UART_SetConfig+0x346>
 8006630:	2310      	movs	r3, #16
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e143      	b.n	80068be <UART_SetConfig+0x346>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a84      	ldr	r2, [pc, #528]	; (800684c <UART_SetConfig+0x2d4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d132      	bne.n	80066a6 <UART_SetConfig+0x12e>
 8006640:	4b81      	ldr	r3, [pc, #516]	; (8006848 <UART_SetConfig+0x2d0>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	2b0c      	cmp	r3, #12
 800664c:	d828      	bhi.n	80066a0 <UART_SetConfig+0x128>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0xdc>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006689 	.word	0x08006689
 8006658:	080066a1 	.word	0x080066a1
 800665c:	080066a1 	.word	0x080066a1
 8006660:	080066a1 	.word	0x080066a1
 8006664:	08006695 	.word	0x08006695
 8006668:	080066a1 	.word	0x080066a1
 800666c:	080066a1 	.word	0x080066a1
 8006670:	080066a1 	.word	0x080066a1
 8006674:	0800668f 	.word	0x0800668f
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066a1 	.word	0x080066a1
 8006684:	0800669b 	.word	0x0800669b
 8006688:	2300      	movs	r3, #0
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e117      	b.n	80068be <UART_SetConfig+0x346>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e114      	b.n	80068be <UART_SetConfig+0x346>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e111      	b.n	80068be <UART_SetConfig+0x346>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e10e      	b.n	80068be <UART_SetConfig+0x346>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e10b      	b.n	80068be <UART_SetConfig+0x346>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a69      	ldr	r2, [pc, #420]	; (8006850 <UART_SetConfig+0x2d8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d120      	bne.n	80066f2 <UART_SetConfig+0x17a>
 80066b0:	4b65      	ldr	r3, [pc, #404]	; (8006848 <UART_SetConfig+0x2d0>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066ba:	2b30      	cmp	r3, #48	; 0x30
 80066bc:	d013      	beq.n	80066e6 <UART_SetConfig+0x16e>
 80066be:	2b30      	cmp	r3, #48	; 0x30
 80066c0:	d814      	bhi.n	80066ec <UART_SetConfig+0x174>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d009      	beq.n	80066da <UART_SetConfig+0x162>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d810      	bhi.n	80066ec <UART_SetConfig+0x174>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <UART_SetConfig+0x15c>
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d006      	beq.n	80066e0 <UART_SetConfig+0x168>
 80066d2:	e00b      	b.n	80066ec <UART_SetConfig+0x174>
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e0f1      	b.n	80068be <UART_SetConfig+0x346>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e0ee      	b.n	80068be <UART_SetConfig+0x346>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e0eb      	b.n	80068be <UART_SetConfig+0x346>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e0e8      	b.n	80068be <UART_SetConfig+0x346>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e0e5      	b.n	80068be <UART_SetConfig+0x346>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a57      	ldr	r2, [pc, #348]	; (8006854 <UART_SetConfig+0x2dc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d120      	bne.n	800673e <UART_SetConfig+0x1c6>
 80066fc:	4b52      	ldr	r3, [pc, #328]	; (8006848 <UART_SetConfig+0x2d0>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006706:	2bc0      	cmp	r3, #192	; 0xc0
 8006708:	d013      	beq.n	8006732 <UART_SetConfig+0x1ba>
 800670a:	2bc0      	cmp	r3, #192	; 0xc0
 800670c:	d814      	bhi.n	8006738 <UART_SetConfig+0x1c0>
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d009      	beq.n	8006726 <UART_SetConfig+0x1ae>
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d810      	bhi.n	8006738 <UART_SetConfig+0x1c0>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <UART_SetConfig+0x1a8>
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x1b4>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x1c0>
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e0cb      	b.n	80068be <UART_SetConfig+0x346>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e0c8      	b.n	80068be <UART_SetConfig+0x346>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e0c5      	b.n	80068be <UART_SetConfig+0x346>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e0c2      	b.n	80068be <UART_SetConfig+0x346>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e0bf      	b.n	80068be <UART_SetConfig+0x346>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a45      	ldr	r2, [pc, #276]	; (8006858 <UART_SetConfig+0x2e0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d125      	bne.n	8006794 <UART_SetConfig+0x21c>
 8006748:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <UART_SetConfig+0x2d0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006756:	d017      	beq.n	8006788 <UART_SetConfig+0x210>
 8006758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800675c:	d817      	bhi.n	800678e <UART_SetConfig+0x216>
 800675e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006762:	d00b      	beq.n	800677c <UART_SetConfig+0x204>
 8006764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006768:	d811      	bhi.n	800678e <UART_SetConfig+0x216>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <UART_SetConfig+0x1fe>
 800676e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006772:	d006      	beq.n	8006782 <UART_SetConfig+0x20a>
 8006774:	e00b      	b.n	800678e <UART_SetConfig+0x216>
 8006776:	2300      	movs	r3, #0
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e0a0      	b.n	80068be <UART_SetConfig+0x346>
 800677c:	2302      	movs	r3, #2
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e09d      	b.n	80068be <UART_SetConfig+0x346>
 8006782:	2304      	movs	r3, #4
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e09a      	b.n	80068be <UART_SetConfig+0x346>
 8006788:	2308      	movs	r3, #8
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e097      	b.n	80068be <UART_SetConfig+0x346>
 800678e:	2310      	movs	r3, #16
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e094      	b.n	80068be <UART_SetConfig+0x346>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a30      	ldr	r2, [pc, #192]	; (800685c <UART_SetConfig+0x2e4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d125      	bne.n	80067ea <UART_SetConfig+0x272>
 800679e:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <UART_SetConfig+0x2d0>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ac:	d017      	beq.n	80067de <UART_SetConfig+0x266>
 80067ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067b2:	d817      	bhi.n	80067e4 <UART_SetConfig+0x26c>
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b8:	d00b      	beq.n	80067d2 <UART_SetConfig+0x25a>
 80067ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067be:	d811      	bhi.n	80067e4 <UART_SetConfig+0x26c>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <UART_SetConfig+0x254>
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c8:	d006      	beq.n	80067d8 <UART_SetConfig+0x260>
 80067ca:	e00b      	b.n	80067e4 <UART_SetConfig+0x26c>
 80067cc:	2301      	movs	r3, #1
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e075      	b.n	80068be <UART_SetConfig+0x346>
 80067d2:	2302      	movs	r3, #2
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e072      	b.n	80068be <UART_SetConfig+0x346>
 80067d8:	2304      	movs	r3, #4
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e06f      	b.n	80068be <UART_SetConfig+0x346>
 80067de:	2308      	movs	r3, #8
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e06c      	b.n	80068be <UART_SetConfig+0x346>
 80067e4:	2310      	movs	r3, #16
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e069      	b.n	80068be <UART_SetConfig+0x346>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <UART_SetConfig+0x2e8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d137      	bne.n	8006864 <UART_SetConfig+0x2ec>
 80067f4:	4b14      	ldr	r3, [pc, #80]	; (8006848 <UART_SetConfig+0x2d0>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006802:	d017      	beq.n	8006834 <UART_SetConfig+0x2bc>
 8006804:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006808:	d817      	bhi.n	800683a <UART_SetConfig+0x2c2>
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680e:	d00b      	beq.n	8006828 <UART_SetConfig+0x2b0>
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d811      	bhi.n	800683a <UART_SetConfig+0x2c2>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <UART_SetConfig+0x2aa>
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d006      	beq.n	800682e <UART_SetConfig+0x2b6>
 8006820:	e00b      	b.n	800683a <UART_SetConfig+0x2c2>
 8006822:	2300      	movs	r3, #0
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e04a      	b.n	80068be <UART_SetConfig+0x346>
 8006828:	2302      	movs	r3, #2
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e047      	b.n	80068be <UART_SetConfig+0x346>
 800682e:	2304      	movs	r3, #4
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e044      	b.n	80068be <UART_SetConfig+0x346>
 8006834:	2308      	movs	r3, #8
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e041      	b.n	80068be <UART_SetConfig+0x346>
 800683a:	2310      	movs	r3, #16
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e03e      	b.n	80068be <UART_SetConfig+0x346>
 8006840:	efff69f3 	.word	0xefff69f3
 8006844:	40011000 	.word	0x40011000
 8006848:	40023800 	.word	0x40023800
 800684c:	40004400 	.word	0x40004400
 8006850:	40004800 	.word	0x40004800
 8006854:	40004c00 	.word	0x40004c00
 8006858:	40005000 	.word	0x40005000
 800685c:	40011400 	.word	0x40011400
 8006860:	40007800 	.word	0x40007800
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <UART_SetConfig+0x4b8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d125      	bne.n	80068ba <UART_SetConfig+0x342>
 800686e:	4b71      	ldr	r3, [pc, #452]	; (8006a34 <UART_SetConfig+0x4bc>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006878:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800687c:	d017      	beq.n	80068ae <UART_SetConfig+0x336>
 800687e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006882:	d817      	bhi.n	80068b4 <UART_SetConfig+0x33c>
 8006884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006888:	d00b      	beq.n	80068a2 <UART_SetConfig+0x32a>
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d811      	bhi.n	80068b4 <UART_SetConfig+0x33c>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <UART_SetConfig+0x324>
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	d006      	beq.n	80068a8 <UART_SetConfig+0x330>
 800689a:	e00b      	b.n	80068b4 <UART_SetConfig+0x33c>
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e00d      	b.n	80068be <UART_SetConfig+0x346>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e00a      	b.n	80068be <UART_SetConfig+0x346>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e007      	b.n	80068be <UART_SetConfig+0x346>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e004      	b.n	80068be <UART_SetConfig+0x346>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	e001      	b.n	80068be <UART_SetConfig+0x346>
 80068ba:	2310      	movs	r3, #16
 80068bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d15a      	bne.n	800697e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80068c8:	7ffb      	ldrb	r3, [r7, #31]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d827      	bhi.n	800691e <UART_SetConfig+0x3a6>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <UART_SetConfig+0x35c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080068f9 	.word	0x080068f9
 80068d8:	08006901 	.word	0x08006901
 80068dc:	08006909 	.word	0x08006909
 80068e0:	0800691f 	.word	0x0800691f
 80068e4:	0800690f 	.word	0x0800690f
 80068e8:	0800691f 	.word	0x0800691f
 80068ec:	0800691f 	.word	0x0800691f
 80068f0:	0800691f 	.word	0x0800691f
 80068f4:	08006917 	.word	0x08006917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068f8:	f7fd fdb2 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80068fc:	61b8      	str	r0, [r7, #24]
        break;
 80068fe:	e013      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006900:	f7fd fdc2 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 8006904:	61b8      	str	r0, [r7, #24]
        break;
 8006906:	e00f      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <UART_SetConfig+0x4c0>)
 800690a:	61bb      	str	r3, [r7, #24]
        break;
 800690c:	e00c      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800690e:	f7fd fcb9 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8006912:	61b8      	str	r0, [r7, #24]
        break;
 8006914:	e008      	b.n	8006928 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e004      	b.n	8006928 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	77bb      	strb	r3, [r7, #30]
        break;
 8006926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d074      	beq.n	8006a18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	005a      	lsls	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d916      	bls.n	8006978 <UART_SetConfig+0x400>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006950:	d212      	bcs.n	8006978 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f023 030f 	bic.w	r3, r3, #15
 800695a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	b29b      	uxth	r3, r3
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	b29a      	uxth	r2, r3
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	4313      	orrs	r3, r2
 800696c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	89fa      	ldrh	r2, [r7, #14]
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	e04f      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	77bb      	strb	r3, [r7, #30]
 800697c:	e04c      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d828      	bhi.n	80069d6 <UART_SetConfig+0x45e>
 8006984:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x414>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fd fd56 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80069b4:	61b8      	str	r0, [r7, #24]
        break;
 80069b6:	e013      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7fd fd66 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 80069bc:	61b8      	str	r0, [r7, #24]
        break;
 80069be:	e00f      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <UART_SetConfig+0x4c0>)
 80069c2:	61bb      	str	r3, [r7, #24]
        break;
 80069c4:	e00c      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fd fc5d 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 80069ca:	61b8      	str	r0, [r7, #24]
        break;
 80069cc:	e008      	b.n	80069e0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	61bb      	str	r3, [r7, #24]
        break;
 80069d4:	e004      	b.n	80069e0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	77bb      	strb	r3, [r7, #30]
        break;
 80069de:	bf00      	nop
    }

    if (pclk != 0U)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	085a      	lsrs	r2, r3, #1
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	441a      	add	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b0f      	cmp	r3, #15
 80069fe:	d909      	bls.n	8006a14 <UART_SetConfig+0x49c>
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d205      	bcs.n	8006a14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	e001      	b.n	8006a18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40007c00 	.word	0x40007c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	00f42400 	.word	0x00f42400

08006a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01a      	beq.n	8006b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3a:	d10a      	bne.n	8006b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]
  }
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b90:	f7fb fd6c 	bl	800266c <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d10e      	bne.n	8006bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f817 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e00d      	b.n	8006bde <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b09c      	sub	sp, #112	; 0x70
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf6:	e0a5      	b.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	f000 80a1 	beq.w	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c02:	f7fb fd33 	bl	800266c <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d302      	bcc.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d13e      	bne.n	8006c96 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	663b      	str	r3, [r7, #96]	; 0x60
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e067      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d04f      	beq.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb2:	d147      	bne.n	8006d44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	e853 3f00 	ldrex	r3, [r3]
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ce4:	e841 2300 	strex	r3, r2, [r1]
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1e6      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d10:	623a      	str	r2, [r7, #32]
 8006d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e5      	bne.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e010      	b.n	8006d66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	f43f af4a 	beq.w	8006bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3770      	adds	r7, #112	; 0x70
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b097      	sub	sp, #92	; 0x5c
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da2:	d10e      	bne.n	8006dc2 <UART_Start_Receive_IT+0x52>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <UART_Start_Receive_IT+0x48>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006db2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006db6:	e02d      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	22ff      	movs	r2, #255	; 0xff
 8006dbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dc0:	e028      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10d      	bne.n	8006de6 <UART_Start_Receive_IT+0x76>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <UART_Start_Receive_IT+0x6c>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	22ff      	movs	r2, #255	; 0xff
 8006dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006dda:	e01b      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	227f      	movs	r2, #127	; 0x7f
 8006de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006de4:	e016      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dee:	d10d      	bne.n	8006e0c <UART_Start_Receive_IT+0x9c>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <UART_Start_Receive_IT+0x92>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	227f      	movs	r2, #127	; 0x7f
 8006dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e00:	e008      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	223f      	movs	r2, #63	; 0x3f
 8006e06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e0a:	e003      	b.n	8006e14 <UART_Start_Receive_IT+0xa4>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2222      	movs	r2, #34	; 0x22
 8006e20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3308      	adds	r3, #8
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	657b      	str	r3, [r7, #84]	; 0x54
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e42:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	d107      	bne.n	8006e70 <UART_Start_Receive_IT+0x100>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4a24      	ldr	r2, [pc, #144]	; (8006efc <UART_Start_Receive_IT+0x18c>)
 8006e6c:	665a      	str	r2, [r3, #100]	; 0x64
 8006e6e:	e002      	b.n	8006e76 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a23      	ldr	r2, [pc, #140]	; (8006f00 <UART_Start_Receive_IT+0x190>)
 8006e74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d019      	beq.n	8006eba <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e6      	bne.n	8006e86 <UART_Start_Receive_IT+0x116>
 8006eb8:	e018      	b.n	8006eec <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	653b      	str	r3, [r7, #80]	; 0x50
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ed8:	623b      	str	r3, [r7, #32]
 8006eda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e6      	bne.n	8006eba <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	375c      	adds	r7, #92	; 0x5c
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	080071a7 	.word	0x080071a7
 8006f00:	0800704b 	.word	0x0800704b

08006f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b095      	sub	sp, #84	; 0x54
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d118      	bne.n	8006fac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f023 0310 	bic.w	r3, r3, #16
 8006f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6979      	ldr	r1, [r7, #20]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e6      	bne.n	8006f7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006fbe:	bf00      	nop
 8006fc0:	3754      	adds	r7, #84	; 0x54
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff faaf 	bl	800654c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b088      	sub	sp, #32
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	60bb      	str	r3, [r7, #8]
   return(result);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6979      	ldr	r1, [r7, #20]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	613b      	str	r3, [r7, #16]
   return(result);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e6      	bne.n	8006ffe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fa7b 	bl	8006538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007042:	bf00      	nop
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b096      	sub	sp, #88	; 0x58
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007058:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007060:	2b22      	cmp	r3, #34	; 0x22
 8007062:	f040 8094 	bne.w	800718e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007070:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007074:	b2d9      	uxtb	r1, r3
 8007076:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800707a:	b2da      	uxtb	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007080:	400a      	ands	r2, r1
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d177      	bne.n	800719e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c2:	653b      	str	r3, [r7, #80]	; 0x50
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070cc:	647b      	str	r3, [r7, #68]	; 0x44
 80070ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e6      	bne.n	80070ae <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	623b      	str	r3, [r7, #32]
   return(result);
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	f023 0301 	bic.w	r3, r3, #1
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007100:	633a      	str	r2, [r7, #48]	; 0x30
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e5      	bne.n	80070e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007124:	2b01      	cmp	r3, #1
 8007126:	d12e      	bne.n	8007186 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	60fb      	str	r3, [r7, #12]
   return(result);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	64bb      	str	r3, [r7, #72]	; 0x48
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	69b9      	ldr	r1, [r7, #24]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	617b      	str	r3, [r7, #20]
   return(result);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e6      	bne.n	800712e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b10      	cmp	r3, #16
 800716c:	d103      	bne.n	8007176 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2210      	movs	r2, #16
 8007174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff f9ee 	bl	8006560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007184:	e00b      	b.n	800719e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7fa f8de 	bl	8001348 <HAL_UART_RxCpltCallback>
}
 800718c:	e007      	b.n	800719e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	619a      	str	r2, [r3, #24]
}
 800719e:	bf00      	nop
 80071a0:	3758      	adds	r7, #88	; 0x58
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b096      	sub	sp, #88	; 0x58
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071bc:	2b22      	cmp	r3, #34	; 0x22
 80071be:	f040 8094 	bne.w	80072ea <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80071d2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80071d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071da:	4013      	ands	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d177      	bne.n	80072fa <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007212:	e853 3f00 	ldrex	r3, [r3]
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800721e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007228:	643b      	str	r3, [r7, #64]	; 0x40
 800722a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800722e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007230:	e841 2300 	strex	r3, r2, [r1]
 8007234:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1e6      	bne.n	800720a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	61fb      	str	r3, [r7, #28]
   return(result);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	64bb      	str	r3, [r7, #72]	; 0x48
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e5      	bne.n	800723c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007280:	2b01      	cmp	r3, #1
 8007282:	d12e      	bne.n	80072e2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	60bb      	str	r3, [r7, #8]
   return(result);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	647b      	str	r3, [r7, #68]	; 0x44
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6979      	ldr	r1, [r7, #20]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	613b      	str	r3, [r7, #16]
   return(result);
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d103      	bne.n	80072d2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2210      	movs	r2, #16
 80072d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff f940 	bl	8006560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072e0:	e00b      	b.n	80072fa <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa f830 	bl	8001348 <HAL_UART_RxCpltCallback>
}
 80072e8:	e007      	b.n	80072fa <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0208 	orr.w	r2, r2, #8
 80072f8:	619a      	str	r2, [r3, #24]
}
 80072fa:	bf00      	nop
 80072fc:	3758      	adds	r7, #88	; 0x58
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007304:	b084      	sub	sp, #16
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	f107 001c 	add.w	r0, r7, #28
 8007312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b01      	cmp	r3, #1
 800731a:	d120      	bne.n	800735e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	4b20      	ldr	r3, [pc, #128]	; (80073b0 <USB_CoreInit+0xac>)
 800732e:	4013      	ands	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa92 	bl	800787c <USB_CoreReset>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e010      	b.n	8007380 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa86 	bl	800787c <USB_CoreReset>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	2b01      	cmp	r3, #1
 8007384:	d10b      	bne.n	800739e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f043 0206 	orr.w	r2, r3, #6
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f043 0220 	orr.w	r2, r3, #32
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073aa:	b004      	add	sp, #16
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	ffbdffbf 	.word	0xffbdffbf

080073b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f023 0201 	bic.w	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d115      	bne.n	8007424 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007404:	2001      	movs	r0, #1
 8007406:	f7fb f93d 	bl	8002684 <HAL_Delay>
      ms++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa25 	bl	8007860 <USB_GetMode>
 8007416:	4603      	mov	r3, r0
 8007418:	2b01      	cmp	r3, #1
 800741a:	d01e      	beq.n	800745a <USB_SetCurrentMode+0x84>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b31      	cmp	r3, #49	; 0x31
 8007420:	d9f0      	bls.n	8007404 <USB_SetCurrentMode+0x2e>
 8007422:	e01a      	b.n	800745a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d115      	bne.n	8007456 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007436:	2001      	movs	r0, #1
 8007438:	f7fb f924 	bl	8002684 <HAL_Delay>
      ms++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa0c 	bl	8007860 <USB_GetMode>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <USB_SetCurrentMode+0x84>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b31      	cmp	r3, #49	; 0x31
 8007452:	d9f0      	bls.n	8007436 <USB_SetCurrentMode+0x60>
 8007454:	e001      	b.n	800745a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e005      	b.n	8007466 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b32      	cmp	r3, #50	; 0x32
 800745e:	d101      	bne.n	8007464 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e000      	b.n	8007466 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007470:	b084      	sub	sp, #16
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800747e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	e009      	b.n	80074a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3340      	adds	r3, #64	; 0x40
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	2200      	movs	r2, #0
 800749c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b0e      	cmp	r3, #14
 80074a8:	d9f2      	bls.n	8007490 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d11c      	bne.n	80074ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e005      	b.n	80074f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074fc:	461a      	mov	r2, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	4619      	mov	r1, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	461a      	mov	r2, r3
 8007512:	680b      	ldr	r3, [r1, #0]
 8007514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10c      	bne.n	8007536 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f961 	bl	80077ec <USB_SetDevSpeed>
 800752a:	e008      	b.n	800753e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f95c 	bl	80077ec <USB_SetDevSpeed>
 8007534:	e003      	b.n	800753e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007536:	2103      	movs	r1, #3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f957 	bl	80077ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800753e:	2110      	movs	r1, #16
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8f3 	bl	800772c <USB_FlushTxFifo>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f91d 	bl	8007790 <USB_FlushRxFifo>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	461a      	mov	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	e043      	b.n	8007612 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a0:	d118      	bne.n	80075d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	461a      	mov	r2, r3
 80075b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e013      	b.n	80075e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	461a      	mov	r2, r3
 80075cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e008      	b.n	80075e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	461a      	mov	r2, r3
 8007606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800760a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d3b7      	bcc.n	800758a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	e043      	b.n	80076a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007636:	d118      	bne.n	800766a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	461a      	mov	r2, r3
 800764c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	e013      	b.n	800767c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e008      	b.n	800767c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	461a      	mov	r2, r3
 8007678:	2300      	movs	r3, #0
 800767a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3301      	adds	r3, #1
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3b7      	bcc.n	8007620 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f043 0210 	orr.w	r2, r3, #16
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	4b0e      	ldr	r3, [pc, #56]	; (8007724 <USB_DevInit+0x2b4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d105      	bne.n	8007714 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <USB_DevInit+0x2b8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007720:	b004      	add	sp, #16
 8007722:	4770      	bx	lr
 8007724:	803c3800 	.word	0x803c3800
 8007728:	40000004 	.word	0x40000004

0800772c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	4a12      	ldr	r2, [pc, #72]	; (800778c <USB_FlushTxFifo+0x60>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d901      	bls.n	800774a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e01a      	b.n	8007780 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	daf3      	bge.n	800773a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	019b      	lsls	r3, r3, #6
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	4a08      	ldr	r2, [pc, #32]	; (800778c <USB_FlushTxFifo+0x60>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e006      	b.n	8007780 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d0f1      	beq.n	8007762 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	00030d40 	.word	0x00030d40

08007790 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3301      	adds	r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <USB_FlushRxFifo+0x58>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d901      	bls.n	80077ac <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e017      	b.n	80077dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	daf3      	bge.n	800779c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2210      	movs	r2, #16
 80077bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	4a08      	ldr	r2, [pc, #32]	; (80077e8 <USB_FlushRxFifo+0x58>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d901      	bls.n	80077ce <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e006      	b.n	80077dc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d0f1      	beq.n	80077be <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	00030d40 	.word	0x00030d40

080077ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4313      	orrs	r3, r2
 800780e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	f003 0301 	and.w	r3, r3, #1
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	4a13      	ldr	r2, [pc, #76]	; (80078dc <USB_CoreReset+0x60>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d901      	bls.n	8007898 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e01a      	b.n	80078ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	daf3      	bge.n	8007888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f043 0201 	orr.w	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3301      	adds	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <USB_CoreReset+0x60>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e006      	b.n	80078ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d0f1      	beq.n	80078b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	00030d40 	.word	0x00030d40

080078e0 <__errno>:
 80078e0:	4b01      	ldr	r3, [pc, #4]	; (80078e8 <__errno+0x8>)
 80078e2:	6818      	ldr	r0, [r3, #0]
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000010 	.word	0x20000010

080078ec <__libc_init_array>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	4d0d      	ldr	r5, [pc, #52]	; (8007924 <__libc_init_array+0x38>)
 80078f0:	4c0d      	ldr	r4, [pc, #52]	; (8007928 <__libc_init_array+0x3c>)
 80078f2:	1b64      	subs	r4, r4, r5
 80078f4:	10a4      	asrs	r4, r4, #2
 80078f6:	2600      	movs	r6, #0
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	d109      	bne.n	8007910 <__libc_init_array+0x24>
 80078fc:	4d0b      	ldr	r5, [pc, #44]	; (800792c <__libc_init_array+0x40>)
 80078fe:	4c0c      	ldr	r4, [pc, #48]	; (8007930 <__libc_init_array+0x44>)
 8007900:	f002 feb4 	bl	800a66c <_init>
 8007904:	1b64      	subs	r4, r4, r5
 8007906:	10a4      	asrs	r4, r4, #2
 8007908:	2600      	movs	r6, #0
 800790a:	42a6      	cmp	r6, r4
 800790c:	d105      	bne.n	800791a <__libc_init_array+0x2e>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	f855 3b04 	ldr.w	r3, [r5], #4
 8007914:	4798      	blx	r3
 8007916:	3601      	adds	r6, #1
 8007918:	e7ee      	b.n	80078f8 <__libc_init_array+0xc>
 800791a:	f855 3b04 	ldr.w	r3, [r5], #4
 800791e:	4798      	blx	r3
 8007920:	3601      	adds	r6, #1
 8007922:	e7f2      	b.n	800790a <__libc_init_array+0x1e>
 8007924:	0800aaac 	.word	0x0800aaac
 8007928:	0800aaac 	.word	0x0800aaac
 800792c:	0800aaac 	.word	0x0800aaac
 8007930:	0800aab0 	.word	0x0800aab0

08007934 <memset>:
 8007934:	4402      	add	r2, r0
 8007936:	4603      	mov	r3, r0
 8007938:	4293      	cmp	r3, r2
 800793a:	d100      	bne.n	800793e <memset+0xa>
 800793c:	4770      	bx	lr
 800793e:	f803 1b01 	strb.w	r1, [r3], #1
 8007942:	e7f9      	b.n	8007938 <memset+0x4>

08007944 <__cvt>:
 8007944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	ec55 4b10 	vmov	r4, r5, d0
 800794c:	2d00      	cmp	r5, #0
 800794e:	460e      	mov	r6, r1
 8007950:	4619      	mov	r1, r3
 8007952:	462b      	mov	r3, r5
 8007954:	bfbb      	ittet	lt
 8007956:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800795a:	461d      	movlt	r5, r3
 800795c:	2300      	movge	r3, #0
 800795e:	232d      	movlt	r3, #45	; 0x2d
 8007960:	700b      	strb	r3, [r1, #0]
 8007962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007968:	4691      	mov	r9, r2
 800796a:	f023 0820 	bic.w	r8, r3, #32
 800796e:	bfbc      	itt	lt
 8007970:	4622      	movlt	r2, r4
 8007972:	4614      	movlt	r4, r2
 8007974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007978:	d005      	beq.n	8007986 <__cvt+0x42>
 800797a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800797e:	d100      	bne.n	8007982 <__cvt+0x3e>
 8007980:	3601      	adds	r6, #1
 8007982:	2102      	movs	r1, #2
 8007984:	e000      	b.n	8007988 <__cvt+0x44>
 8007986:	2103      	movs	r1, #3
 8007988:	ab03      	add	r3, sp, #12
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	ab02      	add	r3, sp, #8
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	ec45 4b10 	vmov	d0, r4, r5
 8007994:	4653      	mov	r3, sl
 8007996:	4632      	mov	r2, r6
 8007998:	f000 fcea 	bl	8008370 <_dtoa_r>
 800799c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079a0:	4607      	mov	r7, r0
 80079a2:	d102      	bne.n	80079aa <__cvt+0x66>
 80079a4:	f019 0f01 	tst.w	r9, #1
 80079a8:	d022      	beq.n	80079f0 <__cvt+0xac>
 80079aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079ae:	eb07 0906 	add.w	r9, r7, r6
 80079b2:	d110      	bne.n	80079d6 <__cvt+0x92>
 80079b4:	783b      	ldrb	r3, [r7, #0]
 80079b6:	2b30      	cmp	r3, #48	; 0x30
 80079b8:	d10a      	bne.n	80079d0 <__cvt+0x8c>
 80079ba:	2200      	movs	r2, #0
 80079bc:	2300      	movs	r3, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f9 f8a1 	bl	8000b08 <__aeabi_dcmpeq>
 80079c6:	b918      	cbnz	r0, 80079d0 <__cvt+0x8c>
 80079c8:	f1c6 0601 	rsb	r6, r6, #1
 80079cc:	f8ca 6000 	str.w	r6, [sl]
 80079d0:	f8da 3000 	ldr.w	r3, [sl]
 80079d4:	4499      	add	r9, r3
 80079d6:	2200      	movs	r2, #0
 80079d8:	2300      	movs	r3, #0
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	f7f9 f893 	bl	8000b08 <__aeabi_dcmpeq>
 80079e2:	b108      	cbz	r0, 80079e8 <__cvt+0xa4>
 80079e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80079e8:	2230      	movs	r2, #48	; 0x30
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	454b      	cmp	r3, r9
 80079ee:	d307      	bcc.n	8007a00 <__cvt+0xbc>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079f4:	1bdb      	subs	r3, r3, r7
 80079f6:	4638      	mov	r0, r7
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	b004      	add	sp, #16
 80079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a00:	1c59      	adds	r1, r3, #1
 8007a02:	9103      	str	r1, [sp, #12]
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e7f0      	b.n	80079ea <__cvt+0xa6>

08007a08 <__exponent>:
 8007a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	bfb8      	it	lt
 8007a10:	4249      	neglt	r1, r1
 8007a12:	f803 2b02 	strb.w	r2, [r3], #2
 8007a16:	bfb4      	ite	lt
 8007a18:	222d      	movlt	r2, #45	; 0x2d
 8007a1a:	222b      	movge	r2, #43	; 0x2b
 8007a1c:	2909      	cmp	r1, #9
 8007a1e:	7042      	strb	r2, [r0, #1]
 8007a20:	dd2a      	ble.n	8007a78 <__exponent+0x70>
 8007a22:	f10d 0407 	add.w	r4, sp, #7
 8007a26:	46a4      	mov	ip, r4
 8007a28:	270a      	movs	r7, #10
 8007a2a:	46a6      	mov	lr, r4
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a32:	fb07 1516 	mls	r5, r7, r6, r1
 8007a36:	3530      	adds	r5, #48	; 0x30
 8007a38:	2a63      	cmp	r2, #99	; 0x63
 8007a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a42:	4631      	mov	r1, r6
 8007a44:	dcf1      	bgt.n	8007a2a <__exponent+0x22>
 8007a46:	3130      	adds	r1, #48	; 0x30
 8007a48:	f1ae 0502 	sub.w	r5, lr, #2
 8007a4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a50:	1c44      	adds	r4, r0, #1
 8007a52:	4629      	mov	r1, r5
 8007a54:	4561      	cmp	r1, ip
 8007a56:	d30a      	bcc.n	8007a6e <__exponent+0x66>
 8007a58:	f10d 0209 	add.w	r2, sp, #9
 8007a5c:	eba2 020e 	sub.w	r2, r2, lr
 8007a60:	4565      	cmp	r5, ip
 8007a62:	bf88      	it	hi
 8007a64:	2200      	movhi	r2, #0
 8007a66:	4413      	add	r3, r2
 8007a68:	1a18      	subs	r0, r3, r0
 8007a6a:	b003      	add	sp, #12
 8007a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a76:	e7ed      	b.n	8007a54 <__exponent+0x4c>
 8007a78:	2330      	movs	r3, #48	; 0x30
 8007a7a:	3130      	adds	r1, #48	; 0x30
 8007a7c:	7083      	strb	r3, [r0, #2]
 8007a7e:	70c1      	strb	r1, [r0, #3]
 8007a80:	1d03      	adds	r3, r0, #4
 8007a82:	e7f1      	b.n	8007a68 <__exponent+0x60>

08007a84 <_printf_float>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	ed2d 8b02 	vpush	{d8}
 8007a8c:	b08d      	sub	sp, #52	; 0x34
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a94:	4616      	mov	r6, r2
 8007a96:	461f      	mov	r7, r3
 8007a98:	4605      	mov	r5, r0
 8007a9a:	f001 fa55 	bl	8008f48 <_localeconv_r>
 8007a9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	f7f8 fbb4 	bl	8000210 <strlen>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	9305      	str	r3, [sp, #20]
 8007ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	f103 0208 	add.w	r2, r3, #8
 8007ac2:	f8c8 2000 	str.w	r2, [r8]
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ace:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ad2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ad6:	9307      	str	r3, [sp, #28]
 8007ad8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007adc:	ee08 0a10 	vmov	s16, r0
 8007ae0:	4b9f      	ldr	r3, [pc, #636]	; (8007d60 <_printf_float+0x2dc>)
 8007ae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	f7f9 f83f 	bl	8000b6c <__aeabi_dcmpun>
 8007aee:	bb88      	cbnz	r0, 8007b54 <_printf_float+0xd0>
 8007af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007af4:	4b9a      	ldr	r3, [pc, #616]	; (8007d60 <_printf_float+0x2dc>)
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	f7f9 f819 	bl	8000b30 <__aeabi_dcmple>
 8007afe:	bb48      	cbnz	r0, 8007b54 <_printf_float+0xd0>
 8007b00:	2200      	movs	r2, #0
 8007b02:	2300      	movs	r3, #0
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f9 f808 	bl	8000b1c <__aeabi_dcmplt>
 8007b0c:	b110      	cbz	r0, 8007b14 <_printf_float+0x90>
 8007b0e:	232d      	movs	r3, #45	; 0x2d
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	4b93      	ldr	r3, [pc, #588]	; (8007d64 <_printf_float+0x2e0>)
 8007b16:	4894      	ldr	r0, [pc, #592]	; (8007d68 <_printf_float+0x2e4>)
 8007b18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b1c:	bf94      	ite	ls
 8007b1e:	4698      	movls	r8, r3
 8007b20:	4680      	movhi	r8, r0
 8007b22:	2303      	movs	r3, #3
 8007b24:	6123      	str	r3, [r4, #16]
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	f023 0204 	bic.w	r2, r3, #4
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	f04f 0900 	mov.w	r9, #0
 8007b32:	9700      	str	r7, [sp, #0]
 8007b34:	4633      	mov	r3, r6
 8007b36:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b38:	4621      	mov	r1, r4
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f000 f9d8 	bl	8007ef0 <_printf_common>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f040 8090 	bne.w	8007c66 <_printf_float+0x1e2>
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4a:	b00d      	add	sp, #52	; 0x34
 8007b4c:	ecbd 8b02 	vpop	{d8}
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	4642      	mov	r2, r8
 8007b56:	464b      	mov	r3, r9
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f9 f806 	bl	8000b6c <__aeabi_dcmpun>
 8007b60:	b140      	cbz	r0, 8007b74 <_printf_float+0xf0>
 8007b62:	464b      	mov	r3, r9
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbc      	itt	lt
 8007b68:	232d      	movlt	r3, #45	; 0x2d
 8007b6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b6e:	487f      	ldr	r0, [pc, #508]	; (8007d6c <_printf_float+0x2e8>)
 8007b70:	4b7f      	ldr	r3, [pc, #508]	; (8007d70 <_printf_float+0x2ec>)
 8007b72:	e7d1      	b.n	8007b18 <_printf_float+0x94>
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b7a:	9206      	str	r2, [sp, #24]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	d13f      	bne.n	8007c00 <_printf_float+0x17c>
 8007b80:	2306      	movs	r3, #6
 8007b82:	6063      	str	r3, [r4, #4]
 8007b84:	9b05      	ldr	r3, [sp, #20]
 8007b86:	6861      	ldr	r1, [r4, #4]
 8007b88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	ab0a      	add	r3, sp, #40	; 0x28
 8007b92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b96:	ab09      	add	r3, sp, #36	; 0x24
 8007b98:	ec49 8b10 	vmov	d0, r8, r9
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	6022      	str	r2, [r4, #0]
 8007ba0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f7ff fecd 	bl	8007944 <__cvt>
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bae:	2b47      	cmp	r3, #71	; 0x47
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	d108      	bne.n	8007bc6 <_printf_float+0x142>
 8007bb4:	1cc8      	adds	r0, r1, #3
 8007bb6:	db02      	blt.n	8007bbe <_printf_float+0x13a>
 8007bb8:	6863      	ldr	r3, [r4, #4]
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	dd41      	ble.n	8007c42 <_printf_float+0x1be>
 8007bbe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007bc2:	fa5f fb8b 	uxtb.w	fp, fp
 8007bc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bca:	d820      	bhi.n	8007c0e <_printf_float+0x18a>
 8007bcc:	3901      	subs	r1, #1
 8007bce:	465a      	mov	r2, fp
 8007bd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bd4:	9109      	str	r1, [sp, #36]	; 0x24
 8007bd6:	f7ff ff17 	bl	8007a08 <__exponent>
 8007bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bdc:	1813      	adds	r3, r2, r0
 8007bde:	2a01      	cmp	r2, #1
 8007be0:	4681      	mov	r9, r0
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	dc02      	bgt.n	8007bec <_printf_float+0x168>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	07d2      	lsls	r2, r2, #31
 8007bea:	d501      	bpl.n	8007bf0 <_printf_float+0x16c>
 8007bec:	3301      	adds	r3, #1
 8007bee:	6123      	str	r3, [r4, #16]
 8007bf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d09c      	beq.n	8007b32 <_printf_float+0xae>
 8007bf8:	232d      	movs	r3, #45	; 0x2d
 8007bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bfe:	e798      	b.n	8007b32 <_printf_float+0xae>
 8007c00:	9a06      	ldr	r2, [sp, #24]
 8007c02:	2a47      	cmp	r2, #71	; 0x47
 8007c04:	d1be      	bne.n	8007b84 <_printf_float+0x100>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1bc      	bne.n	8007b84 <_printf_float+0x100>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e7b9      	b.n	8007b82 <_printf_float+0xfe>
 8007c0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c12:	d118      	bne.n	8007c46 <_printf_float+0x1c2>
 8007c14:	2900      	cmp	r1, #0
 8007c16:	6863      	ldr	r3, [r4, #4]
 8007c18:	dd0b      	ble.n	8007c32 <_printf_float+0x1ae>
 8007c1a:	6121      	str	r1, [r4, #16]
 8007c1c:	b913      	cbnz	r3, 8007c24 <_printf_float+0x1a0>
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	07d0      	lsls	r0, r2, #31
 8007c22:	d502      	bpl.n	8007c2a <_printf_float+0x1a6>
 8007c24:	3301      	adds	r3, #1
 8007c26:	440b      	add	r3, r1
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c2c:	f04f 0900 	mov.w	r9, #0
 8007c30:	e7de      	b.n	8007bf0 <_printf_float+0x16c>
 8007c32:	b913      	cbnz	r3, 8007c3a <_printf_float+0x1b6>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	07d2      	lsls	r2, r2, #31
 8007c38:	d501      	bpl.n	8007c3e <_printf_float+0x1ba>
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	e7f4      	b.n	8007c28 <_printf_float+0x1a4>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e7f2      	b.n	8007c28 <_printf_float+0x1a4>
 8007c42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c48:	4299      	cmp	r1, r3
 8007c4a:	db05      	blt.n	8007c58 <_printf_float+0x1d4>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	6121      	str	r1, [r4, #16]
 8007c50:	07d8      	lsls	r0, r3, #31
 8007c52:	d5ea      	bpl.n	8007c2a <_printf_float+0x1a6>
 8007c54:	1c4b      	adds	r3, r1, #1
 8007c56:	e7e7      	b.n	8007c28 <_printf_float+0x1a4>
 8007c58:	2900      	cmp	r1, #0
 8007c5a:	bfd4      	ite	le
 8007c5c:	f1c1 0202 	rsble	r2, r1, #2
 8007c60:	2201      	movgt	r2, #1
 8007c62:	4413      	add	r3, r2
 8007c64:	e7e0      	b.n	8007c28 <_printf_float+0x1a4>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	055a      	lsls	r2, r3, #21
 8007c6a:	d407      	bmi.n	8007c7c <_printf_float+0x1f8>
 8007c6c:	6923      	ldr	r3, [r4, #16]
 8007c6e:	4642      	mov	r2, r8
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	d12c      	bne.n	8007cd4 <_printf_float+0x250>
 8007c7a:	e764      	b.n	8007b46 <_printf_float+0xc2>
 8007c7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c80:	f240 80e0 	bls.w	8007e44 <_printf_float+0x3c0>
 8007c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f7f8 ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d034      	beq.n	8007cfe <_printf_float+0x27a>
 8007c94:	4a37      	ldr	r2, [pc, #220]	; (8007d74 <_printf_float+0x2f0>)
 8007c96:	2301      	movs	r3, #1
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f af51 	beq.w	8007b46 <_printf_float+0xc2>
 8007ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	db02      	blt.n	8007cb2 <_printf_float+0x22e>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	07d8      	lsls	r0, r3, #31
 8007cb0:	d510      	bpl.n	8007cd4 <_printf_float+0x250>
 8007cb2:	ee18 3a10 	vmov	r3, s16
 8007cb6:	4652      	mov	r2, sl
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af41 	beq.w	8007b46 <_printf_float+0xc2>
 8007cc4:	f04f 0800 	mov.w	r8, #0
 8007cc8:	f104 091a 	add.w	r9, r4, #26
 8007ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	dc09      	bgt.n	8007ce8 <_printf_float+0x264>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	079b      	lsls	r3, r3, #30
 8007cd8:	f100 8105 	bmi.w	8007ee6 <_printf_float+0x462>
 8007cdc:	68e0      	ldr	r0, [r4, #12]
 8007cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce0:	4298      	cmp	r0, r3
 8007ce2:	bfb8      	it	lt
 8007ce4:	4618      	movlt	r0, r3
 8007ce6:	e730      	b.n	8007b4a <_printf_float+0xc6>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	464a      	mov	r2, r9
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af27 	beq.w	8007b46 <_printf_float+0xc2>
 8007cf8:	f108 0801 	add.w	r8, r8, #1
 8007cfc:	e7e6      	b.n	8007ccc <_printf_float+0x248>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc39      	bgt.n	8007d78 <_printf_float+0x2f4>
 8007d04:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <_printf_float+0x2f0>)
 8007d06:	2301      	movs	r3, #1
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af19 	beq.w	8007b46 <_printf_float+0xc2>
 8007d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	d102      	bne.n	8007d22 <_printf_float+0x29e>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	07d9      	lsls	r1, r3, #31
 8007d20:	d5d8      	bpl.n	8007cd4 <_printf_float+0x250>
 8007d22:	ee18 3a10 	vmov	r3, s16
 8007d26:	4652      	mov	r2, sl
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f af09 	beq.w	8007b46 <_printf_float+0xc2>
 8007d34:	f04f 0900 	mov.w	r9, #0
 8007d38:	f104 0a1a 	add.w	sl, r4, #26
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	425b      	negs	r3, r3
 8007d40:	454b      	cmp	r3, r9
 8007d42:	dc01      	bgt.n	8007d48 <_printf_float+0x2c4>
 8007d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d46:	e792      	b.n	8007c6e <_printf_float+0x1ea>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f aef7 	beq.w	8007b46 <_printf_float+0xc2>
 8007d58:	f109 0901 	add.w	r9, r9, #1
 8007d5c:	e7ee      	b.n	8007d3c <_printf_float+0x2b8>
 8007d5e:	bf00      	nop
 8007d60:	7fefffff 	.word	0x7fefffff
 8007d64:	0800a6c8 	.word	0x0800a6c8
 8007d68:	0800a6cc 	.word	0x0800a6cc
 8007d6c:	0800a6d4 	.word	0x0800a6d4
 8007d70:	0800a6d0 	.word	0x0800a6d0
 8007d74:	0800a6d8 	.word	0x0800a6d8
 8007d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	bfa8      	it	ge
 8007d80:	461a      	movge	r2, r3
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	4691      	mov	r9, r2
 8007d86:	dc37      	bgt.n	8007df8 <_printf_float+0x374>
 8007d88:	f04f 0b00 	mov.w	fp, #0
 8007d8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d90:	f104 021a 	add.w	r2, r4, #26
 8007d94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	eba3 0309 	sub.w	r3, r3, r9
 8007d9c:	455b      	cmp	r3, fp
 8007d9e:	dc33      	bgt.n	8007e08 <_printf_float+0x384>
 8007da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db3b      	blt.n	8007e20 <_printf_float+0x39c>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	07da      	lsls	r2, r3, #31
 8007dac:	d438      	bmi.n	8007e20 <_printf_float+0x39c>
 8007dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db0:	9b05      	ldr	r3, [sp, #20]
 8007db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	eba2 0901 	sub.w	r9, r2, r1
 8007dba:	4599      	cmp	r9, r3
 8007dbc:	bfa8      	it	ge
 8007dbe:	4699      	movge	r9, r3
 8007dc0:	f1b9 0f00 	cmp.w	r9, #0
 8007dc4:	dc35      	bgt.n	8007e32 <_printf_float+0x3ae>
 8007dc6:	f04f 0800 	mov.w	r8, #0
 8007dca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dce:	f104 0a1a 	add.w	sl, r4, #26
 8007dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	eba3 0309 	sub.w	r3, r3, r9
 8007ddc:	4543      	cmp	r3, r8
 8007dde:	f77f af79 	ble.w	8007cd4 <_printf_float+0x250>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4652      	mov	r2, sl
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	f43f aeaa 	beq.w	8007b46 <_printf_float+0xc2>
 8007df2:	f108 0801 	add.w	r8, r8, #1
 8007df6:	e7ec      	b.n	8007dd2 <_printf_float+0x34e>
 8007df8:	4613      	mov	r3, r2
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	d1c0      	bne.n	8007d88 <_printf_float+0x304>
 8007e06:	e69e      	b.n	8007b46 <_printf_float+0xc2>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	9205      	str	r2, [sp, #20]
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f ae97 	beq.w	8007b46 <_printf_float+0xc2>
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	f10b 0b01 	add.w	fp, fp, #1
 8007e1e:	e7b9      	b.n	8007d94 <_printf_float+0x310>
 8007e20:	ee18 3a10 	vmov	r3, s16
 8007e24:	4652      	mov	r2, sl
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d1be      	bne.n	8007dae <_printf_float+0x32a>
 8007e30:	e689      	b.n	8007b46 <_printf_float+0xc2>
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	464b      	mov	r3, r9
 8007e36:	4442      	add	r2, r8
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d1c1      	bne.n	8007dc6 <_printf_float+0x342>
 8007e42:	e680      	b.n	8007b46 <_printf_float+0xc2>
 8007e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e46:	2a01      	cmp	r2, #1
 8007e48:	dc01      	bgt.n	8007e4e <_printf_float+0x3ca>
 8007e4a:	07db      	lsls	r3, r3, #31
 8007e4c:	d538      	bpl.n	8007ec0 <_printf_float+0x43c>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4642      	mov	r2, r8
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f ae74 	beq.w	8007b46 <_printf_float+0xc2>
 8007e5e:	ee18 3a10 	vmov	r3, s16
 8007e62:	4652      	mov	r2, sl
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f43f ae6b 	beq.w	8007b46 <_printf_float+0xc2>
 8007e70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e74:	2200      	movs	r2, #0
 8007e76:	2300      	movs	r3, #0
 8007e78:	f7f8 fe46 	bl	8000b08 <__aeabi_dcmpeq>
 8007e7c:	b9d8      	cbnz	r0, 8007eb6 <_printf_float+0x432>
 8007e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e80:	f108 0201 	add.w	r2, r8, #1
 8007e84:	3b01      	subs	r3, #1
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b8      	blx	r7
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d10e      	bne.n	8007eae <_printf_float+0x42a>
 8007e90:	e659      	b.n	8007b46 <_printf_float+0xc2>
 8007e92:	2301      	movs	r3, #1
 8007e94:	4652      	mov	r2, sl
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f ae52 	beq.w	8007b46 <_printf_float+0xc2>
 8007ea2:	f108 0801 	add.w	r8, r8, #1
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	4543      	cmp	r3, r8
 8007eac:	dcf1      	bgt.n	8007e92 <_printf_float+0x40e>
 8007eae:	464b      	mov	r3, r9
 8007eb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007eb4:	e6dc      	b.n	8007c70 <_printf_float+0x1ec>
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	f104 0a1a 	add.w	sl, r4, #26
 8007ebe:	e7f2      	b.n	8007ea6 <_printf_float+0x422>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	e7df      	b.n	8007e86 <_printf_float+0x402>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	464a      	mov	r2, r9
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f43f ae38 	beq.w	8007b46 <_printf_float+0xc2>
 8007ed6:	f108 0801 	add.w	r8, r8, #1
 8007eda:	68e3      	ldr	r3, [r4, #12]
 8007edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ede:	1a5b      	subs	r3, r3, r1
 8007ee0:	4543      	cmp	r3, r8
 8007ee2:	dcf0      	bgt.n	8007ec6 <_printf_float+0x442>
 8007ee4:	e6fa      	b.n	8007cdc <_printf_float+0x258>
 8007ee6:	f04f 0800 	mov.w	r8, #0
 8007eea:	f104 0919 	add.w	r9, r4, #25
 8007eee:	e7f4      	b.n	8007eda <_printf_float+0x456>

08007ef0 <_printf_common>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	4616      	mov	r6, r2
 8007ef6:	4699      	mov	r9, r3
 8007ef8:	688a      	ldr	r2, [r1, #8]
 8007efa:	690b      	ldr	r3, [r1, #16]
 8007efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	bfb8      	it	lt
 8007f04:	4613      	movlt	r3, r2
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	b10a      	cbz	r2, 8007f16 <_printf_common+0x26>
 8007f12:	3301      	adds	r3, #1
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	0699      	lsls	r1, r3, #26
 8007f1a:	bf42      	ittt	mi
 8007f1c:	6833      	ldrmi	r3, [r6, #0]
 8007f1e:	3302      	addmi	r3, #2
 8007f20:	6033      	strmi	r3, [r6, #0]
 8007f22:	6825      	ldr	r5, [r4, #0]
 8007f24:	f015 0506 	ands.w	r5, r5, #6
 8007f28:	d106      	bne.n	8007f38 <_printf_common+0x48>
 8007f2a:	f104 0a19 	add.w	sl, r4, #25
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	6832      	ldr	r2, [r6, #0]
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	42ab      	cmp	r3, r5
 8007f36:	dc26      	bgt.n	8007f86 <_printf_common+0x96>
 8007f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f3c:	1e13      	subs	r3, r2, #0
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	bf18      	it	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	0692      	lsls	r2, r2, #26
 8007f46:	d42b      	bmi.n	8007fa0 <_printf_common+0xb0>
 8007f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4638      	mov	r0, r7
 8007f50:	47c0      	blx	r8
 8007f52:	3001      	adds	r0, #1
 8007f54:	d01e      	beq.n	8007f94 <_printf_common+0xa4>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	68e5      	ldr	r5, [r4, #12]
 8007f5a:	6832      	ldr	r2, [r6, #0]
 8007f5c:	f003 0306 	and.w	r3, r3, #6
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	bf08      	it	eq
 8007f64:	1aad      	subeq	r5, r5, r2
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	6922      	ldr	r2, [r4, #16]
 8007f6a:	bf0c      	ite	eq
 8007f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f70:	2500      	movne	r5, #0
 8007f72:	4293      	cmp	r3, r2
 8007f74:	bfc4      	itt	gt
 8007f76:	1a9b      	subgt	r3, r3, r2
 8007f78:	18ed      	addgt	r5, r5, r3
 8007f7a:	2600      	movs	r6, #0
 8007f7c:	341a      	adds	r4, #26
 8007f7e:	42b5      	cmp	r5, r6
 8007f80:	d11a      	bne.n	8007fb8 <_printf_common+0xc8>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e008      	b.n	8007f98 <_printf_common+0xa8>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4652      	mov	r2, sl
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	47c0      	blx	r8
 8007f90:	3001      	adds	r0, #1
 8007f92:	d103      	bne.n	8007f9c <_printf_common+0xac>
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	e7c6      	b.n	8007f2e <_printf_common+0x3e>
 8007fa0:	18e1      	adds	r1, r4, r3
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	2030      	movs	r0, #48	; 0x30
 8007fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007faa:	4422      	add	r2, r4
 8007fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	e7c7      	b.n	8007f48 <_printf_common+0x58>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	4622      	mov	r2, r4
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c0      	blx	r8
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d0e6      	beq.n	8007f94 <_printf_common+0xa4>
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	e7d9      	b.n	8007f7e <_printf_common+0x8e>
	...

08007fcc <_printf_i>:
 8007fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	4691      	mov	r9, r2
 8007fd4:	7e27      	ldrb	r7, [r4, #24]
 8007fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fd8:	2f78      	cmp	r7, #120	; 0x78
 8007fda:	4680      	mov	r8, r0
 8007fdc:	469a      	mov	sl, r3
 8007fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe2:	d807      	bhi.n	8007ff4 <_printf_i+0x28>
 8007fe4:	2f62      	cmp	r7, #98	; 0x62
 8007fe6:	d80a      	bhi.n	8007ffe <_printf_i+0x32>
 8007fe8:	2f00      	cmp	r7, #0
 8007fea:	f000 80d8 	beq.w	800819e <_printf_i+0x1d2>
 8007fee:	2f58      	cmp	r7, #88	; 0x58
 8007ff0:	f000 80a3 	beq.w	800813a <_printf_i+0x16e>
 8007ff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ffc:	e03a      	b.n	8008074 <_printf_i+0xa8>
 8007ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008002:	2b15      	cmp	r3, #21
 8008004:	d8f6      	bhi.n	8007ff4 <_printf_i+0x28>
 8008006:	a001      	add	r0, pc, #4	; (adr r0, 800800c <_printf_i+0x40>)
 8008008:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800800c:	08008065 	.word	0x08008065
 8008010:	08008079 	.word	0x08008079
 8008014:	08007ff5 	.word	0x08007ff5
 8008018:	08007ff5 	.word	0x08007ff5
 800801c:	08007ff5 	.word	0x08007ff5
 8008020:	08007ff5 	.word	0x08007ff5
 8008024:	08008079 	.word	0x08008079
 8008028:	08007ff5 	.word	0x08007ff5
 800802c:	08007ff5 	.word	0x08007ff5
 8008030:	08007ff5 	.word	0x08007ff5
 8008034:	08007ff5 	.word	0x08007ff5
 8008038:	08008185 	.word	0x08008185
 800803c:	080080a9 	.word	0x080080a9
 8008040:	08008167 	.word	0x08008167
 8008044:	08007ff5 	.word	0x08007ff5
 8008048:	08007ff5 	.word	0x08007ff5
 800804c:	080081a7 	.word	0x080081a7
 8008050:	08007ff5 	.word	0x08007ff5
 8008054:	080080a9 	.word	0x080080a9
 8008058:	08007ff5 	.word	0x08007ff5
 800805c:	08007ff5 	.word	0x08007ff5
 8008060:	0800816f 	.word	0x0800816f
 8008064:	680b      	ldr	r3, [r1, #0]
 8008066:	1d1a      	adds	r2, r3, #4
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	600a      	str	r2, [r1, #0]
 800806c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008074:	2301      	movs	r3, #1
 8008076:	e0a3      	b.n	80081c0 <_printf_i+0x1f4>
 8008078:	6825      	ldr	r5, [r4, #0]
 800807a:	6808      	ldr	r0, [r1, #0]
 800807c:	062e      	lsls	r6, r5, #24
 800807e:	f100 0304 	add.w	r3, r0, #4
 8008082:	d50a      	bpl.n	800809a <_printf_i+0xce>
 8008084:	6805      	ldr	r5, [r0, #0]
 8008086:	600b      	str	r3, [r1, #0]
 8008088:	2d00      	cmp	r5, #0
 800808a:	da03      	bge.n	8008094 <_printf_i+0xc8>
 800808c:	232d      	movs	r3, #45	; 0x2d
 800808e:	426d      	negs	r5, r5
 8008090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008094:	485e      	ldr	r0, [pc, #376]	; (8008210 <_printf_i+0x244>)
 8008096:	230a      	movs	r3, #10
 8008098:	e019      	b.n	80080ce <_printf_i+0x102>
 800809a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800809e:	6805      	ldr	r5, [r0, #0]
 80080a0:	600b      	str	r3, [r1, #0]
 80080a2:	bf18      	it	ne
 80080a4:	b22d      	sxthne	r5, r5
 80080a6:	e7ef      	b.n	8008088 <_printf_i+0xbc>
 80080a8:	680b      	ldr	r3, [r1, #0]
 80080aa:	6825      	ldr	r5, [r4, #0]
 80080ac:	1d18      	adds	r0, r3, #4
 80080ae:	6008      	str	r0, [r1, #0]
 80080b0:	0628      	lsls	r0, r5, #24
 80080b2:	d501      	bpl.n	80080b8 <_printf_i+0xec>
 80080b4:	681d      	ldr	r5, [r3, #0]
 80080b6:	e002      	b.n	80080be <_printf_i+0xf2>
 80080b8:	0669      	lsls	r1, r5, #25
 80080ba:	d5fb      	bpl.n	80080b4 <_printf_i+0xe8>
 80080bc:	881d      	ldrh	r5, [r3, #0]
 80080be:	4854      	ldr	r0, [pc, #336]	; (8008210 <_printf_i+0x244>)
 80080c0:	2f6f      	cmp	r7, #111	; 0x6f
 80080c2:	bf0c      	ite	eq
 80080c4:	2308      	moveq	r3, #8
 80080c6:	230a      	movne	r3, #10
 80080c8:	2100      	movs	r1, #0
 80080ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080ce:	6866      	ldr	r6, [r4, #4]
 80080d0:	60a6      	str	r6, [r4, #8]
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	bfa2      	ittt	ge
 80080d6:	6821      	ldrge	r1, [r4, #0]
 80080d8:	f021 0104 	bicge.w	r1, r1, #4
 80080dc:	6021      	strge	r1, [r4, #0]
 80080de:	b90d      	cbnz	r5, 80080e4 <_printf_i+0x118>
 80080e0:	2e00      	cmp	r6, #0
 80080e2:	d04d      	beq.n	8008180 <_printf_i+0x1b4>
 80080e4:	4616      	mov	r6, r2
 80080e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80080ea:	fb03 5711 	mls	r7, r3, r1, r5
 80080ee:	5dc7      	ldrb	r7, [r0, r7]
 80080f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080f4:	462f      	mov	r7, r5
 80080f6:	42bb      	cmp	r3, r7
 80080f8:	460d      	mov	r5, r1
 80080fa:	d9f4      	bls.n	80080e6 <_printf_i+0x11a>
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d10b      	bne.n	8008118 <_printf_i+0x14c>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	07df      	lsls	r7, r3, #31
 8008104:	d508      	bpl.n	8008118 <_printf_i+0x14c>
 8008106:	6923      	ldr	r3, [r4, #16]
 8008108:	6861      	ldr	r1, [r4, #4]
 800810a:	4299      	cmp	r1, r3
 800810c:	bfde      	ittt	le
 800810e:	2330      	movle	r3, #48	; 0x30
 8008110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008118:	1b92      	subs	r2, r2, r6
 800811a:	6122      	str	r2, [r4, #16]
 800811c:	f8cd a000 	str.w	sl, [sp]
 8008120:	464b      	mov	r3, r9
 8008122:	aa03      	add	r2, sp, #12
 8008124:	4621      	mov	r1, r4
 8008126:	4640      	mov	r0, r8
 8008128:	f7ff fee2 	bl	8007ef0 <_printf_common>
 800812c:	3001      	adds	r0, #1
 800812e:	d14c      	bne.n	80081ca <_printf_i+0x1fe>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	b004      	add	sp, #16
 8008136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813a:	4835      	ldr	r0, [pc, #212]	; (8008210 <_printf_i+0x244>)
 800813c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	680e      	ldr	r6, [r1, #0]
 8008144:	061f      	lsls	r7, r3, #24
 8008146:	f856 5b04 	ldr.w	r5, [r6], #4
 800814a:	600e      	str	r6, [r1, #0]
 800814c:	d514      	bpl.n	8008178 <_printf_i+0x1ac>
 800814e:	07d9      	lsls	r1, r3, #31
 8008150:	bf44      	itt	mi
 8008152:	f043 0320 	orrmi.w	r3, r3, #32
 8008156:	6023      	strmi	r3, [r4, #0]
 8008158:	b91d      	cbnz	r5, 8008162 <_printf_i+0x196>
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f023 0320 	bic.w	r3, r3, #32
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	2310      	movs	r3, #16
 8008164:	e7b0      	b.n	80080c8 <_printf_i+0xfc>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	f043 0320 	orr.w	r3, r3, #32
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	2378      	movs	r3, #120	; 0x78
 8008170:	4828      	ldr	r0, [pc, #160]	; (8008214 <_printf_i+0x248>)
 8008172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008176:	e7e3      	b.n	8008140 <_printf_i+0x174>
 8008178:	065e      	lsls	r6, r3, #25
 800817a:	bf48      	it	mi
 800817c:	b2ad      	uxthmi	r5, r5
 800817e:	e7e6      	b.n	800814e <_printf_i+0x182>
 8008180:	4616      	mov	r6, r2
 8008182:	e7bb      	b.n	80080fc <_printf_i+0x130>
 8008184:	680b      	ldr	r3, [r1, #0]
 8008186:	6826      	ldr	r6, [r4, #0]
 8008188:	6960      	ldr	r0, [r4, #20]
 800818a:	1d1d      	adds	r5, r3, #4
 800818c:	600d      	str	r5, [r1, #0]
 800818e:	0635      	lsls	r5, r6, #24
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	d501      	bpl.n	8008198 <_printf_i+0x1cc>
 8008194:	6018      	str	r0, [r3, #0]
 8008196:	e002      	b.n	800819e <_printf_i+0x1d2>
 8008198:	0671      	lsls	r1, r6, #25
 800819a:	d5fb      	bpl.n	8008194 <_printf_i+0x1c8>
 800819c:	8018      	strh	r0, [r3, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	4616      	mov	r6, r2
 80081a4:	e7ba      	b.n	800811c <_printf_i+0x150>
 80081a6:	680b      	ldr	r3, [r1, #0]
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	600a      	str	r2, [r1, #0]
 80081ac:	681e      	ldr	r6, [r3, #0]
 80081ae:	6862      	ldr	r2, [r4, #4]
 80081b0:	2100      	movs	r1, #0
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7f8 f834 	bl	8000220 <memchr>
 80081b8:	b108      	cbz	r0, 80081be <_printf_i+0x1f2>
 80081ba:	1b80      	subs	r0, r0, r6
 80081bc:	6060      	str	r0, [r4, #4]
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	2300      	movs	r3, #0
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c8:	e7a8      	b.n	800811c <_printf_i+0x150>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	4632      	mov	r2, r6
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d0ab      	beq.n	8008130 <_printf_i+0x164>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	079b      	lsls	r3, r3, #30
 80081dc:	d413      	bmi.n	8008206 <_printf_i+0x23a>
 80081de:	68e0      	ldr	r0, [r4, #12]
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	4298      	cmp	r0, r3
 80081e4:	bfb8      	it	lt
 80081e6:	4618      	movlt	r0, r3
 80081e8:	e7a4      	b.n	8008134 <_printf_i+0x168>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4632      	mov	r2, r6
 80081ee:	4649      	mov	r1, r9
 80081f0:	4640      	mov	r0, r8
 80081f2:	47d0      	blx	sl
 80081f4:	3001      	adds	r0, #1
 80081f6:	d09b      	beq.n	8008130 <_printf_i+0x164>
 80081f8:	3501      	adds	r5, #1
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	9903      	ldr	r1, [sp, #12]
 80081fe:	1a5b      	subs	r3, r3, r1
 8008200:	42ab      	cmp	r3, r5
 8008202:	dcf2      	bgt.n	80081ea <_printf_i+0x21e>
 8008204:	e7eb      	b.n	80081de <_printf_i+0x212>
 8008206:	2500      	movs	r5, #0
 8008208:	f104 0619 	add.w	r6, r4, #25
 800820c:	e7f5      	b.n	80081fa <_printf_i+0x22e>
 800820e:	bf00      	nop
 8008210:	0800a6da 	.word	0x0800a6da
 8008214:	0800a6eb 	.word	0x0800a6eb

08008218 <siprintf>:
 8008218:	b40e      	push	{r1, r2, r3}
 800821a:	b500      	push	{lr}
 800821c:	b09c      	sub	sp, #112	; 0x70
 800821e:	ab1d      	add	r3, sp, #116	; 0x74
 8008220:	9002      	str	r0, [sp, #8]
 8008222:	9006      	str	r0, [sp, #24]
 8008224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008228:	4809      	ldr	r0, [pc, #36]	; (8008250 <siprintf+0x38>)
 800822a:	9107      	str	r1, [sp, #28]
 800822c:	9104      	str	r1, [sp, #16]
 800822e:	4909      	ldr	r1, [pc, #36]	; (8008254 <siprintf+0x3c>)
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	9105      	str	r1, [sp, #20]
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	a902      	add	r1, sp, #8
 800823c:	f001 fb32 	bl	80098a4 <_svfiprintf_r>
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	b01c      	add	sp, #112	; 0x70
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	20000010 	.word	0x20000010
 8008254:	ffff0208 	.word	0xffff0208

08008258 <quorem>:
 8008258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	6903      	ldr	r3, [r0, #16]
 800825e:	690c      	ldr	r4, [r1, #16]
 8008260:	42a3      	cmp	r3, r4
 8008262:	4607      	mov	r7, r0
 8008264:	f2c0 8081 	blt.w	800836a <quorem+0x112>
 8008268:	3c01      	subs	r4, #1
 800826a:	f101 0814 	add.w	r8, r1, #20
 800826e:	f100 0514 	add.w	r5, r0, #20
 8008272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800827c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008280:	3301      	adds	r3, #1
 8008282:	429a      	cmp	r2, r3
 8008284:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800828c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008290:	d331      	bcc.n	80082f6 <quorem+0x9e>
 8008292:	f04f 0e00 	mov.w	lr, #0
 8008296:	4640      	mov	r0, r8
 8008298:	46ac      	mov	ip, r5
 800829a:	46f2      	mov	sl, lr
 800829c:	f850 2b04 	ldr.w	r2, [r0], #4
 80082a0:	b293      	uxth	r3, r2
 80082a2:	fb06 e303 	mla	r3, r6, r3, lr
 80082a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ebaa 0303 	sub.w	r3, sl, r3
 80082b0:	0c12      	lsrs	r2, r2, #16
 80082b2:	f8dc a000 	ldr.w	sl, [ip]
 80082b6:	fb06 e202 	mla	r2, r6, r2, lr
 80082ba:	fa13 f38a 	uxtah	r3, r3, sl
 80082be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082c2:	fa1f fa82 	uxth.w	sl, r2
 80082c6:	f8dc 2000 	ldr.w	r2, [ip]
 80082ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80082ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d8:	4581      	cmp	r9, r0
 80082da:	f84c 3b04 	str.w	r3, [ip], #4
 80082de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082e2:	d2db      	bcs.n	800829c <quorem+0x44>
 80082e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082e8:	b92b      	cbnz	r3, 80082f6 <quorem+0x9e>
 80082ea:	9b01      	ldr	r3, [sp, #4]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	429d      	cmp	r5, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	d32e      	bcc.n	8008352 <quorem+0xfa>
 80082f4:	613c      	str	r4, [r7, #16]
 80082f6:	4638      	mov	r0, r7
 80082f8:	f001 f8be 	bl	8009478 <__mcmp>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	db24      	blt.n	800834a <quorem+0xf2>
 8008300:	3601      	adds	r6, #1
 8008302:	4628      	mov	r0, r5
 8008304:	f04f 0c00 	mov.w	ip, #0
 8008308:	f858 2b04 	ldr.w	r2, [r8], #4
 800830c:	f8d0 e000 	ldr.w	lr, [r0]
 8008310:	b293      	uxth	r3, r2
 8008312:	ebac 0303 	sub.w	r3, ip, r3
 8008316:	0c12      	lsrs	r2, r2, #16
 8008318:	fa13 f38e 	uxtah	r3, r3, lr
 800831c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008324:	b29b      	uxth	r3, r3
 8008326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800832a:	45c1      	cmp	r9, r8
 800832c:	f840 3b04 	str.w	r3, [r0], #4
 8008330:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008334:	d2e8      	bcs.n	8008308 <quorem+0xb0>
 8008336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800833a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800833e:	b922      	cbnz	r2, 800834a <quorem+0xf2>
 8008340:	3b04      	subs	r3, #4
 8008342:	429d      	cmp	r5, r3
 8008344:	461a      	mov	r2, r3
 8008346:	d30a      	bcc.n	800835e <quorem+0x106>
 8008348:	613c      	str	r4, [r7, #16]
 800834a:	4630      	mov	r0, r6
 800834c:	b003      	add	sp, #12
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	3b04      	subs	r3, #4
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1cc      	bne.n	80082f4 <quorem+0x9c>
 800835a:	3c01      	subs	r4, #1
 800835c:	e7c7      	b.n	80082ee <quorem+0x96>
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	3b04      	subs	r3, #4
 8008362:	2a00      	cmp	r2, #0
 8008364:	d1f0      	bne.n	8008348 <quorem+0xf0>
 8008366:	3c01      	subs	r4, #1
 8008368:	e7eb      	b.n	8008342 <quorem+0xea>
 800836a:	2000      	movs	r0, #0
 800836c:	e7ee      	b.n	800834c <quorem+0xf4>
	...

08008370 <_dtoa_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ed2d 8b02 	vpush	{d8}
 8008378:	ec57 6b10 	vmov	r6, r7, d0
 800837c:	b095      	sub	sp, #84	; 0x54
 800837e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008380:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800838a:	4604      	mov	r4, r0
 800838c:	9209      	str	r2, [sp, #36]	; 0x24
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	b975      	cbnz	r5, 80083b0 <_dtoa_r+0x40>
 8008392:	2010      	movs	r0, #16
 8008394:	f000 fddc 	bl	8008f50 <malloc>
 8008398:	4602      	mov	r2, r0
 800839a:	6260      	str	r0, [r4, #36]	; 0x24
 800839c:	b920      	cbnz	r0, 80083a8 <_dtoa_r+0x38>
 800839e:	4bb2      	ldr	r3, [pc, #712]	; (8008668 <_dtoa_r+0x2f8>)
 80083a0:	21ea      	movs	r1, #234	; 0xea
 80083a2:	48b2      	ldr	r0, [pc, #712]	; (800866c <_dtoa_r+0x2fc>)
 80083a4:	f001 fb8e 	bl	8009ac4 <__assert_func>
 80083a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083ac:	6005      	str	r5, [r0, #0]
 80083ae:	60c5      	str	r5, [r0, #12]
 80083b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	b151      	cbz	r1, 80083cc <_dtoa_r+0x5c>
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	604a      	str	r2, [r1, #4]
 80083ba:	2301      	movs	r3, #1
 80083bc:	4093      	lsls	r3, r2
 80083be:	608b      	str	r3, [r1, #8]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fe1b 	bl	8008ffc <_Bfree>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	1e3b      	subs	r3, r7, #0
 80083ce:	bfb9      	ittee	lt
 80083d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	9303      	strlt	r3, [sp, #12]
 80083d6:	2300      	movge	r3, #0
 80083d8:	f8c8 3000 	strge.w	r3, [r8]
 80083dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80083e0:	4ba3      	ldr	r3, [pc, #652]	; (8008670 <_dtoa_r+0x300>)
 80083e2:	bfbc      	itt	lt
 80083e4:	2201      	movlt	r2, #1
 80083e6:	f8c8 2000 	strlt.w	r2, [r8]
 80083ea:	ea33 0309 	bics.w	r3, r3, r9
 80083ee:	d11b      	bne.n	8008428 <_dtoa_r+0xb8>
 80083f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083fc:	4333      	orrs	r3, r6
 80083fe:	f000 857a 	beq.w	8008ef6 <_dtoa_r+0xb86>
 8008402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008404:	b963      	cbnz	r3, 8008420 <_dtoa_r+0xb0>
 8008406:	4b9b      	ldr	r3, [pc, #620]	; (8008674 <_dtoa_r+0x304>)
 8008408:	e024      	b.n	8008454 <_dtoa_r+0xe4>
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <_dtoa_r+0x308>)
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	9800      	ldr	r0, [sp, #0]
 8008416:	b015      	add	sp, #84	; 0x54
 8008418:	ecbd 8b02 	vpop	{d8}
 800841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008420:	4b94      	ldr	r3, [pc, #592]	; (8008674 <_dtoa_r+0x304>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	3303      	adds	r3, #3
 8008426:	e7f3      	b.n	8008410 <_dtoa_r+0xa0>
 8008428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	ec51 0b17 	vmov	r0, r1, d7
 8008432:	2300      	movs	r3, #0
 8008434:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008438:	f7f8 fb66 	bl	8000b08 <__aeabi_dcmpeq>
 800843c:	4680      	mov	r8, r0
 800843e:	b158      	cbz	r0, 8008458 <_dtoa_r+0xe8>
 8008440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008442:	2301      	movs	r3, #1
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8551 	beq.w	8008ef0 <_dtoa_r+0xb80>
 800844e:	488b      	ldr	r0, [pc, #556]	; (800867c <_dtoa_r+0x30c>)
 8008450:	6018      	str	r0, [r3, #0]
 8008452:	1e43      	subs	r3, r0, #1
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	e7dd      	b.n	8008414 <_dtoa_r+0xa4>
 8008458:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800845c:	aa12      	add	r2, sp, #72	; 0x48
 800845e:	a913      	add	r1, sp, #76	; 0x4c
 8008460:	4620      	mov	r0, r4
 8008462:	f001 f8ad 	bl	80095c0 <__d2b>
 8008466:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800846a:	4683      	mov	fp, r0
 800846c:	2d00      	cmp	r5, #0
 800846e:	d07c      	beq.n	800856a <_dtoa_r+0x1fa>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800847e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800848a:	4b7d      	ldr	r3, [pc, #500]	; (8008680 <_dtoa_r+0x310>)
 800848c:	2200      	movs	r2, #0
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	f7f7 ff19 	bl	80002c8 <__aeabi_dsub>
 8008496:	a36e      	add	r3, pc, #440	; (adr r3, 8008650 <_dtoa_r+0x2e0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f8 f8cc 	bl	8000638 <__aeabi_dmul>
 80084a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008658 <_dtoa_r+0x2e8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f7 ff11 	bl	80002cc <__adddf3>
 80084aa:	4606      	mov	r6, r0
 80084ac:	4628      	mov	r0, r5
 80084ae:	460f      	mov	r7, r1
 80084b0:	f7f8 f858 	bl	8000564 <__aeabi_i2d>
 80084b4:	a36a      	add	r3, pc, #424	; (adr r3, 8008660 <_dtoa_r+0x2f0>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f7f8 f8bd 	bl	8000638 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4630      	mov	r0, r6
 80084c4:	4639      	mov	r1, r7
 80084c6:	f7f7 ff01 	bl	80002cc <__adddf3>
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	f7f8 fb63 	bl	8000b98 <__aeabi_d2iz>
 80084d2:	2200      	movs	r2, #0
 80084d4:	4682      	mov	sl, r0
 80084d6:	2300      	movs	r3, #0
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fb1e 	bl	8000b1c <__aeabi_dcmplt>
 80084e0:	b148      	cbz	r0, 80084f6 <_dtoa_r+0x186>
 80084e2:	4650      	mov	r0, sl
 80084e4:	f7f8 f83e 	bl	8000564 <__aeabi_i2d>
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	f7f8 fb0c 	bl	8000b08 <__aeabi_dcmpeq>
 80084f0:	b908      	cbnz	r0, 80084f6 <_dtoa_r+0x186>
 80084f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084f6:	f1ba 0f16 	cmp.w	sl, #22
 80084fa:	d854      	bhi.n	80085a6 <_dtoa_r+0x236>
 80084fc:	4b61      	ldr	r3, [pc, #388]	; (8008684 <_dtoa_r+0x314>)
 80084fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800850a:	f7f8 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	d04b      	beq.n	80085aa <_dtoa_r+0x23a>
 8008512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008516:	2300      	movs	r3, #0
 8008518:	930e      	str	r3, [sp, #56]	; 0x38
 800851a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800851c:	1b5d      	subs	r5, r3, r5
 800851e:	1e6b      	subs	r3, r5, #1
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	bf43      	ittte	mi
 8008524:	2300      	movmi	r3, #0
 8008526:	f1c5 0801 	rsbmi	r8, r5, #1
 800852a:	9304      	strmi	r3, [sp, #16]
 800852c:	f04f 0800 	movpl.w	r8, #0
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	db3b      	blt.n	80085ae <_dtoa_r+0x23e>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800853c:	4453      	add	r3, sl
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	2300      	movs	r3, #0
 8008542:	9306      	str	r3, [sp, #24]
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	2b09      	cmp	r3, #9
 8008548:	d869      	bhi.n	800861e <_dtoa_r+0x2ae>
 800854a:	2b05      	cmp	r3, #5
 800854c:	bfc4      	itt	gt
 800854e:	3b04      	subgt	r3, #4
 8008550:	9305      	strgt	r3, [sp, #20]
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	f1a3 0302 	sub.w	r3, r3, #2
 8008558:	bfcc      	ite	gt
 800855a:	2500      	movgt	r5, #0
 800855c:	2501      	movle	r5, #1
 800855e:	2b03      	cmp	r3, #3
 8008560:	d869      	bhi.n	8008636 <_dtoa_r+0x2c6>
 8008562:	e8df f003 	tbb	[pc, r3]
 8008566:	4e2c      	.short	0x4e2c
 8008568:	5a4c      	.short	0x5a4c
 800856a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800856e:	441d      	add	r5, r3
 8008570:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008574:	2b20      	cmp	r3, #32
 8008576:	bfc1      	itttt	gt
 8008578:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800857c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008580:	fa09 f303 	lslgt.w	r3, r9, r3
 8008584:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008588:	bfda      	itte	le
 800858a:	f1c3 0320 	rsble	r3, r3, #32
 800858e:	fa06 f003 	lslle.w	r0, r6, r3
 8008592:	4318      	orrgt	r0, r3
 8008594:	f7f7 ffd6 	bl	8000544 <__aeabi_ui2d>
 8008598:	2301      	movs	r3, #1
 800859a:	4606      	mov	r6, r0
 800859c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085a0:	3d01      	subs	r5, #1
 80085a2:	9310      	str	r3, [sp, #64]	; 0x40
 80085a4:	e771      	b.n	800848a <_dtoa_r+0x11a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e7b6      	b.n	8008518 <_dtoa_r+0x1a8>
 80085aa:	900e      	str	r0, [sp, #56]	; 0x38
 80085ac:	e7b5      	b.n	800851a <_dtoa_r+0x1aa>
 80085ae:	f1ca 0300 	rsb	r3, sl, #0
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	2300      	movs	r3, #0
 80085b6:	eba8 080a 	sub.w	r8, r8, sl
 80085ba:	930d      	str	r3, [sp, #52]	; 0x34
 80085bc:	e7c2      	b.n	8008544 <_dtoa_r+0x1d4>
 80085be:	2300      	movs	r3, #0
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc39      	bgt.n	800863c <_dtoa_r+0x2cc>
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80085d0:	464b      	mov	r3, r9
 80085d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80085d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085d8:	2200      	movs	r2, #0
 80085da:	6042      	str	r2, [r0, #4]
 80085dc:	2204      	movs	r2, #4
 80085de:	f102 0614 	add.w	r6, r2, #20
 80085e2:	429e      	cmp	r6, r3
 80085e4:	6841      	ldr	r1, [r0, #4]
 80085e6:	d92f      	bls.n	8008648 <_dtoa_r+0x2d8>
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fcc7 	bl	8008f7c <_Balloc>
 80085ee:	9000      	str	r0, [sp, #0]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d14b      	bne.n	800868c <_dtoa_r+0x31c>
 80085f4:	4b24      	ldr	r3, [pc, #144]	; (8008688 <_dtoa_r+0x318>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085fc:	e6d1      	b.n	80083a2 <_dtoa_r+0x32>
 80085fe:	2301      	movs	r3, #1
 8008600:	e7de      	b.n	80085c0 <_dtoa_r+0x250>
 8008602:	2300      	movs	r3, #0
 8008604:	9308      	str	r3, [sp, #32]
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	eb0a 0903 	add.w	r9, sl, r3
 800860c:	f109 0301 	add.w	r3, r9, #1
 8008610:	2b01      	cmp	r3, #1
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	bfb8      	it	lt
 8008616:	2301      	movlt	r3, #1
 8008618:	e7dd      	b.n	80085d6 <_dtoa_r+0x266>
 800861a:	2301      	movs	r3, #1
 800861c:	e7f2      	b.n	8008604 <_dtoa_r+0x294>
 800861e:	2501      	movs	r5, #1
 8008620:	2300      	movs	r3, #0
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	9508      	str	r5, [sp, #32]
 8008626:	f04f 39ff 	mov.w	r9, #4294967295
 800862a:	2200      	movs	r2, #0
 800862c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008630:	2312      	movs	r3, #18
 8008632:	9209      	str	r2, [sp, #36]	; 0x24
 8008634:	e7cf      	b.n	80085d6 <_dtoa_r+0x266>
 8008636:	2301      	movs	r3, #1
 8008638:	9308      	str	r3, [sp, #32]
 800863a:	e7f4      	b.n	8008626 <_dtoa_r+0x2b6>
 800863c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008640:	f8cd 9004 	str.w	r9, [sp, #4]
 8008644:	464b      	mov	r3, r9
 8008646:	e7c6      	b.n	80085d6 <_dtoa_r+0x266>
 8008648:	3101      	adds	r1, #1
 800864a:	6041      	str	r1, [r0, #4]
 800864c:	0052      	lsls	r2, r2, #1
 800864e:	e7c6      	b.n	80085de <_dtoa_r+0x26e>
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800a709 	.word	0x0800a709
 800866c:	0800a720 	.word	0x0800a720
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800a705 	.word	0x0800a705
 8008678:	0800a6fc 	.word	0x0800a6fc
 800867c:	0800a6d9 	.word	0x0800a6d9
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800a818 	.word	0x0800a818
 8008688:	0800a77f 	.word	0x0800a77f
 800868c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868e:	9a00      	ldr	r2, [sp, #0]
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	2b0e      	cmp	r3, #14
 8008696:	f200 80ad 	bhi.w	80087f4 <_dtoa_r+0x484>
 800869a:	2d00      	cmp	r5, #0
 800869c:	f000 80aa 	beq.w	80087f4 <_dtoa_r+0x484>
 80086a0:	f1ba 0f00 	cmp.w	sl, #0
 80086a4:	dd36      	ble.n	8008714 <_dtoa_r+0x3a4>
 80086a6:	4ac3      	ldr	r2, [pc, #780]	; (80089b4 <_dtoa_r+0x644>)
 80086a8:	f00a 030f 	and.w	r3, sl, #15
 80086ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086b0:	ed93 7b00 	vldr	d7, [r3]
 80086b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80086bc:	eeb0 8a47 	vmov.f32	s16, s14
 80086c0:	eef0 8a67 	vmov.f32	s17, s15
 80086c4:	d016      	beq.n	80086f4 <_dtoa_r+0x384>
 80086c6:	4bbc      	ldr	r3, [pc, #752]	; (80089b8 <_dtoa_r+0x648>)
 80086c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086d0:	f7f8 f8dc 	bl	800088c <__aeabi_ddiv>
 80086d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d8:	f007 070f 	and.w	r7, r7, #15
 80086dc:	2503      	movs	r5, #3
 80086de:	4eb6      	ldr	r6, [pc, #728]	; (80089b8 <_dtoa_r+0x648>)
 80086e0:	b957      	cbnz	r7, 80086f8 <_dtoa_r+0x388>
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	ec53 2b18 	vmov	r2, r3, d8
 80086ea:	f7f8 f8cf 	bl	800088c <__aeabi_ddiv>
 80086ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f2:	e029      	b.n	8008748 <_dtoa_r+0x3d8>
 80086f4:	2502      	movs	r5, #2
 80086f6:	e7f2      	b.n	80086de <_dtoa_r+0x36e>
 80086f8:	07f9      	lsls	r1, r7, #31
 80086fa:	d508      	bpl.n	800870e <_dtoa_r+0x39e>
 80086fc:	ec51 0b18 	vmov	r0, r1, d8
 8008700:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	ec41 0b18 	vmov	d8, r0, r1
 800870c:	3501      	adds	r5, #1
 800870e:	107f      	asrs	r7, r7, #1
 8008710:	3608      	adds	r6, #8
 8008712:	e7e5      	b.n	80086e0 <_dtoa_r+0x370>
 8008714:	f000 80a6 	beq.w	8008864 <_dtoa_r+0x4f4>
 8008718:	f1ca 0600 	rsb	r6, sl, #0
 800871c:	4ba5      	ldr	r3, [pc, #660]	; (80089b4 <_dtoa_r+0x644>)
 800871e:	4fa6      	ldr	r7, [pc, #664]	; (80089b8 <_dtoa_r+0x648>)
 8008720:	f006 020f 	and.w	r2, r6, #15
 8008724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008730:	f7f7 ff82 	bl	8000638 <__aeabi_dmul>
 8008734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008738:	1136      	asrs	r6, r6, #4
 800873a:	2300      	movs	r3, #0
 800873c:	2502      	movs	r5, #2
 800873e:	2e00      	cmp	r6, #0
 8008740:	f040 8085 	bne.w	800884e <_dtoa_r+0x4de>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1d2      	bne.n	80086ee <_dtoa_r+0x37e>
 8008748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 808c 	beq.w	8008868 <_dtoa_r+0x4f8>
 8008750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008754:	4b99      	ldr	r3, [pc, #612]	; (80089bc <_dtoa_r+0x64c>)
 8008756:	2200      	movs	r2, #0
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f8 f9de 	bl	8000b1c <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	f000 8081 	beq.w	8008868 <_dtoa_r+0x4f8>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d07d      	beq.n	8008868 <_dtoa_r+0x4f8>
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	dd3c      	ble.n	80087ec <_dtoa_r+0x47c>
 8008772:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	2200      	movs	r2, #0
 800877a:	4b91      	ldr	r3, [pc, #580]	; (80089c0 <_dtoa_r+0x650>)
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 ff5a 	bl	8000638 <__aeabi_dmul>
 8008784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008788:	3501      	adds	r5, #1
 800878a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800878e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008792:	4628      	mov	r0, r5
 8008794:	f7f7 fee6 	bl	8000564 <__aeabi_i2d>
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	f7f7 ff4c 	bl	8000638 <__aeabi_dmul>
 80087a0:	4b88      	ldr	r3, [pc, #544]	; (80089c4 <_dtoa_r+0x654>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	f7f7 fd92 	bl	80002cc <__adddf3>
 80087a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b0:	9303      	str	r3, [sp, #12]
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d15c      	bne.n	8008872 <_dtoa_r+0x502>
 80087b8:	4b83      	ldr	r3, [pc, #524]	; (80089c8 <_dtoa_r+0x658>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f7 fd82 	bl	80002c8 <__aeabi_dsub>
 80087c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c8:	4606      	mov	r6, r0
 80087ca:	460f      	mov	r7, r1
 80087cc:	f7f8 f9c4 	bl	8000b58 <__aeabi_dcmpgt>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	f040 8296 	bne.w	8008d02 <_dtoa_r+0x992>
 80087d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087da:	4630      	mov	r0, r6
 80087dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f8 f99b 	bl	8000b1c <__aeabi_dcmplt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f040 8288 	bne.w	8008cfc <_dtoa_r+0x98c>
 80087ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f2c0 8158 	blt.w	8008aac <_dtoa_r+0x73c>
 80087fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008800:	f300 8154 	bgt.w	8008aac <_dtoa_r+0x73c>
 8008804:	4b6b      	ldr	r3, [pc, #428]	; (80089b4 <_dtoa_r+0x644>)
 8008806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800880a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	f280 80e3 	bge.w	80089dc <_dtoa_r+0x66c>
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f300 80df 	bgt.w	80089dc <_dtoa_r+0x66c>
 800881e:	f040 826d 	bne.w	8008cfc <_dtoa_r+0x98c>
 8008822:	4b69      	ldr	r3, [pc, #420]	; (80089c8 <_dtoa_r+0x658>)
 8008824:	2200      	movs	r2, #0
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f7 ff05 	bl	8000638 <__aeabi_dmul>
 800882e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008832:	f7f8 f987 	bl	8000b44 <__aeabi_dcmpge>
 8008836:	9e01      	ldr	r6, [sp, #4]
 8008838:	4637      	mov	r7, r6
 800883a:	2800      	cmp	r0, #0
 800883c:	f040 8243 	bne.w	8008cc6 <_dtoa_r+0x956>
 8008840:	9d00      	ldr	r5, [sp, #0]
 8008842:	2331      	movs	r3, #49	; 0x31
 8008844:	f805 3b01 	strb.w	r3, [r5], #1
 8008848:	f10a 0a01 	add.w	sl, sl, #1
 800884c:	e23f      	b.n	8008cce <_dtoa_r+0x95e>
 800884e:	07f2      	lsls	r2, r6, #31
 8008850:	d505      	bpl.n	800885e <_dtoa_r+0x4ee>
 8008852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008856:	f7f7 feef 	bl	8000638 <__aeabi_dmul>
 800885a:	3501      	adds	r5, #1
 800885c:	2301      	movs	r3, #1
 800885e:	1076      	asrs	r6, r6, #1
 8008860:	3708      	adds	r7, #8
 8008862:	e76c      	b.n	800873e <_dtoa_r+0x3ce>
 8008864:	2502      	movs	r5, #2
 8008866:	e76f      	b.n	8008748 <_dtoa_r+0x3d8>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	f8cd a01c 	str.w	sl, [sp, #28]
 800886e:	930c      	str	r3, [sp, #48]	; 0x30
 8008870:	e78d      	b.n	800878e <_dtoa_r+0x41e>
 8008872:	9900      	ldr	r1, [sp, #0]
 8008874:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008878:	4b4e      	ldr	r3, [pc, #312]	; (80089b4 <_dtoa_r+0x644>)
 800887a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800887e:	4401      	add	r1, r0
 8008880:	9102      	str	r1, [sp, #8]
 8008882:	9908      	ldr	r1, [sp, #32]
 8008884:	eeb0 8a47 	vmov.f32	s16, s14
 8008888:	eef0 8a67 	vmov.f32	s17, s15
 800888c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008894:	2900      	cmp	r1, #0
 8008896:	d045      	beq.n	8008924 <_dtoa_r+0x5b4>
 8008898:	494c      	ldr	r1, [pc, #304]	; (80089cc <_dtoa_r+0x65c>)
 800889a:	2000      	movs	r0, #0
 800889c:	f7f7 fff6 	bl	800088c <__aeabi_ddiv>
 80088a0:	ec53 2b18 	vmov	r2, r3, d8
 80088a4:	f7f7 fd10 	bl	80002c8 <__aeabi_dsub>
 80088a8:	9d00      	ldr	r5, [sp, #0]
 80088aa:	ec41 0b18 	vmov	d8, r0, r1
 80088ae:	4639      	mov	r1, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7f8 f971 	bl	8000b98 <__aeabi_d2iz>
 80088b6:	900c      	str	r0, [sp, #48]	; 0x30
 80088b8:	f7f7 fe54 	bl	8000564 <__aeabi_i2d>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fd00 	bl	80002c8 <__aeabi_dsub>
 80088c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ca:	3330      	adds	r3, #48	; 0x30
 80088cc:	f805 3b01 	strb.w	r3, [r5], #1
 80088d0:	ec53 2b18 	vmov	r2, r3, d8
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	f7f8 f920 	bl	8000b1c <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d165      	bne.n	80089ac <_dtoa_r+0x63c>
 80088e0:	4632      	mov	r2, r6
 80088e2:	463b      	mov	r3, r7
 80088e4:	4935      	ldr	r1, [pc, #212]	; (80089bc <_dtoa_r+0x64c>)
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7f7 fcee 	bl	80002c8 <__aeabi_dsub>
 80088ec:	ec53 2b18 	vmov	r2, r3, d8
 80088f0:	f7f8 f914 	bl	8000b1c <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 80b9 	bne.w	8008a6c <_dtoa_r+0x6fc>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	429d      	cmp	r5, r3
 80088fe:	f43f af75 	beq.w	80087ec <_dtoa_r+0x47c>
 8008902:	4b2f      	ldr	r3, [pc, #188]	; (80089c0 <_dtoa_r+0x650>)
 8008904:	ec51 0b18 	vmov	r0, r1, d8
 8008908:	2200      	movs	r2, #0
 800890a:	f7f7 fe95 	bl	8000638 <__aeabi_dmul>
 800890e:	4b2c      	ldr	r3, [pc, #176]	; (80089c0 <_dtoa_r+0x650>)
 8008910:	ec41 0b18 	vmov	d8, r0, r1
 8008914:	2200      	movs	r2, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fe8d 	bl	8000638 <__aeabi_dmul>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	e7c4      	b.n	80088ae <_dtoa_r+0x53e>
 8008924:	ec51 0b17 	vmov	r0, r1, d7
 8008928:	f7f7 fe86 	bl	8000638 <__aeabi_dmul>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	9d00      	ldr	r5, [sp, #0]
 8008930:	930c      	str	r3, [sp, #48]	; 0x30
 8008932:	ec41 0b18 	vmov	d8, r0, r1
 8008936:	4639      	mov	r1, r7
 8008938:	4630      	mov	r0, r6
 800893a:	f7f8 f92d 	bl	8000b98 <__aeabi_d2iz>
 800893e:	9011      	str	r0, [sp, #68]	; 0x44
 8008940:	f7f7 fe10 	bl	8000564 <__aeabi_i2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fcbc 	bl	80002c8 <__aeabi_dsub>
 8008950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008952:	3330      	adds	r3, #48	; 0x30
 8008954:	f805 3b01 	strb.w	r3, [r5], #1
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	429d      	cmp	r5, r3
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	d134      	bne.n	80089d0 <_dtoa_r+0x660>
 8008966:	4b19      	ldr	r3, [pc, #100]	; (80089cc <_dtoa_r+0x65c>)
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f7 fcae 	bl	80002cc <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f8ee 	bl	8000b58 <__aeabi_dcmpgt>
 800897c:	2800      	cmp	r0, #0
 800897e:	d175      	bne.n	8008a6c <_dtoa_r+0x6fc>
 8008980:	ec53 2b18 	vmov	r2, r3, d8
 8008984:	4911      	ldr	r1, [pc, #68]	; (80089cc <_dtoa_r+0x65c>)
 8008986:	2000      	movs	r0, #0
 8008988:	f7f7 fc9e 	bl	80002c8 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f af27 	beq.w	80087ec <_dtoa_r+0x47c>
 800899e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089a0:	1e6b      	subs	r3, r5, #1
 80089a2:	930c      	str	r3, [sp, #48]	; 0x30
 80089a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d0f8      	beq.n	800899e <_dtoa_r+0x62e>
 80089ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089b0:	e04a      	b.n	8008a48 <_dtoa_r+0x6d8>
 80089b2:	bf00      	nop
 80089b4:	0800a818 	.word	0x0800a818
 80089b8:	0800a7f0 	.word	0x0800a7f0
 80089bc:	3ff00000 	.word	0x3ff00000
 80089c0:	40240000 	.word	0x40240000
 80089c4:	401c0000 	.word	0x401c0000
 80089c8:	40140000 	.word	0x40140000
 80089cc:	3fe00000 	.word	0x3fe00000
 80089d0:	4baf      	ldr	r3, [pc, #700]	; (8008c90 <_dtoa_r+0x920>)
 80089d2:	f7f7 fe31 	bl	8000638 <__aeabi_dmul>
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	e7ac      	b.n	8008936 <_dtoa_r+0x5c6>
 80089dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089e0:	9d00      	ldr	r5, [sp, #0]
 80089e2:	4642      	mov	r2, r8
 80089e4:	464b      	mov	r3, r9
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f7 ff4f 	bl	800088c <__aeabi_ddiv>
 80089ee:	f7f8 f8d3 	bl	8000b98 <__aeabi_d2iz>
 80089f2:	9002      	str	r0, [sp, #8]
 80089f4:	f7f7 fdb6 	bl	8000564 <__aeabi_i2d>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	f7f7 fe1c 	bl	8000638 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f7 fc5e 	bl	80002c8 <__aeabi_dsub>
 8008a0c:	9e02      	ldr	r6, [sp, #8]
 8008a0e:	9f01      	ldr	r7, [sp, #4]
 8008a10:	3630      	adds	r6, #48	; 0x30
 8008a12:	f805 6b01 	strb.w	r6, [r5], #1
 8008a16:	9e00      	ldr	r6, [sp, #0]
 8008a18:	1bae      	subs	r6, r5, r6
 8008a1a:	42b7      	cmp	r7, r6
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	d137      	bne.n	8008a92 <_dtoa_r+0x722>
 8008a22:	f7f7 fc53 	bl	80002cc <__adddf3>
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f7f8 f893 	bl	8000b58 <__aeabi_dcmpgt>
 8008a32:	b9c8      	cbnz	r0, 8008a68 <_dtoa_r+0x6f8>
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f864 	bl	8000b08 <__aeabi_dcmpeq>
 8008a40:	b110      	cbz	r0, 8008a48 <_dtoa_r+0x6d8>
 8008a42:	9b02      	ldr	r3, [sp, #8]
 8008a44:	07d9      	lsls	r1, r3, #31
 8008a46:	d40f      	bmi.n	8008a68 <_dtoa_r+0x6f8>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	f000 fad6 	bl	8008ffc <_Bfree>
 8008a50:	2300      	movs	r3, #0
 8008a52:	702b      	strb	r3, [r5, #0]
 8008a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a56:	f10a 0001 	add.w	r0, sl, #1
 8008a5a:	6018      	str	r0, [r3, #0]
 8008a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f43f acd8 	beq.w	8008414 <_dtoa_r+0xa4>
 8008a64:	601d      	str	r5, [r3, #0]
 8008a66:	e4d5      	b.n	8008414 <_dtoa_r+0xa4>
 8008a68:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	461d      	mov	r5, r3
 8008a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a74:	2a39      	cmp	r2, #57	; 0x39
 8008a76:	d108      	bne.n	8008a8a <_dtoa_r+0x71a>
 8008a78:	9a00      	ldr	r2, [sp, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d1f7      	bne.n	8008a6e <_dtoa_r+0x6fe>
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	9900      	ldr	r1, [sp, #0]
 8008a82:	3201      	adds	r2, #1
 8008a84:	9207      	str	r2, [sp, #28]
 8008a86:	2230      	movs	r2, #48	; 0x30
 8008a88:	700a      	strb	r2, [r1, #0]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e78c      	b.n	80089ac <_dtoa_r+0x63c>
 8008a92:	4b7f      	ldr	r3, [pc, #508]	; (8008c90 <_dtoa_r+0x920>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7f7 fdcf 	bl	8000638 <__aeabi_dmul>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	f7f8 f831 	bl	8000b08 <__aeabi_dcmpeq>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d09b      	beq.n	80089e2 <_dtoa_r+0x672>
 8008aaa:	e7cd      	b.n	8008a48 <_dtoa_r+0x6d8>
 8008aac:	9a08      	ldr	r2, [sp, #32]
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	f000 80c4 	beq.w	8008c3c <_dtoa_r+0x8cc>
 8008ab4:	9a05      	ldr	r2, [sp, #20]
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	f300 80a8 	bgt.w	8008c0c <_dtoa_r+0x89c>
 8008abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	f000 80a0 	beq.w	8008c04 <_dtoa_r+0x894>
 8008ac4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ac8:	9e06      	ldr	r6, [sp, #24]
 8008aca:	4645      	mov	r5, r8
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	2101      	movs	r1, #1
 8008ad0:	441a      	add	r2, r3
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4498      	add	r8, r3
 8008ad6:	9204      	str	r2, [sp, #16]
 8008ad8:	f000 fb4c 	bl	8009174 <__i2b>
 8008adc:	4607      	mov	r7, r0
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	dd0b      	ble.n	8008afa <_dtoa_r+0x78a>
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd08      	ble.n	8008afa <_dtoa_r+0x78a>
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	bfa8      	it	ge
 8008aee:	462b      	movge	r3, r5
 8008af0:	eba8 0803 	sub.w	r8, r8, r3
 8008af4:	1aed      	subs	r5, r5, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	b1fb      	cbz	r3, 8008b3e <_dtoa_r+0x7ce>
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 809f 	beq.w	8008c44 <_dtoa_r+0x8d4>
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	dd11      	ble.n	8008b2e <_dtoa_r+0x7be>
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fbec 	bl	80092ec <__pow5mult>
 8008b14:	465a      	mov	r2, fp
 8008b16:	4601      	mov	r1, r0
 8008b18:	4607      	mov	r7, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fb40 	bl	80091a0 <__multiply>
 8008b20:	4659      	mov	r1, fp
 8008b22:	9007      	str	r0, [sp, #28]
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fa69 	bl	8008ffc <_Bfree>
 8008b2a:	9b07      	ldr	r3, [sp, #28]
 8008b2c:	469b      	mov	fp, r3
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	1b9a      	subs	r2, r3, r6
 8008b32:	d004      	beq.n	8008b3e <_dtoa_r+0x7ce>
 8008b34:	4659      	mov	r1, fp
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fbd8 	bl	80092ec <__pow5mult>
 8008b3c:	4683      	mov	fp, r0
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fb17 	bl	8009174 <__i2b>
 8008b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	dd7c      	ble.n	8008c48 <_dtoa_r+0x8d8>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4601      	mov	r1, r0
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fbca 	bl	80092ec <__pow5mult>
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	dd76      	ble.n	8008c4e <_dtoa_r+0x8de>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9306      	str	r3, [sp, #24]
 8008b64:	6933      	ldr	r3, [r6, #16]
 8008b66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b6a:	6918      	ldr	r0, [r3, #16]
 8008b6c:	f000 fab2 	bl	80090d4 <__hi0bits>
 8008b70:	f1c0 0020 	rsb	r0, r0, #32
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	4418      	add	r0, r3
 8008b78:	f010 001f 	ands.w	r0, r0, #31
 8008b7c:	f000 8086 	beq.w	8008c8c <_dtoa_r+0x91c>
 8008b80:	f1c0 0320 	rsb	r3, r0, #32
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	dd7f      	ble.n	8008c88 <_dtoa_r+0x918>
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	4403      	add	r3, r0
 8008b90:	4480      	add	r8, r0
 8008b92:	4405      	add	r5, r0
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x838>
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	4642      	mov	r2, r8
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fbfd 	bl	80093a0 <__lshift>
 8008ba6:	4683      	mov	fp, r0
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x84a>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fbf4 	bl	80093a0 <__lshift>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d069      	beq.n	8008c94 <_dtoa_r+0x924>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f000 fc58 	bl	8009478 <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da63      	bge.n	8008c94 <_dtoa_r+0x924>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4659      	mov	r1, fp
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fa34 	bl	8009040 <__multadd>
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008bde:	4683      	mov	fp, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 818f 	beq.w	8008f04 <_dtoa_r+0xb94>
 8008be6:	4639      	mov	r1, r7
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fa27 	bl	8009040 <__multadd>
 8008bf2:	f1b9 0f00 	cmp.w	r9, #0
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	f300 808e 	bgt.w	8008d18 <_dtoa_r+0x9a8>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc50      	bgt.n	8008ca4 <_dtoa_r+0x934>
 8008c02:	e089      	b.n	8008d18 <_dtoa_r+0x9a8>
 8008c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c0a:	e75d      	b.n	8008ac8 <_dtoa_r+0x758>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	1e5e      	subs	r6, r3, #1
 8008c10:	9b06      	ldr	r3, [sp, #24]
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	bfbf      	itttt	lt
 8008c16:	9b06      	ldrlt	r3, [sp, #24]
 8008c18:	9606      	strlt	r6, [sp, #24]
 8008c1a:	1af2      	sublt	r2, r6, r3
 8008c1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008c1e:	bfb6      	itet	lt
 8008c20:	189b      	addlt	r3, r3, r2
 8008c22:	1b9e      	subge	r6, r3, r6
 8008c24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	bfb8      	it	lt
 8008c2a:	2600      	movlt	r6, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb5      	itete	lt
 8008c30:	eba8 0503 	sublt.w	r5, r8, r3
 8008c34:	9b01      	ldrge	r3, [sp, #4]
 8008c36:	2300      	movlt	r3, #0
 8008c38:	4645      	movge	r5, r8
 8008c3a:	e747      	b.n	8008acc <_dtoa_r+0x75c>
 8008c3c:	9e06      	ldr	r6, [sp, #24]
 8008c3e:	9f08      	ldr	r7, [sp, #32]
 8008c40:	4645      	mov	r5, r8
 8008c42:	e74c      	b.n	8008ade <_dtoa_r+0x76e>
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	e775      	b.n	8008b34 <_dtoa_r+0x7c4>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	dc18      	bgt.n	8008c80 <_dtoa_r+0x910>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	b9b3      	cbnz	r3, 8008c80 <_dtoa_r+0x910>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c58:	b9a3      	cbnz	r3, 8008c84 <_dtoa_r+0x914>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	0d1b      	lsrs	r3, r3, #20
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	b12b      	cbz	r3, 8008c72 <_dtoa_r+0x902>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	f108 0801 	add.w	r8, r8, #1
 8008c70:	2301      	movs	r3, #1
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f47f af74 	bne.w	8008b64 <_dtoa_r+0x7f4>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e779      	b.n	8008b74 <_dtoa_r+0x804>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e7f6      	b.n	8008c72 <_dtoa_r+0x902>
 8008c84:	9b02      	ldr	r3, [sp, #8]
 8008c86:	e7f4      	b.n	8008c72 <_dtoa_r+0x902>
 8008c88:	d085      	beq.n	8008b96 <_dtoa_r+0x826>
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	301c      	adds	r0, #28
 8008c8e:	e77d      	b.n	8008b8c <_dtoa_r+0x81c>
 8008c90:	40240000 	.word	0x40240000
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc38      	bgt.n	8008d0c <_dtoa_r+0x99c>
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	dd35      	ble.n	8008d0c <_dtoa_r+0x99c>
 8008ca0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	d10d      	bne.n	8008cc6 <_dtoa_r+0x956>
 8008caa:	4631      	mov	r1, r6
 8008cac:	464b      	mov	r3, r9
 8008cae:	2205      	movs	r2, #5
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 f9c5 	bl	8009040 <__multadd>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4606      	mov	r6, r0
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 fbdc 	bl	8009478 <__mcmp>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f73f adbd 	bgt.w	8008840 <_dtoa_r+0x4d0>
 8008cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc8:	9d00      	ldr	r5, [sp, #0]
 8008cca:	ea6f 0a03 	mvn.w	sl, r3
 8008cce:	f04f 0800 	mov.w	r8, #0
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 f991 	bl	8008ffc <_Bfree>
 8008cda:	2f00      	cmp	r7, #0
 8008cdc:	f43f aeb4 	beq.w	8008a48 <_dtoa_r+0x6d8>
 8008ce0:	f1b8 0f00 	cmp.w	r8, #0
 8008ce4:	d005      	beq.n	8008cf2 <_dtoa_r+0x982>
 8008ce6:	45b8      	cmp	r8, r7
 8008ce8:	d003      	beq.n	8008cf2 <_dtoa_r+0x982>
 8008cea:	4641      	mov	r1, r8
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 f985 	bl	8008ffc <_Bfree>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 f981 	bl	8008ffc <_Bfree>
 8008cfa:	e6a5      	b.n	8008a48 <_dtoa_r+0x6d8>
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	4637      	mov	r7, r6
 8008d00:	e7e1      	b.n	8008cc6 <_dtoa_r+0x956>
 8008d02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d08:	4637      	mov	r7, r6
 8008d0a:	e599      	b.n	8008840 <_dtoa_r+0x4d0>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80fd 	beq.w	8008f12 <_dtoa_r+0xba2>
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	dd05      	ble.n	8008d28 <_dtoa_r+0x9b8>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fb3d 	bl	80093a0 <__lshift>
 8008d26:	4607      	mov	r7, r0
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d05c      	beq.n	8008de8 <_dtoa_r+0xa78>
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f923 	bl	8008f7c <_Balloc>
 8008d36:	4605      	mov	r5, r0
 8008d38:	b928      	cbnz	r0, 8008d46 <_dtoa_r+0x9d6>
 8008d3a:	4b80      	ldr	r3, [pc, #512]	; (8008f3c <_dtoa_r+0xbcc>)
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d42:	f7ff bb2e 	b.w	80083a2 <_dtoa_r+0x32>
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	3202      	adds	r2, #2
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	f107 010c 	add.w	r1, r7, #12
 8008d50:	300c      	adds	r0, #12
 8008d52:	f000 f905 	bl	8008f60 <memcpy>
 8008d56:	2201      	movs	r2, #1
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fb20 	bl	80093a0 <__lshift>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	444b      	add	r3, r9
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9b02      	ldr	r3, [sp, #8]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	46b8      	mov	r8, r7
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	4607      	mov	r7, r0
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4658      	mov	r0, fp
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	f7ff fa69 	bl	8008258 <quorem>
 8008d86:	4603      	mov	r3, r0
 8008d88:	3330      	adds	r3, #48	; 0x30
 8008d8a:	9004      	str	r0, [sp, #16]
 8008d8c:	4641      	mov	r1, r8
 8008d8e:	4658      	mov	r0, fp
 8008d90:	9308      	str	r3, [sp, #32]
 8008d92:	f000 fb71 	bl	8009478 <__mcmp>
 8008d96:	463a      	mov	r2, r7
 8008d98:	4681      	mov	r9, r0
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fb87 	bl	80094b0 <__mdiff>
 8008da2:	68c2      	ldr	r2, [r0, #12]
 8008da4:	9b08      	ldr	r3, [sp, #32]
 8008da6:	4605      	mov	r5, r0
 8008da8:	bb02      	cbnz	r2, 8008dec <_dtoa_r+0xa7c>
 8008daa:	4601      	mov	r1, r0
 8008dac:	4658      	mov	r0, fp
 8008dae:	f000 fb63 	bl	8009478 <__mcmp>
 8008db2:	9b08      	ldr	r3, [sp, #32]
 8008db4:	4602      	mov	r2, r0
 8008db6:	4629      	mov	r1, r5
 8008db8:	4620      	mov	r0, r4
 8008dba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008dbe:	f000 f91d 	bl	8008ffc <_Bfree>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc6:	9d01      	ldr	r5, [sp, #4]
 8008dc8:	ea43 0102 	orr.w	r1, r3, r2
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	d10d      	bne.n	8008df0 <_dtoa_r+0xa80>
 8008dd4:	2b39      	cmp	r3, #57	; 0x39
 8008dd6:	d029      	beq.n	8008e2c <_dtoa_r+0xabc>
 8008dd8:	f1b9 0f00 	cmp.w	r9, #0
 8008ddc:	dd01      	ble.n	8008de2 <_dtoa_r+0xa72>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	3331      	adds	r3, #49	; 0x31
 8008de2:	9a02      	ldr	r2, [sp, #8]
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	e774      	b.n	8008cd2 <_dtoa_r+0x962>
 8008de8:	4638      	mov	r0, r7
 8008dea:	e7b9      	b.n	8008d60 <_dtoa_r+0x9f0>
 8008dec:	2201      	movs	r2, #1
 8008dee:	e7e2      	b.n	8008db6 <_dtoa_r+0xa46>
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	db06      	blt.n	8008e04 <_dtoa_r+0xa94>
 8008df6:	9905      	ldr	r1, [sp, #20]
 8008df8:	ea41 0909 	orr.w	r9, r1, r9
 8008dfc:	9906      	ldr	r1, [sp, #24]
 8008dfe:	ea59 0101 	orrs.w	r1, r9, r1
 8008e02:	d120      	bne.n	8008e46 <_dtoa_r+0xad6>
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	ddec      	ble.n	8008de2 <_dtoa_r+0xa72>
 8008e08:	4659      	mov	r1, fp
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	f000 fac6 	bl	80093a0 <__lshift>
 8008e14:	4631      	mov	r1, r6
 8008e16:	4683      	mov	fp, r0
 8008e18:	f000 fb2e 	bl	8009478 <__mcmp>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	dc02      	bgt.n	8008e28 <_dtoa_r+0xab8>
 8008e22:	d1de      	bne.n	8008de2 <_dtoa_r+0xa72>
 8008e24:	07da      	lsls	r2, r3, #31
 8008e26:	d5dc      	bpl.n	8008de2 <_dtoa_r+0xa72>
 8008e28:	2b39      	cmp	r3, #57	; 0x39
 8008e2a:	d1d8      	bne.n	8008dde <_dtoa_r+0xa6e>
 8008e2c:	9a02      	ldr	r2, [sp, #8]
 8008e2e:	2339      	movs	r3, #57	; 0x39
 8008e30:	7013      	strb	r3, [r2, #0]
 8008e32:	462b      	mov	r3, r5
 8008e34:	461d      	mov	r5, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e3c:	2a39      	cmp	r2, #57	; 0x39
 8008e3e:	d050      	beq.n	8008ee2 <_dtoa_r+0xb72>
 8008e40:	3201      	adds	r2, #1
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	e745      	b.n	8008cd2 <_dtoa_r+0x962>
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	dd03      	ble.n	8008e52 <_dtoa_r+0xae2>
 8008e4a:	2b39      	cmp	r3, #57	; 0x39
 8008e4c:	d0ee      	beq.n	8008e2c <_dtoa_r+0xabc>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	e7c7      	b.n	8008de2 <_dtoa_r+0xa72>
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	9907      	ldr	r1, [sp, #28]
 8008e56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e5a:	428a      	cmp	r2, r1
 8008e5c:	d02a      	beq.n	8008eb4 <_dtoa_r+0xb44>
 8008e5e:	4659      	mov	r1, fp
 8008e60:	2300      	movs	r3, #0
 8008e62:	220a      	movs	r2, #10
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 f8eb 	bl	8009040 <__multadd>
 8008e6a:	45b8      	cmp	r8, r7
 8008e6c:	4683      	mov	fp, r0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	f04f 020a 	mov.w	r2, #10
 8008e76:	4641      	mov	r1, r8
 8008e78:	4620      	mov	r0, r4
 8008e7a:	d107      	bne.n	8008e8c <_dtoa_r+0xb1c>
 8008e7c:	f000 f8e0 	bl	8009040 <__multadd>
 8008e80:	4680      	mov	r8, r0
 8008e82:	4607      	mov	r7, r0
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	3301      	adds	r3, #1
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	e775      	b.n	8008d78 <_dtoa_r+0xa08>
 8008e8c:	f000 f8d8 	bl	8009040 <__multadd>
 8008e90:	4639      	mov	r1, r7
 8008e92:	4680      	mov	r8, r0
 8008e94:	2300      	movs	r3, #0
 8008e96:	220a      	movs	r2, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 f8d1 	bl	8009040 <__multadd>
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	e7f0      	b.n	8008e84 <_dtoa_r+0xb14>
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	9a00      	ldr	r2, [sp, #0]
 8008ea8:	bfcc      	ite	gt
 8008eaa:	464d      	movgt	r5, r9
 8008eac:	2501      	movle	r5, #1
 8008eae:	4415      	add	r5, r2
 8008eb0:	f04f 0800 	mov.w	r8, #0
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	f000 fa70 	bl	80093a0 <__lshift>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4683      	mov	fp, r0
 8008ec4:	f000 fad8 	bl	8009478 <__mcmp>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dcb2      	bgt.n	8008e32 <_dtoa_r+0xac2>
 8008ecc:	d102      	bne.n	8008ed4 <_dtoa_r+0xb64>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	07db      	lsls	r3, r3, #31
 8008ed2:	d4ae      	bmi.n	8008e32 <_dtoa_r+0xac2>
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	461d      	mov	r5, r3
 8008ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008edc:	2a30      	cmp	r2, #48	; 0x30
 8008ede:	d0fa      	beq.n	8008ed6 <_dtoa_r+0xb66>
 8008ee0:	e6f7      	b.n	8008cd2 <_dtoa_r+0x962>
 8008ee2:	9a00      	ldr	r2, [sp, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d1a5      	bne.n	8008e34 <_dtoa_r+0xac4>
 8008ee8:	f10a 0a01 	add.w	sl, sl, #1
 8008eec:	2331      	movs	r3, #49	; 0x31
 8008eee:	e779      	b.n	8008de4 <_dtoa_r+0xa74>
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <_dtoa_r+0xbd0>)
 8008ef2:	f7ff baaf 	b.w	8008454 <_dtoa_r+0xe4>
 8008ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f aa86 	bne.w	800840a <_dtoa_r+0x9a>
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <_dtoa_r+0xbd4>)
 8008f00:	f7ff baa8 	b.w	8008454 <_dtoa_r+0xe4>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	dc03      	bgt.n	8008f12 <_dtoa_r+0xba2>
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	f73f aec9 	bgt.w	8008ca4 <_dtoa_r+0x934>
 8008f12:	9d00      	ldr	r5, [sp, #0]
 8008f14:	4631      	mov	r1, r6
 8008f16:	4658      	mov	r0, fp
 8008f18:	f7ff f99e 	bl	8008258 <quorem>
 8008f1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f20:	f805 3b01 	strb.w	r3, [r5], #1
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	1aaa      	subs	r2, r5, r2
 8008f28:	4591      	cmp	r9, r2
 8008f2a:	ddba      	ble.n	8008ea2 <_dtoa_r+0xb32>
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	2300      	movs	r3, #0
 8008f30:	220a      	movs	r2, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f884 	bl	8009040 <__multadd>
 8008f38:	4683      	mov	fp, r0
 8008f3a:	e7eb      	b.n	8008f14 <_dtoa_r+0xba4>
 8008f3c:	0800a77f 	.word	0x0800a77f
 8008f40:	0800a6d8 	.word	0x0800a6d8
 8008f44:	0800a6fc 	.word	0x0800a6fc

08008f48 <_localeconv_r>:
 8008f48:	4800      	ldr	r0, [pc, #0]	; (8008f4c <_localeconv_r+0x4>)
 8008f4a:	4770      	bx	lr
 8008f4c:	20000164 	.word	0x20000164

08008f50 <malloc>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <malloc+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f000 bbef 	b.w	8009738 <_malloc_r>
 8008f5a:	bf00      	nop
 8008f5c:	20000010 	.word	0x20000010

08008f60 <memcpy>:
 8008f60:	440a      	add	r2, r1
 8008f62:	4291      	cmp	r1, r2
 8008f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f68:	d100      	bne.n	8008f6c <memcpy+0xc>
 8008f6a:	4770      	bx	lr
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f76:	4291      	cmp	r1, r2
 8008f78:	d1f9      	bne.n	8008f6e <memcpy+0xe>
 8008f7a:	bd10      	pop	{r4, pc}

08008f7c <_Balloc>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	b976      	cbnz	r6, 8008fa4 <_Balloc+0x28>
 8008f86:	2010      	movs	r0, #16
 8008f88:	f7ff ffe2 	bl	8008f50 <malloc>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f90:	b920      	cbnz	r0, 8008f9c <_Balloc+0x20>
 8008f92:	4b18      	ldr	r3, [pc, #96]	; (8008ff4 <_Balloc+0x78>)
 8008f94:	4818      	ldr	r0, [pc, #96]	; (8008ff8 <_Balloc+0x7c>)
 8008f96:	2166      	movs	r1, #102	; 0x66
 8008f98:	f000 fd94 	bl	8009ac4 <__assert_func>
 8008f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fa0:	6006      	str	r6, [r0, #0]
 8008fa2:	60c6      	str	r6, [r0, #12]
 8008fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fa6:	68f3      	ldr	r3, [r6, #12]
 8008fa8:	b183      	cbz	r3, 8008fcc <_Balloc+0x50>
 8008faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fb2:	b9b8      	cbnz	r0, 8008fe4 <_Balloc+0x68>
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008fba:	1d72      	adds	r2, r6, #5
 8008fbc:	0092      	lsls	r2, r2, #2
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fb5a 	bl	8009678 <_calloc_r>
 8008fc4:	b160      	cbz	r0, 8008fe0 <_Balloc+0x64>
 8008fc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fca:	e00e      	b.n	8008fea <_Balloc+0x6e>
 8008fcc:	2221      	movs	r2, #33	; 0x21
 8008fce:	2104      	movs	r1, #4
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f000 fb51 	bl	8009678 <_calloc_r>
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	60f0      	str	r0, [r6, #12]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1e4      	bne.n	8008faa <_Balloc+0x2e>
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	6802      	ldr	r2, [r0, #0]
 8008fe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fea:	2300      	movs	r3, #0
 8008fec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ff0:	e7f7      	b.n	8008fe2 <_Balloc+0x66>
 8008ff2:	bf00      	nop
 8008ff4:	0800a709 	.word	0x0800a709
 8008ff8:	0800a790 	.word	0x0800a790

08008ffc <_Bfree>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009000:	4605      	mov	r5, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b976      	cbnz	r6, 8009024 <_Bfree+0x28>
 8009006:	2010      	movs	r0, #16
 8009008:	f7ff ffa2 	bl	8008f50 <malloc>
 800900c:	4602      	mov	r2, r0
 800900e:	6268      	str	r0, [r5, #36]	; 0x24
 8009010:	b920      	cbnz	r0, 800901c <_Bfree+0x20>
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <_Bfree+0x3c>)
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <_Bfree+0x40>)
 8009016:	218a      	movs	r1, #138	; 0x8a
 8009018:	f000 fd54 	bl	8009ac4 <__assert_func>
 800901c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009020:	6006      	str	r6, [r0, #0]
 8009022:	60c6      	str	r6, [r0, #12]
 8009024:	b13c      	cbz	r4, 8009036 <_Bfree+0x3a>
 8009026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009028:	6862      	ldr	r2, [r4, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009030:	6021      	str	r1, [r4, #0]
 8009032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	0800a709 	.word	0x0800a709
 800903c:	0800a790 	.word	0x0800a790

08009040 <__multadd>:
 8009040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009044:	690e      	ldr	r6, [r1, #16]
 8009046:	4607      	mov	r7, r0
 8009048:	4698      	mov	r8, r3
 800904a:	460c      	mov	r4, r1
 800904c:	f101 0014 	add.w	r0, r1, #20
 8009050:	2300      	movs	r3, #0
 8009052:	6805      	ldr	r5, [r0, #0]
 8009054:	b2a9      	uxth	r1, r5
 8009056:	fb02 8101 	mla	r1, r2, r1, r8
 800905a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800905e:	0c2d      	lsrs	r5, r5, #16
 8009060:	fb02 c505 	mla	r5, r2, r5, ip
 8009064:	b289      	uxth	r1, r1
 8009066:	3301      	adds	r3, #1
 8009068:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800906c:	429e      	cmp	r6, r3
 800906e:	f840 1b04 	str.w	r1, [r0], #4
 8009072:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009076:	dcec      	bgt.n	8009052 <__multadd+0x12>
 8009078:	f1b8 0f00 	cmp.w	r8, #0
 800907c:	d022      	beq.n	80090c4 <__multadd+0x84>
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	42b3      	cmp	r3, r6
 8009082:	dc19      	bgt.n	80090b8 <__multadd+0x78>
 8009084:	6861      	ldr	r1, [r4, #4]
 8009086:	4638      	mov	r0, r7
 8009088:	3101      	adds	r1, #1
 800908a:	f7ff ff77 	bl	8008f7c <_Balloc>
 800908e:	4605      	mov	r5, r0
 8009090:	b928      	cbnz	r0, 800909e <__multadd+0x5e>
 8009092:	4602      	mov	r2, r0
 8009094:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <__multadd+0x8c>)
 8009096:	480e      	ldr	r0, [pc, #56]	; (80090d0 <__multadd+0x90>)
 8009098:	21b5      	movs	r1, #181	; 0xb5
 800909a:	f000 fd13 	bl	8009ac4 <__assert_func>
 800909e:	6922      	ldr	r2, [r4, #16]
 80090a0:	3202      	adds	r2, #2
 80090a2:	f104 010c 	add.w	r1, r4, #12
 80090a6:	0092      	lsls	r2, r2, #2
 80090a8:	300c      	adds	r0, #12
 80090aa:	f7ff ff59 	bl	8008f60 <memcpy>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4638      	mov	r0, r7
 80090b2:	f7ff ffa3 	bl	8008ffc <_Bfree>
 80090b6:	462c      	mov	r4, r5
 80090b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090bc:	3601      	adds	r6, #1
 80090be:	f8c3 8014 	str.w	r8, [r3, #20]
 80090c2:	6126      	str	r6, [r4, #16]
 80090c4:	4620      	mov	r0, r4
 80090c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ca:	bf00      	nop
 80090cc:	0800a77f 	.word	0x0800a77f
 80090d0:	0800a790 	.word	0x0800a790

080090d4 <__hi0bits>:
 80090d4:	0c03      	lsrs	r3, r0, #16
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	b9d3      	cbnz	r3, 8009110 <__hi0bits+0x3c>
 80090da:	0400      	lsls	r0, r0, #16
 80090dc:	2310      	movs	r3, #16
 80090de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090e2:	bf04      	itt	eq
 80090e4:	0200      	lsleq	r0, r0, #8
 80090e6:	3308      	addeq	r3, #8
 80090e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090ec:	bf04      	itt	eq
 80090ee:	0100      	lsleq	r0, r0, #4
 80090f0:	3304      	addeq	r3, #4
 80090f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090f6:	bf04      	itt	eq
 80090f8:	0080      	lsleq	r0, r0, #2
 80090fa:	3302      	addeq	r3, #2
 80090fc:	2800      	cmp	r0, #0
 80090fe:	db05      	blt.n	800910c <__hi0bits+0x38>
 8009100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009104:	f103 0301 	add.w	r3, r3, #1
 8009108:	bf08      	it	eq
 800910a:	2320      	moveq	r3, #32
 800910c:	4618      	mov	r0, r3
 800910e:	4770      	bx	lr
 8009110:	2300      	movs	r3, #0
 8009112:	e7e4      	b.n	80090de <__hi0bits+0xa>

08009114 <__lo0bits>:
 8009114:	6803      	ldr	r3, [r0, #0]
 8009116:	f013 0207 	ands.w	r2, r3, #7
 800911a:	4601      	mov	r1, r0
 800911c:	d00b      	beq.n	8009136 <__lo0bits+0x22>
 800911e:	07da      	lsls	r2, r3, #31
 8009120:	d424      	bmi.n	800916c <__lo0bits+0x58>
 8009122:	0798      	lsls	r0, r3, #30
 8009124:	bf49      	itett	mi
 8009126:	085b      	lsrmi	r3, r3, #1
 8009128:	089b      	lsrpl	r3, r3, #2
 800912a:	2001      	movmi	r0, #1
 800912c:	600b      	strmi	r3, [r1, #0]
 800912e:	bf5c      	itt	pl
 8009130:	600b      	strpl	r3, [r1, #0]
 8009132:	2002      	movpl	r0, #2
 8009134:	4770      	bx	lr
 8009136:	b298      	uxth	r0, r3
 8009138:	b9b0      	cbnz	r0, 8009168 <__lo0bits+0x54>
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	2010      	movs	r0, #16
 800913e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009142:	bf04      	itt	eq
 8009144:	0a1b      	lsreq	r3, r3, #8
 8009146:	3008      	addeq	r0, #8
 8009148:	071a      	lsls	r2, r3, #28
 800914a:	bf04      	itt	eq
 800914c:	091b      	lsreq	r3, r3, #4
 800914e:	3004      	addeq	r0, #4
 8009150:	079a      	lsls	r2, r3, #30
 8009152:	bf04      	itt	eq
 8009154:	089b      	lsreq	r3, r3, #2
 8009156:	3002      	addeq	r0, #2
 8009158:	07da      	lsls	r2, r3, #31
 800915a:	d403      	bmi.n	8009164 <__lo0bits+0x50>
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	f100 0001 	add.w	r0, r0, #1
 8009162:	d005      	beq.n	8009170 <__lo0bits+0x5c>
 8009164:	600b      	str	r3, [r1, #0]
 8009166:	4770      	bx	lr
 8009168:	4610      	mov	r0, r2
 800916a:	e7e8      	b.n	800913e <__lo0bits+0x2a>
 800916c:	2000      	movs	r0, #0
 800916e:	4770      	bx	lr
 8009170:	2020      	movs	r0, #32
 8009172:	4770      	bx	lr

08009174 <__i2b>:
 8009174:	b510      	push	{r4, lr}
 8009176:	460c      	mov	r4, r1
 8009178:	2101      	movs	r1, #1
 800917a:	f7ff feff 	bl	8008f7c <_Balloc>
 800917e:	4602      	mov	r2, r0
 8009180:	b928      	cbnz	r0, 800918e <__i2b+0x1a>
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <__i2b+0x24>)
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <__i2b+0x28>)
 8009186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800918a:	f000 fc9b 	bl	8009ac4 <__assert_func>
 800918e:	2301      	movs	r3, #1
 8009190:	6144      	str	r4, [r0, #20]
 8009192:	6103      	str	r3, [r0, #16]
 8009194:	bd10      	pop	{r4, pc}
 8009196:	bf00      	nop
 8009198:	0800a77f 	.word	0x0800a77f
 800919c:	0800a790 	.word	0x0800a790

080091a0 <__multiply>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4614      	mov	r4, r2
 80091a6:	690a      	ldr	r2, [r1, #16]
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	bfb8      	it	lt
 80091ae:	460b      	movlt	r3, r1
 80091b0:	460d      	mov	r5, r1
 80091b2:	bfbc      	itt	lt
 80091b4:	4625      	movlt	r5, r4
 80091b6:	461c      	movlt	r4, r3
 80091b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091c0:	68ab      	ldr	r3, [r5, #8]
 80091c2:	6869      	ldr	r1, [r5, #4]
 80091c4:	eb0a 0709 	add.w	r7, sl, r9
 80091c8:	42bb      	cmp	r3, r7
 80091ca:	b085      	sub	sp, #20
 80091cc:	bfb8      	it	lt
 80091ce:	3101      	addlt	r1, #1
 80091d0:	f7ff fed4 	bl	8008f7c <_Balloc>
 80091d4:	b930      	cbnz	r0, 80091e4 <__multiply+0x44>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b42      	ldr	r3, [pc, #264]	; (80092e4 <__multiply+0x144>)
 80091da:	4843      	ldr	r0, [pc, #268]	; (80092e8 <__multiply+0x148>)
 80091dc:	f240 115d 	movw	r1, #349	; 0x15d
 80091e0:	f000 fc70 	bl	8009ac4 <__assert_func>
 80091e4:	f100 0614 	add.w	r6, r0, #20
 80091e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80091ec:	4633      	mov	r3, r6
 80091ee:	2200      	movs	r2, #0
 80091f0:	4543      	cmp	r3, r8
 80091f2:	d31e      	bcc.n	8009232 <__multiply+0x92>
 80091f4:	f105 0c14 	add.w	ip, r5, #20
 80091f8:	f104 0314 	add.w	r3, r4, #20
 80091fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009200:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009204:	9202      	str	r2, [sp, #8]
 8009206:	ebac 0205 	sub.w	r2, ip, r5
 800920a:	3a15      	subs	r2, #21
 800920c:	f022 0203 	bic.w	r2, r2, #3
 8009210:	3204      	adds	r2, #4
 8009212:	f105 0115 	add.w	r1, r5, #21
 8009216:	458c      	cmp	ip, r1
 8009218:	bf38      	it	cc
 800921a:	2204      	movcc	r2, #4
 800921c:	9201      	str	r2, [sp, #4]
 800921e:	9a02      	ldr	r2, [sp, #8]
 8009220:	9303      	str	r3, [sp, #12]
 8009222:	429a      	cmp	r2, r3
 8009224:	d808      	bhi.n	8009238 <__multiply+0x98>
 8009226:	2f00      	cmp	r7, #0
 8009228:	dc55      	bgt.n	80092d6 <__multiply+0x136>
 800922a:	6107      	str	r7, [r0, #16]
 800922c:	b005      	add	sp, #20
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	f843 2b04 	str.w	r2, [r3], #4
 8009236:	e7db      	b.n	80091f0 <__multiply+0x50>
 8009238:	f8b3 a000 	ldrh.w	sl, [r3]
 800923c:	f1ba 0f00 	cmp.w	sl, #0
 8009240:	d020      	beq.n	8009284 <__multiply+0xe4>
 8009242:	f105 0e14 	add.w	lr, r5, #20
 8009246:	46b1      	mov	r9, r6
 8009248:	2200      	movs	r2, #0
 800924a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800924e:	f8d9 b000 	ldr.w	fp, [r9]
 8009252:	b2a1      	uxth	r1, r4
 8009254:	fa1f fb8b 	uxth.w	fp, fp
 8009258:	fb0a b101 	mla	r1, sl, r1, fp
 800925c:	4411      	add	r1, r2
 800925e:	f8d9 2000 	ldr.w	r2, [r9]
 8009262:	0c24      	lsrs	r4, r4, #16
 8009264:	0c12      	lsrs	r2, r2, #16
 8009266:	fb0a 2404 	mla	r4, sl, r4, r2
 800926a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800926e:	b289      	uxth	r1, r1
 8009270:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009274:	45f4      	cmp	ip, lr
 8009276:	f849 1b04 	str.w	r1, [r9], #4
 800927a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800927e:	d8e4      	bhi.n	800924a <__multiply+0xaa>
 8009280:	9901      	ldr	r1, [sp, #4]
 8009282:	5072      	str	r2, [r6, r1]
 8009284:	9a03      	ldr	r2, [sp, #12]
 8009286:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800928a:	3304      	adds	r3, #4
 800928c:	f1b9 0f00 	cmp.w	r9, #0
 8009290:	d01f      	beq.n	80092d2 <__multiply+0x132>
 8009292:	6834      	ldr	r4, [r6, #0]
 8009294:	f105 0114 	add.w	r1, r5, #20
 8009298:	46b6      	mov	lr, r6
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	880a      	ldrh	r2, [r1, #0]
 80092a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80092a4:	fb09 b202 	mla	r2, r9, r2, fp
 80092a8:	4492      	add	sl, r2
 80092aa:	b2a4      	uxth	r4, r4
 80092ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80092b0:	f84e 4b04 	str.w	r4, [lr], #4
 80092b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80092b8:	f8be 2000 	ldrh.w	r2, [lr]
 80092bc:	0c24      	lsrs	r4, r4, #16
 80092be:	fb09 2404 	mla	r4, r9, r4, r2
 80092c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80092c6:	458c      	cmp	ip, r1
 80092c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092cc:	d8e7      	bhi.n	800929e <__multiply+0xfe>
 80092ce:	9a01      	ldr	r2, [sp, #4]
 80092d0:	50b4      	str	r4, [r6, r2]
 80092d2:	3604      	adds	r6, #4
 80092d4:	e7a3      	b.n	800921e <__multiply+0x7e>
 80092d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1a5      	bne.n	800922a <__multiply+0x8a>
 80092de:	3f01      	subs	r7, #1
 80092e0:	e7a1      	b.n	8009226 <__multiply+0x86>
 80092e2:	bf00      	nop
 80092e4:	0800a77f 	.word	0x0800a77f
 80092e8:	0800a790 	.word	0x0800a790

080092ec <__pow5mult>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	4615      	mov	r5, r2
 80092f2:	f012 0203 	ands.w	r2, r2, #3
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	d007      	beq.n	800930c <__pow5mult+0x20>
 80092fc:	4c25      	ldr	r4, [pc, #148]	; (8009394 <__pow5mult+0xa8>)
 80092fe:	3a01      	subs	r2, #1
 8009300:	2300      	movs	r3, #0
 8009302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009306:	f7ff fe9b 	bl	8009040 <__multadd>
 800930a:	4607      	mov	r7, r0
 800930c:	10ad      	asrs	r5, r5, #2
 800930e:	d03d      	beq.n	800938c <__pow5mult+0xa0>
 8009310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009312:	b97c      	cbnz	r4, 8009334 <__pow5mult+0x48>
 8009314:	2010      	movs	r0, #16
 8009316:	f7ff fe1b 	bl	8008f50 <malloc>
 800931a:	4602      	mov	r2, r0
 800931c:	6270      	str	r0, [r6, #36]	; 0x24
 800931e:	b928      	cbnz	r0, 800932c <__pow5mult+0x40>
 8009320:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <__pow5mult+0xac>)
 8009322:	481e      	ldr	r0, [pc, #120]	; (800939c <__pow5mult+0xb0>)
 8009324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009328:	f000 fbcc 	bl	8009ac4 <__assert_func>
 800932c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009330:	6004      	str	r4, [r0, #0]
 8009332:	60c4      	str	r4, [r0, #12]
 8009334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800933c:	b94c      	cbnz	r4, 8009352 <__pow5mult+0x66>
 800933e:	f240 2171 	movw	r1, #625	; 0x271
 8009342:	4630      	mov	r0, r6
 8009344:	f7ff ff16 	bl	8009174 <__i2b>
 8009348:	2300      	movs	r3, #0
 800934a:	f8c8 0008 	str.w	r0, [r8, #8]
 800934e:	4604      	mov	r4, r0
 8009350:	6003      	str	r3, [r0, #0]
 8009352:	f04f 0900 	mov.w	r9, #0
 8009356:	07eb      	lsls	r3, r5, #31
 8009358:	d50a      	bpl.n	8009370 <__pow5mult+0x84>
 800935a:	4639      	mov	r1, r7
 800935c:	4622      	mov	r2, r4
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff1e 	bl	80091a0 <__multiply>
 8009364:	4639      	mov	r1, r7
 8009366:	4680      	mov	r8, r0
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fe47 	bl	8008ffc <_Bfree>
 800936e:	4647      	mov	r7, r8
 8009370:	106d      	asrs	r5, r5, #1
 8009372:	d00b      	beq.n	800938c <__pow5mult+0xa0>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	b938      	cbnz	r0, 8009388 <__pow5mult+0x9c>
 8009378:	4622      	mov	r2, r4
 800937a:	4621      	mov	r1, r4
 800937c:	4630      	mov	r0, r6
 800937e:	f7ff ff0f 	bl	80091a0 <__multiply>
 8009382:	6020      	str	r0, [r4, #0]
 8009384:	f8c0 9000 	str.w	r9, [r0]
 8009388:	4604      	mov	r4, r0
 800938a:	e7e4      	b.n	8009356 <__pow5mult+0x6a>
 800938c:	4638      	mov	r0, r7
 800938e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009392:	bf00      	nop
 8009394:	0800a8e0 	.word	0x0800a8e0
 8009398:	0800a709 	.word	0x0800a709
 800939c:	0800a790 	.word	0x0800a790

080093a0 <__lshift>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	460c      	mov	r4, r1
 80093a6:	6849      	ldr	r1, [r1, #4]
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	4607      	mov	r7, r0
 80093b2:	4691      	mov	r9, r2
 80093b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093b8:	f108 0601 	add.w	r6, r8, #1
 80093bc:	42b3      	cmp	r3, r6
 80093be:	db0b      	blt.n	80093d8 <__lshift+0x38>
 80093c0:	4638      	mov	r0, r7
 80093c2:	f7ff fddb 	bl	8008f7c <_Balloc>
 80093c6:	4605      	mov	r5, r0
 80093c8:	b948      	cbnz	r0, 80093de <__lshift+0x3e>
 80093ca:	4602      	mov	r2, r0
 80093cc:	4b28      	ldr	r3, [pc, #160]	; (8009470 <__lshift+0xd0>)
 80093ce:	4829      	ldr	r0, [pc, #164]	; (8009474 <__lshift+0xd4>)
 80093d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093d4:	f000 fb76 	bl	8009ac4 <__assert_func>
 80093d8:	3101      	adds	r1, #1
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	e7ee      	b.n	80093bc <__lshift+0x1c>
 80093de:	2300      	movs	r3, #0
 80093e0:	f100 0114 	add.w	r1, r0, #20
 80093e4:	f100 0210 	add.w	r2, r0, #16
 80093e8:	4618      	mov	r0, r3
 80093ea:	4553      	cmp	r3, sl
 80093ec:	db33      	blt.n	8009456 <__lshift+0xb6>
 80093ee:	6920      	ldr	r0, [r4, #16]
 80093f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093f4:	f104 0314 	add.w	r3, r4, #20
 80093f8:	f019 091f 	ands.w	r9, r9, #31
 80093fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009404:	d02b      	beq.n	800945e <__lshift+0xbe>
 8009406:	f1c9 0e20 	rsb	lr, r9, #32
 800940a:	468a      	mov	sl, r1
 800940c:	2200      	movs	r2, #0
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	fa00 f009 	lsl.w	r0, r0, r9
 8009414:	4302      	orrs	r2, r0
 8009416:	f84a 2b04 	str.w	r2, [sl], #4
 800941a:	f853 2b04 	ldr.w	r2, [r3], #4
 800941e:	459c      	cmp	ip, r3
 8009420:	fa22 f20e 	lsr.w	r2, r2, lr
 8009424:	d8f3      	bhi.n	800940e <__lshift+0x6e>
 8009426:	ebac 0304 	sub.w	r3, ip, r4
 800942a:	3b15      	subs	r3, #21
 800942c:	f023 0303 	bic.w	r3, r3, #3
 8009430:	3304      	adds	r3, #4
 8009432:	f104 0015 	add.w	r0, r4, #21
 8009436:	4584      	cmp	ip, r0
 8009438:	bf38      	it	cc
 800943a:	2304      	movcc	r3, #4
 800943c:	50ca      	str	r2, [r1, r3]
 800943e:	b10a      	cbz	r2, 8009444 <__lshift+0xa4>
 8009440:	f108 0602 	add.w	r6, r8, #2
 8009444:	3e01      	subs	r6, #1
 8009446:	4638      	mov	r0, r7
 8009448:	612e      	str	r6, [r5, #16]
 800944a:	4621      	mov	r1, r4
 800944c:	f7ff fdd6 	bl	8008ffc <_Bfree>
 8009450:	4628      	mov	r0, r5
 8009452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009456:	f842 0f04 	str.w	r0, [r2, #4]!
 800945a:	3301      	adds	r3, #1
 800945c:	e7c5      	b.n	80093ea <__lshift+0x4a>
 800945e:	3904      	subs	r1, #4
 8009460:	f853 2b04 	ldr.w	r2, [r3], #4
 8009464:	f841 2f04 	str.w	r2, [r1, #4]!
 8009468:	459c      	cmp	ip, r3
 800946a:	d8f9      	bhi.n	8009460 <__lshift+0xc0>
 800946c:	e7ea      	b.n	8009444 <__lshift+0xa4>
 800946e:	bf00      	nop
 8009470:	0800a77f 	.word	0x0800a77f
 8009474:	0800a790 	.word	0x0800a790

08009478 <__mcmp>:
 8009478:	b530      	push	{r4, r5, lr}
 800947a:	6902      	ldr	r2, [r0, #16]
 800947c:	690c      	ldr	r4, [r1, #16]
 800947e:	1b12      	subs	r2, r2, r4
 8009480:	d10e      	bne.n	80094a0 <__mcmp+0x28>
 8009482:	f100 0314 	add.w	r3, r0, #20
 8009486:	3114      	adds	r1, #20
 8009488:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800948c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009490:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009494:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009498:	42a5      	cmp	r5, r4
 800949a:	d003      	beq.n	80094a4 <__mcmp+0x2c>
 800949c:	d305      	bcc.n	80094aa <__mcmp+0x32>
 800949e:	2201      	movs	r2, #1
 80094a0:	4610      	mov	r0, r2
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	4283      	cmp	r3, r0
 80094a6:	d3f3      	bcc.n	8009490 <__mcmp+0x18>
 80094a8:	e7fa      	b.n	80094a0 <__mcmp+0x28>
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295
 80094ae:	e7f7      	b.n	80094a0 <__mcmp+0x28>

080094b0 <__mdiff>:
 80094b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	4606      	mov	r6, r0
 80094b8:	4611      	mov	r1, r2
 80094ba:	4620      	mov	r0, r4
 80094bc:	4617      	mov	r7, r2
 80094be:	f7ff ffdb 	bl	8009478 <__mcmp>
 80094c2:	1e05      	subs	r5, r0, #0
 80094c4:	d110      	bne.n	80094e8 <__mdiff+0x38>
 80094c6:	4629      	mov	r1, r5
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff fd57 	bl	8008f7c <_Balloc>
 80094ce:	b930      	cbnz	r0, 80094de <__mdiff+0x2e>
 80094d0:	4b39      	ldr	r3, [pc, #228]	; (80095b8 <__mdiff+0x108>)
 80094d2:	4602      	mov	r2, r0
 80094d4:	f240 2132 	movw	r1, #562	; 0x232
 80094d8:	4838      	ldr	r0, [pc, #224]	; (80095bc <__mdiff+0x10c>)
 80094da:	f000 faf3 	bl	8009ac4 <__assert_func>
 80094de:	2301      	movs	r3, #1
 80094e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	bfa4      	itt	ge
 80094ea:	463b      	movge	r3, r7
 80094ec:	4627      	movge	r7, r4
 80094ee:	4630      	mov	r0, r6
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	bfa6      	itte	ge
 80094f4:	461c      	movge	r4, r3
 80094f6:	2500      	movge	r5, #0
 80094f8:	2501      	movlt	r5, #1
 80094fa:	f7ff fd3f 	bl	8008f7c <_Balloc>
 80094fe:	b920      	cbnz	r0, 800950a <__mdiff+0x5a>
 8009500:	4b2d      	ldr	r3, [pc, #180]	; (80095b8 <__mdiff+0x108>)
 8009502:	4602      	mov	r2, r0
 8009504:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009508:	e7e6      	b.n	80094d8 <__mdiff+0x28>
 800950a:	693e      	ldr	r6, [r7, #16]
 800950c:	60c5      	str	r5, [r0, #12]
 800950e:	6925      	ldr	r5, [r4, #16]
 8009510:	f107 0114 	add.w	r1, r7, #20
 8009514:	f104 0914 	add.w	r9, r4, #20
 8009518:	f100 0e14 	add.w	lr, r0, #20
 800951c:	f107 0210 	add.w	r2, r7, #16
 8009520:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009524:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009528:	46f2      	mov	sl, lr
 800952a:	2700      	movs	r7, #0
 800952c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009530:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009534:	fa1f f883 	uxth.w	r8, r3
 8009538:	fa17 f78b 	uxtah	r7, r7, fp
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	eba7 0808 	sub.w	r8, r7, r8
 8009542:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009546:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800954a:	fa1f f888 	uxth.w	r8, r8
 800954e:	141f      	asrs	r7, r3, #16
 8009550:	454d      	cmp	r5, r9
 8009552:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009556:	f84a 3b04 	str.w	r3, [sl], #4
 800955a:	d8e7      	bhi.n	800952c <__mdiff+0x7c>
 800955c:	1b2b      	subs	r3, r5, r4
 800955e:	3b15      	subs	r3, #21
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	3304      	adds	r3, #4
 8009566:	3415      	adds	r4, #21
 8009568:	42a5      	cmp	r5, r4
 800956a:	bf38      	it	cc
 800956c:	2304      	movcc	r3, #4
 800956e:	4419      	add	r1, r3
 8009570:	4473      	add	r3, lr
 8009572:	469e      	mov	lr, r3
 8009574:	460d      	mov	r5, r1
 8009576:	4565      	cmp	r5, ip
 8009578:	d30e      	bcc.n	8009598 <__mdiff+0xe8>
 800957a:	f10c 0203 	add.w	r2, ip, #3
 800957e:	1a52      	subs	r2, r2, r1
 8009580:	f022 0203 	bic.w	r2, r2, #3
 8009584:	3903      	subs	r1, #3
 8009586:	458c      	cmp	ip, r1
 8009588:	bf38      	it	cc
 800958a:	2200      	movcc	r2, #0
 800958c:	441a      	add	r2, r3
 800958e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009592:	b17b      	cbz	r3, 80095b4 <__mdiff+0x104>
 8009594:	6106      	str	r6, [r0, #16]
 8009596:	e7a5      	b.n	80094e4 <__mdiff+0x34>
 8009598:	f855 8b04 	ldr.w	r8, [r5], #4
 800959c:	fa17 f488 	uxtah	r4, r7, r8
 80095a0:	1422      	asrs	r2, r4, #16
 80095a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80095a6:	b2a4      	uxth	r4, r4
 80095a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80095ac:	f84e 4b04 	str.w	r4, [lr], #4
 80095b0:	1417      	asrs	r7, r2, #16
 80095b2:	e7e0      	b.n	8009576 <__mdiff+0xc6>
 80095b4:	3e01      	subs	r6, #1
 80095b6:	e7ea      	b.n	800958e <__mdiff+0xde>
 80095b8:	0800a77f 	.word	0x0800a77f
 80095bc:	0800a790 	.word	0x0800a790

080095c0 <__d2b>:
 80095c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	4689      	mov	r9, r1
 80095c6:	2101      	movs	r1, #1
 80095c8:	ec57 6b10 	vmov	r6, r7, d0
 80095cc:	4690      	mov	r8, r2
 80095ce:	f7ff fcd5 	bl	8008f7c <_Balloc>
 80095d2:	4604      	mov	r4, r0
 80095d4:	b930      	cbnz	r0, 80095e4 <__d2b+0x24>
 80095d6:	4602      	mov	r2, r0
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <__d2b+0xb0>)
 80095da:	4826      	ldr	r0, [pc, #152]	; (8009674 <__d2b+0xb4>)
 80095dc:	f240 310a 	movw	r1, #778	; 0x30a
 80095e0:	f000 fa70 	bl	8009ac4 <__assert_func>
 80095e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095ec:	bb35      	cbnz	r5, 800963c <__d2b+0x7c>
 80095ee:	2e00      	cmp	r6, #0
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	d028      	beq.n	8009646 <__d2b+0x86>
 80095f4:	4668      	mov	r0, sp
 80095f6:	9600      	str	r6, [sp, #0]
 80095f8:	f7ff fd8c 	bl	8009114 <__lo0bits>
 80095fc:	9900      	ldr	r1, [sp, #0]
 80095fe:	b300      	cbz	r0, 8009642 <__d2b+0x82>
 8009600:	9a01      	ldr	r2, [sp, #4]
 8009602:	f1c0 0320 	rsb	r3, r0, #32
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	430b      	orrs	r3, r1
 800960c:	40c2      	lsrs	r2, r0
 800960e:	6163      	str	r3, [r4, #20]
 8009610:	9201      	str	r2, [sp, #4]
 8009612:	9b01      	ldr	r3, [sp, #4]
 8009614:	61a3      	str	r3, [r4, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf14      	ite	ne
 800961a:	2202      	movne	r2, #2
 800961c:	2201      	moveq	r2, #1
 800961e:	6122      	str	r2, [r4, #16]
 8009620:	b1d5      	cbz	r5, 8009658 <__d2b+0x98>
 8009622:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009626:	4405      	add	r5, r0
 8009628:	f8c9 5000 	str.w	r5, [r9]
 800962c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009630:	f8c8 0000 	str.w	r0, [r8]
 8009634:	4620      	mov	r0, r4
 8009636:	b003      	add	sp, #12
 8009638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800963c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009640:	e7d5      	b.n	80095ee <__d2b+0x2e>
 8009642:	6161      	str	r1, [r4, #20]
 8009644:	e7e5      	b.n	8009612 <__d2b+0x52>
 8009646:	a801      	add	r0, sp, #4
 8009648:	f7ff fd64 	bl	8009114 <__lo0bits>
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	6163      	str	r3, [r4, #20]
 8009650:	2201      	movs	r2, #1
 8009652:	6122      	str	r2, [r4, #16]
 8009654:	3020      	adds	r0, #32
 8009656:	e7e3      	b.n	8009620 <__d2b+0x60>
 8009658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800965c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009660:	f8c9 0000 	str.w	r0, [r9]
 8009664:	6918      	ldr	r0, [r3, #16]
 8009666:	f7ff fd35 	bl	80090d4 <__hi0bits>
 800966a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800966e:	e7df      	b.n	8009630 <__d2b+0x70>
 8009670:	0800a77f 	.word	0x0800a77f
 8009674:	0800a790 	.word	0x0800a790

08009678 <_calloc_r>:
 8009678:	b513      	push	{r0, r1, r4, lr}
 800967a:	434a      	muls	r2, r1
 800967c:	4611      	mov	r1, r2
 800967e:	9201      	str	r2, [sp, #4]
 8009680:	f000 f85a 	bl	8009738 <_malloc_r>
 8009684:	4604      	mov	r4, r0
 8009686:	b118      	cbz	r0, 8009690 <_calloc_r+0x18>
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	2100      	movs	r1, #0
 800968c:	f7fe f952 	bl	8007934 <memset>
 8009690:	4620      	mov	r0, r4
 8009692:	b002      	add	sp, #8
 8009694:	bd10      	pop	{r4, pc}
	...

08009698 <_free_r>:
 8009698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969a:	2900      	cmp	r1, #0
 800969c:	d048      	beq.n	8009730 <_free_r+0x98>
 800969e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a2:	9001      	str	r0, [sp, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f1a1 0404 	sub.w	r4, r1, #4
 80096aa:	bfb8      	it	lt
 80096ac:	18e4      	addlt	r4, r4, r3
 80096ae:	f000 fa65 	bl	8009b7c <__malloc_lock>
 80096b2:	4a20      	ldr	r2, [pc, #128]	; (8009734 <_free_r+0x9c>)
 80096b4:	9801      	ldr	r0, [sp, #4]
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	4615      	mov	r5, r2
 80096ba:	b933      	cbnz	r3, 80096ca <_free_r+0x32>
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	6014      	str	r4, [r2, #0]
 80096c0:	b003      	add	sp, #12
 80096c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c6:	f000 ba5f 	b.w	8009b88 <__malloc_unlock>
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	d90b      	bls.n	80096e6 <_free_r+0x4e>
 80096ce:	6821      	ldr	r1, [r4, #0]
 80096d0:	1862      	adds	r2, r4, r1
 80096d2:	4293      	cmp	r3, r2
 80096d4:	bf04      	itt	eq
 80096d6:	681a      	ldreq	r2, [r3, #0]
 80096d8:	685b      	ldreq	r3, [r3, #4]
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	bf04      	itt	eq
 80096de:	1852      	addeq	r2, r2, r1
 80096e0:	6022      	streq	r2, [r4, #0]
 80096e2:	602c      	str	r4, [r5, #0]
 80096e4:	e7ec      	b.n	80096c0 <_free_r+0x28>
 80096e6:	461a      	mov	r2, r3
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	b10b      	cbz	r3, 80096f0 <_free_r+0x58>
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	d9fa      	bls.n	80096e6 <_free_r+0x4e>
 80096f0:	6811      	ldr	r1, [r2, #0]
 80096f2:	1855      	adds	r5, r2, r1
 80096f4:	42a5      	cmp	r5, r4
 80096f6:	d10b      	bne.n	8009710 <_free_r+0x78>
 80096f8:	6824      	ldr	r4, [r4, #0]
 80096fa:	4421      	add	r1, r4
 80096fc:	1854      	adds	r4, r2, r1
 80096fe:	42a3      	cmp	r3, r4
 8009700:	6011      	str	r1, [r2, #0]
 8009702:	d1dd      	bne.n	80096c0 <_free_r+0x28>
 8009704:	681c      	ldr	r4, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	6053      	str	r3, [r2, #4]
 800970a:	4421      	add	r1, r4
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7d7      	b.n	80096c0 <_free_r+0x28>
 8009710:	d902      	bls.n	8009718 <_free_r+0x80>
 8009712:	230c      	movs	r3, #12
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	e7d3      	b.n	80096c0 <_free_r+0x28>
 8009718:	6825      	ldr	r5, [r4, #0]
 800971a:	1961      	adds	r1, r4, r5
 800971c:	428b      	cmp	r3, r1
 800971e:	bf04      	itt	eq
 8009720:	6819      	ldreq	r1, [r3, #0]
 8009722:	685b      	ldreq	r3, [r3, #4]
 8009724:	6063      	str	r3, [r4, #4]
 8009726:	bf04      	itt	eq
 8009728:	1949      	addeq	r1, r1, r5
 800972a:	6021      	streq	r1, [r4, #0]
 800972c:	6054      	str	r4, [r2, #4]
 800972e:	e7c7      	b.n	80096c0 <_free_r+0x28>
 8009730:	b003      	add	sp, #12
 8009732:	bd30      	pop	{r4, r5, pc}
 8009734:	20000208 	.word	0x20000208

08009738 <_malloc_r>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	1ccd      	adds	r5, r1, #3
 800973c:	f025 0503 	bic.w	r5, r5, #3
 8009740:	3508      	adds	r5, #8
 8009742:	2d0c      	cmp	r5, #12
 8009744:	bf38      	it	cc
 8009746:	250c      	movcc	r5, #12
 8009748:	2d00      	cmp	r5, #0
 800974a:	4606      	mov	r6, r0
 800974c:	db01      	blt.n	8009752 <_malloc_r+0x1a>
 800974e:	42a9      	cmp	r1, r5
 8009750:	d903      	bls.n	800975a <_malloc_r+0x22>
 8009752:	230c      	movs	r3, #12
 8009754:	6033      	str	r3, [r6, #0]
 8009756:	2000      	movs	r0, #0
 8009758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975a:	f000 fa0f 	bl	8009b7c <__malloc_lock>
 800975e:	4921      	ldr	r1, [pc, #132]	; (80097e4 <_malloc_r+0xac>)
 8009760:	680a      	ldr	r2, [r1, #0]
 8009762:	4614      	mov	r4, r2
 8009764:	b99c      	cbnz	r4, 800978e <_malloc_r+0x56>
 8009766:	4f20      	ldr	r7, [pc, #128]	; (80097e8 <_malloc_r+0xb0>)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	b923      	cbnz	r3, 8009776 <_malloc_r+0x3e>
 800976c:	4621      	mov	r1, r4
 800976e:	4630      	mov	r0, r6
 8009770:	f000 f998 	bl	8009aa4 <_sbrk_r>
 8009774:	6038      	str	r0, [r7, #0]
 8009776:	4629      	mov	r1, r5
 8009778:	4630      	mov	r0, r6
 800977a:	f000 f993 	bl	8009aa4 <_sbrk_r>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d123      	bne.n	80097ca <_malloc_r+0x92>
 8009782:	230c      	movs	r3, #12
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	4630      	mov	r0, r6
 8009788:	f000 f9fe 	bl	8009b88 <__malloc_unlock>
 800978c:	e7e3      	b.n	8009756 <_malloc_r+0x1e>
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	1b5b      	subs	r3, r3, r5
 8009792:	d417      	bmi.n	80097c4 <_malloc_r+0x8c>
 8009794:	2b0b      	cmp	r3, #11
 8009796:	d903      	bls.n	80097a0 <_malloc_r+0x68>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	441c      	add	r4, r3
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	e004      	b.n	80097aa <_malloc_r+0x72>
 80097a0:	6863      	ldr	r3, [r4, #4]
 80097a2:	42a2      	cmp	r2, r4
 80097a4:	bf0c      	ite	eq
 80097a6:	600b      	streq	r3, [r1, #0]
 80097a8:	6053      	strne	r3, [r2, #4]
 80097aa:	4630      	mov	r0, r6
 80097ac:	f000 f9ec 	bl	8009b88 <__malloc_unlock>
 80097b0:	f104 000b 	add.w	r0, r4, #11
 80097b4:	1d23      	adds	r3, r4, #4
 80097b6:	f020 0007 	bic.w	r0, r0, #7
 80097ba:	1ac2      	subs	r2, r0, r3
 80097bc:	d0cc      	beq.n	8009758 <_malloc_r+0x20>
 80097be:	1a1b      	subs	r3, r3, r0
 80097c0:	50a3      	str	r3, [r4, r2]
 80097c2:	e7c9      	b.n	8009758 <_malloc_r+0x20>
 80097c4:	4622      	mov	r2, r4
 80097c6:	6864      	ldr	r4, [r4, #4]
 80097c8:	e7cc      	b.n	8009764 <_malloc_r+0x2c>
 80097ca:	1cc4      	adds	r4, r0, #3
 80097cc:	f024 0403 	bic.w	r4, r4, #3
 80097d0:	42a0      	cmp	r0, r4
 80097d2:	d0e3      	beq.n	800979c <_malloc_r+0x64>
 80097d4:	1a21      	subs	r1, r4, r0
 80097d6:	4630      	mov	r0, r6
 80097d8:	f000 f964 	bl	8009aa4 <_sbrk_r>
 80097dc:	3001      	adds	r0, #1
 80097de:	d1dd      	bne.n	800979c <_malloc_r+0x64>
 80097e0:	e7cf      	b.n	8009782 <_malloc_r+0x4a>
 80097e2:	bf00      	nop
 80097e4:	20000208 	.word	0x20000208
 80097e8:	2000020c 	.word	0x2000020c

080097ec <__ssputs_r>:
 80097ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	688e      	ldr	r6, [r1, #8]
 80097f2:	429e      	cmp	r6, r3
 80097f4:	4682      	mov	sl, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	4690      	mov	r8, r2
 80097fa:	461f      	mov	r7, r3
 80097fc:	d838      	bhi.n	8009870 <__ssputs_r+0x84>
 80097fe:	898a      	ldrh	r2, [r1, #12]
 8009800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009804:	d032      	beq.n	800986c <__ssputs_r+0x80>
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	6909      	ldr	r1, [r1, #16]
 800980a:	eba5 0901 	sub.w	r9, r5, r1
 800980e:	6965      	ldr	r5, [r4, #20]
 8009810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009818:	3301      	adds	r3, #1
 800981a:	444b      	add	r3, r9
 800981c:	106d      	asrs	r5, r5, #1
 800981e:	429d      	cmp	r5, r3
 8009820:	bf38      	it	cc
 8009822:	461d      	movcc	r5, r3
 8009824:	0553      	lsls	r3, r2, #21
 8009826:	d531      	bpl.n	800988c <__ssputs_r+0xa0>
 8009828:	4629      	mov	r1, r5
 800982a:	f7ff ff85 	bl	8009738 <_malloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	b950      	cbnz	r0, 8009848 <__ssputs_r+0x5c>
 8009832:	230c      	movs	r3, #12
 8009834:	f8ca 3000 	str.w	r3, [sl]
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	6921      	ldr	r1, [r4, #16]
 800984a:	464a      	mov	r2, r9
 800984c:	f7ff fb88 	bl	8008f60 <memcpy>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	6126      	str	r6, [r4, #16]
 800985e:	6165      	str	r5, [r4, #20]
 8009860:	444e      	add	r6, r9
 8009862:	eba5 0509 	sub.w	r5, r5, r9
 8009866:	6026      	str	r6, [r4, #0]
 8009868:	60a5      	str	r5, [r4, #8]
 800986a:	463e      	mov	r6, r7
 800986c:	42be      	cmp	r6, r7
 800986e:	d900      	bls.n	8009872 <__ssputs_r+0x86>
 8009870:	463e      	mov	r6, r7
 8009872:	4632      	mov	r2, r6
 8009874:	6820      	ldr	r0, [r4, #0]
 8009876:	4641      	mov	r1, r8
 8009878:	f000 f966 	bl	8009b48 <memmove>
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	1b9b      	subs	r3, r3, r6
 8009882:	4432      	add	r2, r6
 8009884:	60a3      	str	r3, [r4, #8]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	2000      	movs	r0, #0
 800988a:	e7db      	b.n	8009844 <__ssputs_r+0x58>
 800988c:	462a      	mov	r2, r5
 800988e:	f000 f981 	bl	8009b94 <_realloc_r>
 8009892:	4606      	mov	r6, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	d1e1      	bne.n	800985c <__ssputs_r+0x70>
 8009898:	6921      	ldr	r1, [r4, #16]
 800989a:	4650      	mov	r0, sl
 800989c:	f7ff fefc 	bl	8009698 <_free_r>
 80098a0:	e7c7      	b.n	8009832 <__ssputs_r+0x46>
	...

080098a4 <_svfiprintf_r>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4698      	mov	r8, r3
 80098aa:	898b      	ldrh	r3, [r1, #12]
 80098ac:	061b      	lsls	r3, r3, #24
 80098ae:	b09d      	sub	sp, #116	; 0x74
 80098b0:	4607      	mov	r7, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	4614      	mov	r4, r2
 80098b6:	d50e      	bpl.n	80098d6 <_svfiprintf_r+0x32>
 80098b8:	690b      	ldr	r3, [r1, #16]
 80098ba:	b963      	cbnz	r3, 80098d6 <_svfiprintf_r+0x32>
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	f7ff ff3b 	bl	8009738 <_malloc_r>
 80098c2:	6028      	str	r0, [r5, #0]
 80098c4:	6128      	str	r0, [r5, #16]
 80098c6:	b920      	cbnz	r0, 80098d2 <_svfiprintf_r+0x2e>
 80098c8:	230c      	movs	r3, #12
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e0d1      	b.n	8009a76 <_svfiprintf_r+0x1d2>
 80098d2:	2340      	movs	r3, #64	; 0x40
 80098d4:	616b      	str	r3, [r5, #20]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	2320      	movs	r3, #32
 80098dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098e4:	2330      	movs	r3, #48	; 0x30
 80098e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a90 <_svfiprintf_r+0x1ec>
 80098ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098ee:	f04f 0901 	mov.w	r9, #1
 80098f2:	4623      	mov	r3, r4
 80098f4:	469a      	mov	sl, r3
 80098f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098fa:	b10a      	cbz	r2, 8009900 <_svfiprintf_r+0x5c>
 80098fc:	2a25      	cmp	r2, #37	; 0x25
 80098fe:	d1f9      	bne.n	80098f4 <_svfiprintf_r+0x50>
 8009900:	ebba 0b04 	subs.w	fp, sl, r4
 8009904:	d00b      	beq.n	800991e <_svfiprintf_r+0x7a>
 8009906:	465b      	mov	r3, fp
 8009908:	4622      	mov	r2, r4
 800990a:	4629      	mov	r1, r5
 800990c:	4638      	mov	r0, r7
 800990e:	f7ff ff6d 	bl	80097ec <__ssputs_r>
 8009912:	3001      	adds	r0, #1
 8009914:	f000 80aa 	beq.w	8009a6c <_svfiprintf_r+0x1c8>
 8009918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800991a:	445a      	add	r2, fp
 800991c:	9209      	str	r2, [sp, #36]	; 0x24
 800991e:	f89a 3000 	ldrb.w	r3, [sl]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 80a2 	beq.w	8009a6c <_svfiprintf_r+0x1c8>
 8009928:	2300      	movs	r3, #0
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009932:	f10a 0a01 	add.w	sl, sl, #1
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	9307      	str	r3, [sp, #28]
 800993a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800993e:	931a      	str	r3, [sp, #104]	; 0x68
 8009940:	4654      	mov	r4, sl
 8009942:	2205      	movs	r2, #5
 8009944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009948:	4851      	ldr	r0, [pc, #324]	; (8009a90 <_svfiprintf_r+0x1ec>)
 800994a:	f7f6 fc69 	bl	8000220 <memchr>
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	b9d8      	cbnz	r0, 800998a <_svfiprintf_r+0xe6>
 8009952:	06d0      	lsls	r0, r2, #27
 8009954:	bf44      	itt	mi
 8009956:	2320      	movmi	r3, #32
 8009958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800995c:	0711      	lsls	r1, r2, #28
 800995e:	bf44      	itt	mi
 8009960:	232b      	movmi	r3, #43	; 0x2b
 8009962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009966:	f89a 3000 	ldrb.w	r3, [sl]
 800996a:	2b2a      	cmp	r3, #42	; 0x2a
 800996c:	d015      	beq.n	800999a <_svfiprintf_r+0xf6>
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	4654      	mov	r4, sl
 8009972:	2000      	movs	r0, #0
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4621      	mov	r1, r4
 800997a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800997e:	3b30      	subs	r3, #48	; 0x30
 8009980:	2b09      	cmp	r3, #9
 8009982:	d94e      	bls.n	8009a22 <_svfiprintf_r+0x17e>
 8009984:	b1b0      	cbz	r0, 80099b4 <_svfiprintf_r+0x110>
 8009986:	9207      	str	r2, [sp, #28]
 8009988:	e014      	b.n	80099b4 <_svfiprintf_r+0x110>
 800998a:	eba0 0308 	sub.w	r3, r0, r8
 800998e:	fa09 f303 	lsl.w	r3, r9, r3
 8009992:	4313      	orrs	r3, r2
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	46a2      	mov	sl, r4
 8009998:	e7d2      	b.n	8009940 <_svfiprintf_r+0x9c>
 800999a:	9b03      	ldr	r3, [sp, #12]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	9103      	str	r1, [sp, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	bfbb      	ittet	lt
 80099a6:	425b      	neglt	r3, r3
 80099a8:	f042 0202 	orrlt.w	r2, r2, #2
 80099ac:	9307      	strge	r3, [sp, #28]
 80099ae:	9307      	strlt	r3, [sp, #28]
 80099b0:	bfb8      	it	lt
 80099b2:	9204      	strlt	r2, [sp, #16]
 80099b4:	7823      	ldrb	r3, [r4, #0]
 80099b6:	2b2e      	cmp	r3, #46	; 0x2e
 80099b8:	d10c      	bne.n	80099d4 <_svfiprintf_r+0x130>
 80099ba:	7863      	ldrb	r3, [r4, #1]
 80099bc:	2b2a      	cmp	r3, #42	; 0x2a
 80099be:	d135      	bne.n	8009a2c <_svfiprintf_r+0x188>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1d1a      	adds	r2, r3, #4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	9203      	str	r2, [sp, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfb8      	it	lt
 80099cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d0:	3402      	adds	r4, #2
 80099d2:	9305      	str	r3, [sp, #20]
 80099d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009aa0 <_svfiprintf_r+0x1fc>
 80099d8:	7821      	ldrb	r1, [r4, #0]
 80099da:	2203      	movs	r2, #3
 80099dc:	4650      	mov	r0, sl
 80099de:	f7f6 fc1f 	bl	8000220 <memchr>
 80099e2:	b140      	cbz	r0, 80099f6 <_svfiprintf_r+0x152>
 80099e4:	2340      	movs	r3, #64	; 0x40
 80099e6:	eba0 000a 	sub.w	r0, r0, sl
 80099ea:	fa03 f000 	lsl.w	r0, r3, r0
 80099ee:	9b04      	ldr	r3, [sp, #16]
 80099f0:	4303      	orrs	r3, r0
 80099f2:	3401      	adds	r4, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fa:	4826      	ldr	r0, [pc, #152]	; (8009a94 <_svfiprintf_r+0x1f0>)
 80099fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a00:	2206      	movs	r2, #6
 8009a02:	f7f6 fc0d 	bl	8000220 <memchr>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d038      	beq.n	8009a7c <_svfiprintf_r+0x1d8>
 8009a0a:	4b23      	ldr	r3, [pc, #140]	; (8009a98 <_svfiprintf_r+0x1f4>)
 8009a0c:	bb1b      	cbnz	r3, 8009a56 <_svfiprintf_r+0x1b2>
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	f023 0307 	bic.w	r3, r3, #7
 8009a16:	3308      	adds	r3, #8
 8009a18:	9303      	str	r3, [sp, #12]
 8009a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a1c:	4433      	add	r3, r6
 8009a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a20:	e767      	b.n	80098f2 <_svfiprintf_r+0x4e>
 8009a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a26:	460c      	mov	r4, r1
 8009a28:	2001      	movs	r0, #1
 8009a2a:	e7a5      	b.n	8009978 <_svfiprintf_r+0xd4>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	3401      	adds	r4, #1
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	4619      	mov	r1, r3
 8009a34:	f04f 0c0a 	mov.w	ip, #10
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a3e:	3a30      	subs	r2, #48	; 0x30
 8009a40:	2a09      	cmp	r2, #9
 8009a42:	d903      	bls.n	8009a4c <_svfiprintf_r+0x1a8>
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0c5      	beq.n	80099d4 <_svfiprintf_r+0x130>
 8009a48:	9105      	str	r1, [sp, #20]
 8009a4a:	e7c3      	b.n	80099d4 <_svfiprintf_r+0x130>
 8009a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a50:	4604      	mov	r4, r0
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7f0      	b.n	8009a38 <_svfiprintf_r+0x194>
 8009a56:	ab03      	add	r3, sp, #12
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <_svfiprintf_r+0x1f8>)
 8009a5e:	a904      	add	r1, sp, #16
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7fe f80f 	bl	8007a84 <_printf_float>
 8009a66:	1c42      	adds	r2, r0, #1
 8009a68:	4606      	mov	r6, r0
 8009a6a:	d1d6      	bne.n	8009a1a <_svfiprintf_r+0x176>
 8009a6c:	89ab      	ldrh	r3, [r5, #12]
 8009a6e:	065b      	lsls	r3, r3, #25
 8009a70:	f53f af2c 	bmi.w	80098cc <_svfiprintf_r+0x28>
 8009a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a76:	b01d      	add	sp, #116	; 0x74
 8009a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7c:	ab03      	add	r3, sp, #12
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	462a      	mov	r2, r5
 8009a82:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <_svfiprintf_r+0x1f8>)
 8009a84:	a904      	add	r1, sp, #16
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7fe faa0 	bl	8007fcc <_printf_i>
 8009a8c:	e7eb      	b.n	8009a66 <_svfiprintf_r+0x1c2>
 8009a8e:	bf00      	nop
 8009a90:	0800a8ec 	.word	0x0800a8ec
 8009a94:	0800a8f6 	.word	0x0800a8f6
 8009a98:	08007a85 	.word	0x08007a85
 8009a9c:	080097ed 	.word	0x080097ed
 8009aa0:	0800a8f2 	.word	0x0800a8f2

08009aa4 <_sbrk_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4d06      	ldr	r5, [pc, #24]	; (8009ac0 <_sbrk_r+0x1c>)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	f7f8 fd1a 	bl	80024e8 <_sbrk>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_sbrk_r+0x1a>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_sbrk_r+0x1a>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20000830 	.word	0x20000830

08009ac4 <__assert_func>:
 8009ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ac6:	4614      	mov	r4, r2
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <__assert_func+0x2c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4605      	mov	r5, r0
 8009ad0:	68d8      	ldr	r0, [r3, #12]
 8009ad2:	b14c      	cbz	r4, 8009ae8 <__assert_func+0x24>
 8009ad4:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <__assert_func+0x30>)
 8009ad6:	9100      	str	r1, [sp, #0]
 8009ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009adc:	4906      	ldr	r1, [pc, #24]	; (8009af8 <__assert_func+0x34>)
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f000 f80e 	bl	8009b00 <fiprintf>
 8009ae4:	f000 faa4 	bl	800a030 <abort>
 8009ae8:	4b04      	ldr	r3, [pc, #16]	; (8009afc <__assert_func+0x38>)
 8009aea:	461c      	mov	r4, r3
 8009aec:	e7f3      	b.n	8009ad6 <__assert_func+0x12>
 8009aee:	bf00      	nop
 8009af0:	20000010 	.word	0x20000010
 8009af4:	0800a8fd 	.word	0x0800a8fd
 8009af8:	0800a90a 	.word	0x0800a90a
 8009afc:	0800a938 	.word	0x0800a938

08009b00 <fiprintf>:
 8009b00:	b40e      	push	{r1, r2, r3}
 8009b02:	b503      	push	{r0, r1, lr}
 8009b04:	4601      	mov	r1, r0
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	4805      	ldr	r0, [pc, #20]	; (8009b20 <fiprintf+0x20>)
 8009b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0e:	6800      	ldr	r0, [r0, #0]
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	f000 f88f 	bl	8009c34 <_vfiprintf_r>
 8009b16:	b002      	add	sp, #8
 8009b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4770      	bx	lr
 8009b20:	20000010 	.word	0x20000010

08009b24 <__ascii_mbtowc>:
 8009b24:	b082      	sub	sp, #8
 8009b26:	b901      	cbnz	r1, 8009b2a <__ascii_mbtowc+0x6>
 8009b28:	a901      	add	r1, sp, #4
 8009b2a:	b142      	cbz	r2, 8009b3e <__ascii_mbtowc+0x1a>
 8009b2c:	b14b      	cbz	r3, 8009b42 <__ascii_mbtowc+0x1e>
 8009b2e:	7813      	ldrb	r3, [r2, #0]
 8009b30:	600b      	str	r3, [r1, #0]
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	1e10      	subs	r0, r2, #0
 8009b36:	bf18      	it	ne
 8009b38:	2001      	movne	r0, #1
 8009b3a:	b002      	add	sp, #8
 8009b3c:	4770      	bx	lr
 8009b3e:	4610      	mov	r0, r2
 8009b40:	e7fb      	b.n	8009b3a <__ascii_mbtowc+0x16>
 8009b42:	f06f 0001 	mvn.w	r0, #1
 8009b46:	e7f8      	b.n	8009b3a <__ascii_mbtowc+0x16>

08009b48 <memmove>:
 8009b48:	4288      	cmp	r0, r1
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	eb01 0402 	add.w	r4, r1, r2
 8009b50:	d902      	bls.n	8009b58 <memmove+0x10>
 8009b52:	4284      	cmp	r4, r0
 8009b54:	4623      	mov	r3, r4
 8009b56:	d807      	bhi.n	8009b68 <memmove+0x20>
 8009b58:	1e43      	subs	r3, r0, #1
 8009b5a:	42a1      	cmp	r1, r4
 8009b5c:	d008      	beq.n	8009b70 <memmove+0x28>
 8009b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b66:	e7f8      	b.n	8009b5a <memmove+0x12>
 8009b68:	4402      	add	r2, r0
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	428a      	cmp	r2, r1
 8009b6e:	d100      	bne.n	8009b72 <memmove+0x2a>
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b7a:	e7f7      	b.n	8009b6c <memmove+0x24>

08009b7c <__malloc_lock>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__malloc_lock+0x8>)
 8009b7e:	f000 bc17 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 8009b82:	bf00      	nop
 8009b84:	20000838 	.word	0x20000838

08009b88 <__malloc_unlock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__malloc_unlock+0x8>)
 8009b8a:	f000 bc12 	b.w	800a3b2 <__retarget_lock_release_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20000838 	.word	0x20000838

08009b94 <_realloc_r>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	4607      	mov	r7, r0
 8009b98:	4614      	mov	r4, r2
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	b921      	cbnz	r1, 8009ba8 <_realloc_r+0x14>
 8009b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	f7ff bdc8 	b.w	8009738 <_malloc_r>
 8009ba8:	b922      	cbnz	r2, 8009bb4 <_realloc_r+0x20>
 8009baa:	f7ff fd75 	bl	8009698 <_free_r>
 8009bae:	4625      	mov	r5, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb4:	f000 fc62 	bl	800a47c <_malloc_usable_size_r>
 8009bb8:	42a0      	cmp	r0, r4
 8009bba:	d20f      	bcs.n	8009bdc <_realloc_r+0x48>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7ff fdba 	bl	8009738 <_malloc_r>
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0f2      	beq.n	8009bb0 <_realloc_r+0x1c>
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4622      	mov	r2, r4
 8009bce:	f7ff f9c7 	bl	8008f60 <memcpy>
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff fd5f 	bl	8009698 <_free_r>
 8009bda:	e7e9      	b.n	8009bb0 <_realloc_r+0x1c>
 8009bdc:	4635      	mov	r5, r6
 8009bde:	e7e7      	b.n	8009bb0 <_realloc_r+0x1c>

08009be0 <__sfputc_r>:
 8009be0:	6893      	ldr	r3, [r2, #8]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	b410      	push	{r4}
 8009be8:	6093      	str	r3, [r2, #8]
 8009bea:	da08      	bge.n	8009bfe <__sfputc_r+0x1e>
 8009bec:	6994      	ldr	r4, [r2, #24]
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	db01      	blt.n	8009bf6 <__sfputc_r+0x16>
 8009bf2:	290a      	cmp	r1, #10
 8009bf4:	d103      	bne.n	8009bfe <__sfputc_r+0x1e>
 8009bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bfa:	f000 b94b 	b.w	8009e94 <__swbuf_r>
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	1c58      	adds	r0, r3, #1
 8009c02:	6010      	str	r0, [r2, #0]
 8009c04:	7019      	strb	r1, [r3, #0]
 8009c06:	4608      	mov	r0, r1
 8009c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <__sfputs_r>:
 8009c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c10:	4606      	mov	r6, r0
 8009c12:	460f      	mov	r7, r1
 8009c14:	4614      	mov	r4, r2
 8009c16:	18d5      	adds	r5, r2, r3
 8009c18:	42ac      	cmp	r4, r5
 8009c1a:	d101      	bne.n	8009c20 <__sfputs_r+0x12>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e007      	b.n	8009c30 <__sfputs_r+0x22>
 8009c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c24:	463a      	mov	r2, r7
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ffda 	bl	8009be0 <__sfputc_r>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d1f3      	bne.n	8009c18 <__sfputs_r+0xa>
 8009c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c34 <_vfiprintf_r>:
 8009c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460d      	mov	r5, r1
 8009c3a:	b09d      	sub	sp, #116	; 0x74
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	4698      	mov	r8, r3
 8009c40:	4606      	mov	r6, r0
 8009c42:	b118      	cbz	r0, 8009c4c <_vfiprintf_r+0x18>
 8009c44:	6983      	ldr	r3, [r0, #24]
 8009c46:	b90b      	cbnz	r3, 8009c4c <_vfiprintf_r+0x18>
 8009c48:	f000 fb14 	bl	800a274 <__sinit>
 8009c4c:	4b89      	ldr	r3, [pc, #548]	; (8009e74 <_vfiprintf_r+0x240>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	d11b      	bne.n	8009c8a <_vfiprintf_r+0x56>
 8009c52:	6875      	ldr	r5, [r6, #4]
 8009c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c56:	07d9      	lsls	r1, r3, #31
 8009c58:	d405      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d402      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c62:	f000 fba5 	bl	800a3b0 <__retarget_lock_acquire_recursive>
 8009c66:	89ab      	ldrh	r3, [r5, #12]
 8009c68:	071b      	lsls	r3, r3, #28
 8009c6a:	d501      	bpl.n	8009c70 <_vfiprintf_r+0x3c>
 8009c6c:	692b      	ldr	r3, [r5, #16]
 8009c6e:	b9eb      	cbnz	r3, 8009cac <_vfiprintf_r+0x78>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 f96e 	bl	8009f54 <__swsetup_r>
 8009c78:	b1c0      	cbz	r0, 8009cac <_vfiprintf_r+0x78>
 8009c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7c:	07dc      	lsls	r4, r3, #31
 8009c7e:	d50e      	bpl.n	8009c9e <_vfiprintf_r+0x6a>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	b01d      	add	sp, #116	; 0x74
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	4b7b      	ldr	r3, [pc, #492]	; (8009e78 <_vfiprintf_r+0x244>)
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	d101      	bne.n	8009c94 <_vfiprintf_r+0x60>
 8009c90:	68b5      	ldr	r5, [r6, #8]
 8009c92:	e7df      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c94:	4b79      	ldr	r3, [pc, #484]	; (8009e7c <_vfiprintf_r+0x248>)
 8009c96:	429d      	cmp	r5, r3
 8009c98:	bf08      	it	eq
 8009c9a:	68f5      	ldreq	r5, [r6, #12]
 8009c9c:	e7da      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	0598      	lsls	r0, r3, #22
 8009ca2:	d4ed      	bmi.n	8009c80 <_vfiprintf_r+0x4c>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca6:	f000 fb84 	bl	800a3b2 <__retarget_lock_release_recursive>
 8009caa:	e7e9      	b.n	8009c80 <_vfiprintf_r+0x4c>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cba:	2330      	movs	r3, #48	; 0x30
 8009cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e80 <_vfiprintf_r+0x24c>
 8009cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc4:	f04f 0901 	mov.w	r9, #1
 8009cc8:	4623      	mov	r3, r4
 8009cca:	469a      	mov	sl, r3
 8009ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd0:	b10a      	cbz	r2, 8009cd6 <_vfiprintf_r+0xa2>
 8009cd2:	2a25      	cmp	r2, #37	; 0x25
 8009cd4:	d1f9      	bne.n	8009cca <_vfiprintf_r+0x96>
 8009cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cda:	d00b      	beq.n	8009cf4 <_vfiprintf_r+0xc0>
 8009cdc:	465b      	mov	r3, fp
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ff93 	bl	8009c0e <__sfputs_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	f000 80aa 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf0:	445a      	add	r2, fp
 8009cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80a2 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d14:	931a      	str	r3, [sp, #104]	; 0x68
 8009d16:	4654      	mov	r4, sl
 8009d18:	2205      	movs	r2, #5
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	4858      	ldr	r0, [pc, #352]	; (8009e80 <_vfiprintf_r+0x24c>)
 8009d20:	f7f6 fa7e 	bl	8000220 <memchr>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	b9d8      	cbnz	r0, 8009d60 <_vfiprintf_r+0x12c>
 8009d28:	06d1      	lsls	r1, r2, #27
 8009d2a:	bf44      	itt	mi
 8009d2c:	2320      	movmi	r3, #32
 8009d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d32:	0713      	lsls	r3, r2, #28
 8009d34:	bf44      	itt	mi
 8009d36:	232b      	movmi	r3, #43	; 0x2b
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d40:	2b2a      	cmp	r3, #42	; 0x2a
 8009d42:	d015      	beq.n	8009d70 <_vfiprintf_r+0x13c>
 8009d44:	9a07      	ldr	r2, [sp, #28]
 8009d46:	4654      	mov	r4, sl
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f04f 0c0a 	mov.w	ip, #10
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d54:	3b30      	subs	r3, #48	; 0x30
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d94e      	bls.n	8009df8 <_vfiprintf_r+0x1c4>
 8009d5a:	b1b0      	cbz	r0, 8009d8a <_vfiprintf_r+0x156>
 8009d5c:	9207      	str	r2, [sp, #28]
 8009d5e:	e014      	b.n	8009d8a <_vfiprintf_r+0x156>
 8009d60:	eba0 0308 	sub.w	r3, r0, r8
 8009d64:	fa09 f303 	lsl.w	r3, r9, r3
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	46a2      	mov	sl, r4
 8009d6e:	e7d2      	b.n	8009d16 <_vfiprintf_r+0xe2>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9103      	str	r1, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbb      	ittet	lt
 8009d7c:	425b      	neglt	r3, r3
 8009d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d82:	9307      	strge	r3, [sp, #28]
 8009d84:	9307      	strlt	r3, [sp, #28]
 8009d86:	bfb8      	it	lt
 8009d88:	9204      	strlt	r2, [sp, #16]
 8009d8a:	7823      	ldrb	r3, [r4, #0]
 8009d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d8e:	d10c      	bne.n	8009daa <_vfiprintf_r+0x176>
 8009d90:	7863      	ldrb	r3, [r4, #1]
 8009d92:	2b2a      	cmp	r3, #42	; 0x2a
 8009d94:	d135      	bne.n	8009e02 <_vfiprintf_r+0x1ce>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	9203      	str	r2, [sp, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bfb8      	it	lt
 8009da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da6:	3402      	adds	r4, #2
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e90 <_vfiprintf_r+0x25c>
 8009dae:	7821      	ldrb	r1, [r4, #0]
 8009db0:	2203      	movs	r2, #3
 8009db2:	4650      	mov	r0, sl
 8009db4:	f7f6 fa34 	bl	8000220 <memchr>
 8009db8:	b140      	cbz	r0, 8009dcc <_vfiprintf_r+0x198>
 8009dba:	2340      	movs	r3, #64	; 0x40
 8009dbc:	eba0 000a 	sub.w	r0, r0, sl
 8009dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	4303      	orrs	r3, r0
 8009dc8:	3401      	adds	r4, #1
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	482c      	ldr	r0, [pc, #176]	; (8009e84 <_vfiprintf_r+0x250>)
 8009dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dd6:	2206      	movs	r2, #6
 8009dd8:	f7f6 fa22 	bl	8000220 <memchr>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d03f      	beq.n	8009e60 <_vfiprintf_r+0x22c>
 8009de0:	4b29      	ldr	r3, [pc, #164]	; (8009e88 <_vfiprintf_r+0x254>)
 8009de2:	bb1b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x1f8>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	3307      	adds	r3, #7
 8009de8:	f023 0307 	bic.w	r3, r3, #7
 8009dec:	3308      	adds	r3, #8
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df2:	443b      	add	r3, r7
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	e767      	b.n	8009cc8 <_vfiprintf_r+0x94>
 8009df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7a5      	b.n	8009d4e <_vfiprintf_r+0x11a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	3401      	adds	r4, #1
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f04f 0c0a 	mov.w	ip, #10
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e14:	3a30      	subs	r2, #48	; 0x30
 8009e16:	2a09      	cmp	r2, #9
 8009e18:	d903      	bls.n	8009e22 <_vfiprintf_r+0x1ee>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0c5      	beq.n	8009daa <_vfiprintf_r+0x176>
 8009e1e:	9105      	str	r1, [sp, #20]
 8009e20:	e7c3      	b.n	8009daa <_vfiprintf_r+0x176>
 8009e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e26:	4604      	mov	r4, r0
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e7f0      	b.n	8009e0e <_vfiprintf_r+0x1da>
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <_vfiprintf_r+0x258>)
 8009e34:	a904      	add	r1, sp, #16
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7fd fe24 	bl	8007a84 <_printf_float>
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	1c78      	adds	r0, r7, #1
 8009e40:	d1d6      	bne.n	8009df0 <_vfiprintf_r+0x1bc>
 8009e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e44:	07d9      	lsls	r1, r3, #31
 8009e46:	d405      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e48:	89ab      	ldrh	r3, [r5, #12]
 8009e4a:	059a      	lsls	r2, r3, #22
 8009e4c:	d402      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e50:	f000 faaf 	bl	800a3b2 <__retarget_lock_release_recursive>
 8009e54:	89ab      	ldrh	r3, [r5, #12]
 8009e56:	065b      	lsls	r3, r3, #25
 8009e58:	f53f af12 	bmi.w	8009c80 <_vfiprintf_r+0x4c>
 8009e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e5e:	e711      	b.n	8009c84 <_vfiprintf_r+0x50>
 8009e60:	ab03      	add	r3, sp, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	462a      	mov	r2, r5
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <_vfiprintf_r+0x258>)
 8009e68:	a904      	add	r1, sp, #16
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7fe f8ae 	bl	8007fcc <_printf_i>
 8009e70:	e7e4      	b.n	8009e3c <_vfiprintf_r+0x208>
 8009e72:	bf00      	nop
 8009e74:	0800aa64 	.word	0x0800aa64
 8009e78:	0800aa84 	.word	0x0800aa84
 8009e7c:	0800aa44 	.word	0x0800aa44
 8009e80:	0800a8ec 	.word	0x0800a8ec
 8009e84:	0800a8f6 	.word	0x0800a8f6
 8009e88:	08007a85 	.word	0x08007a85
 8009e8c:	08009c0f 	.word	0x08009c0f
 8009e90:	0800a8f2 	.word	0x0800a8f2

08009e94 <__swbuf_r>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	460e      	mov	r6, r1
 8009e98:	4614      	mov	r4, r2
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	b118      	cbz	r0, 8009ea6 <__swbuf_r+0x12>
 8009e9e:	6983      	ldr	r3, [r0, #24]
 8009ea0:	b90b      	cbnz	r3, 8009ea6 <__swbuf_r+0x12>
 8009ea2:	f000 f9e7 	bl	800a274 <__sinit>
 8009ea6:	4b21      	ldr	r3, [pc, #132]	; (8009f2c <__swbuf_r+0x98>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	d12b      	bne.n	8009f04 <__swbuf_r+0x70>
 8009eac:	686c      	ldr	r4, [r5, #4]
 8009eae:	69a3      	ldr	r3, [r4, #24]
 8009eb0:	60a3      	str	r3, [r4, #8]
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	071a      	lsls	r2, r3, #28
 8009eb6:	d52f      	bpl.n	8009f18 <__swbuf_r+0x84>
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	b36b      	cbz	r3, 8009f18 <__swbuf_r+0x84>
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	1ac0      	subs	r0, r0, r3
 8009ec2:	6963      	ldr	r3, [r4, #20]
 8009ec4:	b2f6      	uxtb	r6, r6
 8009ec6:	4283      	cmp	r3, r0
 8009ec8:	4637      	mov	r7, r6
 8009eca:	dc04      	bgt.n	8009ed6 <__swbuf_r+0x42>
 8009ecc:	4621      	mov	r1, r4
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f000 f93c 	bl	800a14c <_fflush_r>
 8009ed4:	bb30      	cbnz	r0, 8009f24 <__swbuf_r+0x90>
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	60a3      	str	r3, [r4, #8]
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	6022      	str	r2, [r4, #0]
 8009ee2:	701e      	strb	r6, [r3, #0]
 8009ee4:	6963      	ldr	r3, [r4, #20]
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	4283      	cmp	r3, r0
 8009eea:	d004      	beq.n	8009ef6 <__swbuf_r+0x62>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	07db      	lsls	r3, r3, #31
 8009ef0:	d506      	bpl.n	8009f00 <__swbuf_r+0x6c>
 8009ef2:	2e0a      	cmp	r6, #10
 8009ef4:	d104      	bne.n	8009f00 <__swbuf_r+0x6c>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f000 f927 	bl	800a14c <_fflush_r>
 8009efe:	b988      	cbnz	r0, 8009f24 <__swbuf_r+0x90>
 8009f00:	4638      	mov	r0, r7
 8009f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <__swbuf_r+0x9c>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d101      	bne.n	8009f0e <__swbuf_r+0x7a>
 8009f0a:	68ac      	ldr	r4, [r5, #8]
 8009f0c:	e7cf      	b.n	8009eae <__swbuf_r+0x1a>
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <__swbuf_r+0xa0>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	bf08      	it	eq
 8009f14:	68ec      	ldreq	r4, [r5, #12]
 8009f16:	e7ca      	b.n	8009eae <__swbuf_r+0x1a>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f000 f81a 	bl	8009f54 <__swsetup_r>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d0cb      	beq.n	8009ebc <__swbuf_r+0x28>
 8009f24:	f04f 37ff 	mov.w	r7, #4294967295
 8009f28:	e7ea      	b.n	8009f00 <__swbuf_r+0x6c>
 8009f2a:	bf00      	nop
 8009f2c:	0800aa64 	.word	0x0800aa64
 8009f30:	0800aa84 	.word	0x0800aa84
 8009f34:	0800aa44 	.word	0x0800aa44

08009f38 <__ascii_wctomb>:
 8009f38:	b149      	cbz	r1, 8009f4e <__ascii_wctomb+0x16>
 8009f3a:	2aff      	cmp	r2, #255	; 0xff
 8009f3c:	bf85      	ittet	hi
 8009f3e:	238a      	movhi	r3, #138	; 0x8a
 8009f40:	6003      	strhi	r3, [r0, #0]
 8009f42:	700a      	strbls	r2, [r1, #0]
 8009f44:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f48:	bf98      	it	ls
 8009f4a:	2001      	movls	r0, #1
 8009f4c:	4770      	bx	lr
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4770      	bx	lr
	...

08009f54 <__swsetup_r>:
 8009f54:	4b32      	ldr	r3, [pc, #200]	; (800a020 <__swsetup_r+0xcc>)
 8009f56:	b570      	push	{r4, r5, r6, lr}
 8009f58:	681d      	ldr	r5, [r3, #0]
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	b125      	cbz	r5, 8009f6a <__swsetup_r+0x16>
 8009f60:	69ab      	ldr	r3, [r5, #24]
 8009f62:	b913      	cbnz	r3, 8009f6a <__swsetup_r+0x16>
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 f985 	bl	800a274 <__sinit>
 8009f6a:	4b2e      	ldr	r3, [pc, #184]	; (800a024 <__swsetup_r+0xd0>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	d10f      	bne.n	8009f90 <__swsetup_r+0x3c>
 8009f70:	686c      	ldr	r4, [r5, #4]
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f78:	0719      	lsls	r1, r3, #28
 8009f7a:	d42c      	bmi.n	8009fd6 <__swsetup_r+0x82>
 8009f7c:	06dd      	lsls	r5, r3, #27
 8009f7e:	d411      	bmi.n	8009fa4 <__swsetup_r+0x50>
 8009f80:	2309      	movs	r3, #9
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e03e      	b.n	800a00e <__swsetup_r+0xba>
 8009f90:	4b25      	ldr	r3, [pc, #148]	; (800a028 <__swsetup_r+0xd4>)
 8009f92:	429c      	cmp	r4, r3
 8009f94:	d101      	bne.n	8009f9a <__swsetup_r+0x46>
 8009f96:	68ac      	ldr	r4, [r5, #8]
 8009f98:	e7eb      	b.n	8009f72 <__swsetup_r+0x1e>
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <__swsetup_r+0xd8>)
 8009f9c:	429c      	cmp	r4, r3
 8009f9e:	bf08      	it	eq
 8009fa0:	68ec      	ldreq	r4, [r5, #12]
 8009fa2:	e7e6      	b.n	8009f72 <__swsetup_r+0x1e>
 8009fa4:	0758      	lsls	r0, r3, #29
 8009fa6:	d512      	bpl.n	8009fce <__swsetup_r+0x7a>
 8009fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009faa:	b141      	cbz	r1, 8009fbe <__swsetup_r+0x6a>
 8009fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	d002      	beq.n	8009fba <__swsetup_r+0x66>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff fb6f 	bl	8009698 <_free_r>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fc4:	81a3      	strh	r3, [r4, #12]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	6923      	ldr	r3, [r4, #16]
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f043 0308 	orr.w	r3, r3, #8
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	b94b      	cbnz	r3, 8009fee <__swsetup_r+0x9a>
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe4:	d003      	beq.n	8009fee <__swsetup_r+0x9a>
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 fa07 	bl	800a3fc <__smakebuf_r>
 8009fee:	89a0      	ldrh	r0, [r4, #12]
 8009ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ff4:	f010 0301 	ands.w	r3, r0, #1
 8009ff8:	d00a      	beq.n	800a010 <__swsetup_r+0xbc>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	60a3      	str	r3, [r4, #8]
 8009ffe:	6963      	ldr	r3, [r4, #20]
 800a000:	425b      	negs	r3, r3
 800a002:	61a3      	str	r3, [r4, #24]
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b943      	cbnz	r3, 800a01a <__swsetup_r+0xc6>
 800a008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a00c:	d1ba      	bne.n	8009f84 <__swsetup_r+0x30>
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	0781      	lsls	r1, r0, #30
 800a012:	bf58      	it	pl
 800a014:	6963      	ldrpl	r3, [r4, #20]
 800a016:	60a3      	str	r3, [r4, #8]
 800a018:	e7f4      	b.n	800a004 <__swsetup_r+0xb0>
 800a01a:	2000      	movs	r0, #0
 800a01c:	e7f7      	b.n	800a00e <__swsetup_r+0xba>
 800a01e:	bf00      	nop
 800a020:	20000010 	.word	0x20000010
 800a024:	0800aa64 	.word	0x0800aa64
 800a028:	0800aa84 	.word	0x0800aa84
 800a02c:	0800aa44 	.word	0x0800aa44

0800a030 <abort>:
 800a030:	b508      	push	{r3, lr}
 800a032:	2006      	movs	r0, #6
 800a034:	f000 fa52 	bl	800a4dc <raise>
 800a038:	2001      	movs	r0, #1
 800a03a:	f7f8 f9dd 	bl	80023f8 <_exit>
	...

0800a040 <__sflush_r>:
 800a040:	898a      	ldrh	r2, [r1, #12]
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	4605      	mov	r5, r0
 800a048:	0710      	lsls	r0, r2, #28
 800a04a:	460c      	mov	r4, r1
 800a04c:	d458      	bmi.n	800a100 <__sflush_r+0xc0>
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc05      	bgt.n	800a060 <__sflush_r+0x20>
 800a054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc02      	bgt.n	800a060 <__sflush_r+0x20>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a062:	2e00      	cmp	r6, #0
 800a064:	d0f9      	beq.n	800a05a <__sflush_r+0x1a>
 800a066:	2300      	movs	r3, #0
 800a068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a06c:	682f      	ldr	r7, [r5, #0]
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	d032      	beq.n	800a0d8 <__sflush_r+0x98>
 800a072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	075a      	lsls	r2, r3, #29
 800a078:	d505      	bpl.n	800a086 <__sflush_r+0x46>
 800a07a:	6863      	ldr	r3, [r4, #4]
 800a07c:	1ac0      	subs	r0, r0, r3
 800a07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a080:	b10b      	cbz	r3, 800a086 <__sflush_r+0x46>
 800a082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a084:	1ac0      	subs	r0, r0, r3
 800a086:	2300      	movs	r3, #0
 800a088:	4602      	mov	r2, r0
 800a08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08c:	6a21      	ldr	r1, [r4, #32]
 800a08e:	4628      	mov	r0, r5
 800a090:	47b0      	blx	r6
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	d106      	bne.n	800a0a6 <__sflush_r+0x66>
 800a098:	6829      	ldr	r1, [r5, #0]
 800a09a:	291d      	cmp	r1, #29
 800a09c:	d82c      	bhi.n	800a0f8 <__sflush_r+0xb8>
 800a09e:	4a2a      	ldr	r2, [pc, #168]	; (800a148 <__sflush_r+0x108>)
 800a0a0:	40ca      	lsrs	r2, r1
 800a0a2:	07d6      	lsls	r6, r2, #31
 800a0a4:	d528      	bpl.n	800a0f8 <__sflush_r+0xb8>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6062      	str	r2, [r4, #4]
 800a0aa:	04d9      	lsls	r1, r3, #19
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	d504      	bpl.n	800a0bc <__sflush_r+0x7c>
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	d101      	bne.n	800a0ba <__sflush_r+0x7a>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b903      	cbnz	r3, 800a0bc <__sflush_r+0x7c>
 800a0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0be:	602f      	str	r7, [r5, #0]
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	d0ca      	beq.n	800a05a <__sflush_r+0x1a>
 800a0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d002      	beq.n	800a0d2 <__sflush_r+0x92>
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7ff fae3 	bl	8009698 <_free_r>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d6:	e7c1      	b.n	800a05c <__sflush_r+0x1c>
 800a0d8:	6a21      	ldr	r1, [r4, #32]
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b0      	blx	r6
 800a0e0:	1c41      	adds	r1, r0, #1
 800a0e2:	d1c7      	bne.n	800a074 <__sflush_r+0x34>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c4      	beq.n	800a074 <__sflush_r+0x34>
 800a0ea:	2b1d      	cmp	r3, #29
 800a0ec:	d001      	beq.n	800a0f2 <__sflush_r+0xb2>
 800a0ee:	2b16      	cmp	r3, #22
 800a0f0:	d101      	bne.n	800a0f6 <__sflush_r+0xb6>
 800a0f2:	602f      	str	r7, [r5, #0]
 800a0f4:	e7b1      	b.n	800a05a <__sflush_r+0x1a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e7ad      	b.n	800a05c <__sflush_r+0x1c>
 800a100:	690f      	ldr	r7, [r1, #16]
 800a102:	2f00      	cmp	r7, #0
 800a104:	d0a9      	beq.n	800a05a <__sflush_r+0x1a>
 800a106:	0793      	lsls	r3, r2, #30
 800a108:	680e      	ldr	r6, [r1, #0]
 800a10a:	bf08      	it	eq
 800a10c:	694b      	ldreq	r3, [r1, #20]
 800a10e:	600f      	str	r7, [r1, #0]
 800a110:	bf18      	it	ne
 800a112:	2300      	movne	r3, #0
 800a114:	eba6 0807 	sub.w	r8, r6, r7
 800a118:	608b      	str	r3, [r1, #8]
 800a11a:	f1b8 0f00 	cmp.w	r8, #0
 800a11e:	dd9c      	ble.n	800a05a <__sflush_r+0x1a>
 800a120:	6a21      	ldr	r1, [r4, #32]
 800a122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a124:	4643      	mov	r3, r8
 800a126:	463a      	mov	r2, r7
 800a128:	4628      	mov	r0, r5
 800a12a:	47b0      	blx	r6
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dc06      	bgt.n	800a13e <__sflush_r+0xfe>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e78e      	b.n	800a05c <__sflush_r+0x1c>
 800a13e:	4407      	add	r7, r0
 800a140:	eba8 0800 	sub.w	r8, r8, r0
 800a144:	e7e9      	b.n	800a11a <__sflush_r+0xda>
 800a146:	bf00      	nop
 800a148:	20400001 	.word	0x20400001

0800a14c <_fflush_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b913      	cbnz	r3, 800a15c <_fflush_r+0x10>
 800a156:	2500      	movs	r5, #0
 800a158:	4628      	mov	r0, r5
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	b118      	cbz	r0, 800a166 <_fflush_r+0x1a>
 800a15e:	6983      	ldr	r3, [r0, #24]
 800a160:	b90b      	cbnz	r3, 800a166 <_fflush_r+0x1a>
 800a162:	f000 f887 	bl	800a274 <__sinit>
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <_fflush_r+0x6c>)
 800a168:	429c      	cmp	r4, r3
 800a16a:	d11b      	bne.n	800a1a4 <_fflush_r+0x58>
 800a16c:	686c      	ldr	r4, [r5, #4]
 800a16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0ef      	beq.n	800a156 <_fflush_r+0xa>
 800a176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a178:	07d0      	lsls	r0, r2, #31
 800a17a:	d404      	bmi.n	800a186 <_fflush_r+0x3a>
 800a17c:	0599      	lsls	r1, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_fflush_r+0x3a>
 800a180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a182:	f000 f915 	bl	800a3b0 <__retarget_lock_acquire_recursive>
 800a186:	4628      	mov	r0, r5
 800a188:	4621      	mov	r1, r4
 800a18a:	f7ff ff59 	bl	800a040 <__sflush_r>
 800a18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a190:	07da      	lsls	r2, r3, #31
 800a192:	4605      	mov	r5, r0
 800a194:	d4e0      	bmi.n	800a158 <_fflush_r+0xc>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	059b      	lsls	r3, r3, #22
 800a19a:	d4dd      	bmi.n	800a158 <_fflush_r+0xc>
 800a19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19e:	f000 f908 	bl	800a3b2 <__retarget_lock_release_recursive>
 800a1a2:	e7d9      	b.n	800a158 <_fflush_r+0xc>
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <_fflush_r+0x70>)
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	d101      	bne.n	800a1ae <_fflush_r+0x62>
 800a1aa:	68ac      	ldr	r4, [r5, #8]
 800a1ac:	e7df      	b.n	800a16e <_fflush_r+0x22>
 800a1ae:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <_fflush_r+0x74>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	bf08      	it	eq
 800a1b4:	68ec      	ldreq	r4, [r5, #12]
 800a1b6:	e7da      	b.n	800a16e <_fflush_r+0x22>
 800a1b8:	0800aa64 	.word	0x0800aa64
 800a1bc:	0800aa84 	.word	0x0800aa84
 800a1c0:	0800aa44 	.word	0x0800aa44

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	; 0x5c
 800a1e2:	f7fd fba7 	bl	8007934 <memset>
 800a1e6:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <std+0x38>)
 800a1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <std+0x3c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <std+0x40>)
 800a1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x44>)
 800a1f4:	6224      	str	r4, [r4, #32]
 800a1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800a515 	.word	0x0800a515
 800a200:	0800a537 	.word	0x0800a537
 800a204:	0800a56f 	.word	0x0800a56f
 800a208:	0800a593 	.word	0x0800a593

0800a20c <_cleanup_r>:
 800a20c:	4901      	ldr	r1, [pc, #4]	; (800a214 <_cleanup_r+0x8>)
 800a20e:	f000 b8af 	b.w	800a370 <_fwalk_reent>
 800a212:	bf00      	nop
 800a214:	0800a14d 	.word	0x0800a14d

0800a218 <__sfmoreglue>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	1e4a      	subs	r2, r1, #1
 800a21c:	2568      	movs	r5, #104	; 0x68
 800a21e:	4355      	muls	r5, r2
 800a220:	460e      	mov	r6, r1
 800a222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a226:	f7ff fa87 	bl	8009738 <_malloc_r>
 800a22a:	4604      	mov	r4, r0
 800a22c:	b140      	cbz	r0, 800a240 <__sfmoreglue+0x28>
 800a22e:	2100      	movs	r1, #0
 800a230:	e9c0 1600 	strd	r1, r6, [r0]
 800a234:	300c      	adds	r0, #12
 800a236:	60a0      	str	r0, [r4, #8]
 800a238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a23c:	f7fd fb7a 	bl	8007934 <memset>
 800a240:	4620      	mov	r0, r4
 800a242:	bd70      	pop	{r4, r5, r6, pc}

0800a244 <__sfp_lock_acquire>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__sfp_lock_acquire+0x8>)
 800a246:	f000 b8b3 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	2000083c 	.word	0x2000083c

0800a250 <__sfp_lock_release>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_release+0x8>)
 800a252:	f000 b8ae 	b.w	800a3b2 <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	2000083c 	.word	0x2000083c

0800a25c <__sinit_lock_acquire>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sinit_lock_acquire+0x8>)
 800a25e:	f000 b8a7 	b.w	800a3b0 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20000837 	.word	0x20000837

0800a268 <__sinit_lock_release>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sinit_lock_release+0x8>)
 800a26a:	f000 b8a2 	b.w	800a3b2 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20000837 	.word	0x20000837

0800a274 <__sinit>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff fff0 	bl	800a25c <__sinit_lock_acquire>
 800a27c:	69a3      	ldr	r3, [r4, #24]
 800a27e:	b11b      	cbz	r3, 800a288 <__sinit+0x14>
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bff0 	b.w	800a268 <__sinit_lock_release>
 800a288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a28c:	6523      	str	r3, [r4, #80]	; 0x50
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <__sinit+0x68>)
 800a290:	4a13      	ldr	r2, [pc, #76]	; (800a2e0 <__sinit+0x6c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	62a2      	str	r2, [r4, #40]	; 0x28
 800a296:	42a3      	cmp	r3, r4
 800a298:	bf04      	itt	eq
 800a29a:	2301      	moveq	r3, #1
 800a29c:	61a3      	streq	r3, [r4, #24]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f820 	bl	800a2e4 <__sfp>
 800a2a4:	6060      	str	r0, [r4, #4]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 f81c 	bl	800a2e4 <__sfp>
 800a2ac:	60a0      	str	r0, [r4, #8]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 f818 	bl	800a2e4 <__sfp>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60e0      	str	r0, [r4, #12]
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	6860      	ldr	r0, [r4, #4]
 800a2bc:	f7ff ff82 	bl	800a1c4 <std>
 800a2c0:	68a0      	ldr	r0, [r4, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2109      	movs	r1, #9
 800a2c6:	f7ff ff7d 	bl	800a1c4 <std>
 800a2ca:	68e0      	ldr	r0, [r4, #12]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	2112      	movs	r1, #18
 800a2d0:	f7ff ff78 	bl	800a1c4 <std>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	61a3      	str	r3, [r4, #24]
 800a2d8:	e7d2      	b.n	800a280 <__sinit+0xc>
 800a2da:	bf00      	nop
 800a2dc:	0800a6c4 	.word	0x0800a6c4
 800a2e0:	0800a20d 	.word	0x0800a20d

0800a2e4 <__sfp>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	f7ff ffac 	bl	800a244 <__sfp_lock_acquire>
 800a2ec:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <__sfp+0x84>)
 800a2ee:	681e      	ldr	r6, [r3, #0]
 800a2f0:	69b3      	ldr	r3, [r6, #24]
 800a2f2:	b913      	cbnz	r3, 800a2fa <__sfp+0x16>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ffbd 	bl	800a274 <__sinit>
 800a2fa:	3648      	adds	r6, #72	; 0x48
 800a2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a300:	3b01      	subs	r3, #1
 800a302:	d503      	bpl.n	800a30c <__sfp+0x28>
 800a304:	6833      	ldr	r3, [r6, #0]
 800a306:	b30b      	cbz	r3, 800a34c <__sfp+0x68>
 800a308:	6836      	ldr	r6, [r6, #0]
 800a30a:	e7f7      	b.n	800a2fc <__sfp+0x18>
 800a30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a310:	b9d5      	cbnz	r5, 800a348 <__sfp+0x64>
 800a312:	4b16      	ldr	r3, [pc, #88]	; (800a36c <__sfp+0x88>)
 800a314:	60e3      	str	r3, [r4, #12]
 800a316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a31a:	6665      	str	r5, [r4, #100]	; 0x64
 800a31c:	f000 f847 	bl	800a3ae <__retarget_lock_init_recursive>
 800a320:	f7ff ff96 	bl	800a250 <__sfp_lock_release>
 800a324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a32c:	6025      	str	r5, [r4, #0]
 800a32e:	61a5      	str	r5, [r4, #24]
 800a330:	2208      	movs	r2, #8
 800a332:	4629      	mov	r1, r5
 800a334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a338:	f7fd fafc 	bl	8007934 <memset>
 800a33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a344:	4620      	mov	r0, r4
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	3468      	adds	r4, #104	; 0x68
 800a34a:	e7d9      	b.n	800a300 <__sfp+0x1c>
 800a34c:	2104      	movs	r1, #4
 800a34e:	4638      	mov	r0, r7
 800a350:	f7ff ff62 	bl	800a218 <__sfmoreglue>
 800a354:	4604      	mov	r4, r0
 800a356:	6030      	str	r0, [r6, #0]
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1d5      	bne.n	800a308 <__sfp+0x24>
 800a35c:	f7ff ff78 	bl	800a250 <__sfp_lock_release>
 800a360:	230c      	movs	r3, #12
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	e7ee      	b.n	800a344 <__sfp+0x60>
 800a366:	bf00      	nop
 800a368:	0800a6c4 	.word	0x0800a6c4
 800a36c:	ffff0001 	.word	0xffff0001

0800a370 <_fwalk_reent>:
 800a370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a374:	4606      	mov	r6, r0
 800a376:	4688      	mov	r8, r1
 800a378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a37c:	2700      	movs	r7, #0
 800a37e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a382:	f1b9 0901 	subs.w	r9, r9, #1
 800a386:	d505      	bpl.n	800a394 <_fwalk_reent+0x24>
 800a388:	6824      	ldr	r4, [r4, #0]
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	d1f7      	bne.n	800a37e <_fwalk_reent+0xe>
 800a38e:	4638      	mov	r0, r7
 800a390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a394:	89ab      	ldrh	r3, [r5, #12]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d907      	bls.n	800a3aa <_fwalk_reent+0x3a>
 800a39a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <_fwalk_reent+0x3a>
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	47c0      	blx	r8
 800a3a8:	4307      	orrs	r7, r0
 800a3aa:	3568      	adds	r5, #104	; 0x68
 800a3ac:	e7e9      	b.n	800a382 <_fwalk_reent+0x12>

0800a3ae <__retarget_lock_init_recursive>:
 800a3ae:	4770      	bx	lr

0800a3b0 <__retarget_lock_acquire_recursive>:
 800a3b0:	4770      	bx	lr

0800a3b2 <__retarget_lock_release_recursive>:
 800a3b2:	4770      	bx	lr

0800a3b4 <__swhatbuf_r>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	460e      	mov	r6, r1
 800a3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	b096      	sub	sp, #88	; 0x58
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	461d      	mov	r5, r3
 800a3c4:	da07      	bge.n	800a3d6 <__swhatbuf_r+0x22>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	89b3      	ldrh	r3, [r6, #12]
 800a3cc:	061a      	lsls	r2, r3, #24
 800a3ce:	d410      	bmi.n	800a3f2 <__swhatbuf_r+0x3e>
 800a3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3d4:	e00e      	b.n	800a3f4 <__swhatbuf_r+0x40>
 800a3d6:	466a      	mov	r2, sp
 800a3d8:	f000 f902 	bl	800a5e0 <_fstat_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	dbf2      	blt.n	800a3c6 <__swhatbuf_r+0x12>
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3ea:	425a      	negs	r2, r3
 800a3ec:	415a      	adcs	r2, r3
 800a3ee:	602a      	str	r2, [r5, #0]
 800a3f0:	e7ee      	b.n	800a3d0 <__swhatbuf_r+0x1c>
 800a3f2:	2340      	movs	r3, #64	; 0x40
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	b016      	add	sp, #88	; 0x58
 800a3fa:	bd70      	pop	{r4, r5, r6, pc}

0800a3fc <__smakebuf_r>:
 800a3fc:	898b      	ldrh	r3, [r1, #12]
 800a3fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a400:	079d      	lsls	r5, r3, #30
 800a402:	4606      	mov	r6, r0
 800a404:	460c      	mov	r4, r1
 800a406:	d507      	bpl.n	800a418 <__smakebuf_r+0x1c>
 800a408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	6123      	str	r3, [r4, #16]
 800a410:	2301      	movs	r3, #1
 800a412:	6163      	str	r3, [r4, #20]
 800a414:	b002      	add	sp, #8
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	ab01      	add	r3, sp, #4
 800a41a:	466a      	mov	r2, sp
 800a41c:	f7ff ffca 	bl	800a3b4 <__swhatbuf_r>
 800a420:	9900      	ldr	r1, [sp, #0]
 800a422:	4605      	mov	r5, r0
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff f987 	bl	8009738 <_malloc_r>
 800a42a:	b948      	cbnz	r0, 800a440 <__smakebuf_r+0x44>
 800a42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a430:	059a      	lsls	r2, r3, #22
 800a432:	d4ef      	bmi.n	800a414 <__smakebuf_r+0x18>
 800a434:	f023 0303 	bic.w	r3, r3, #3
 800a438:	f043 0302 	orr.w	r3, r3, #2
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	e7e3      	b.n	800a408 <__smakebuf_r+0xc>
 800a440:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <__smakebuf_r+0x7c>)
 800a442:	62b3      	str	r3, [r6, #40]	; 0x28
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	6020      	str	r0, [r4, #0]
 800a448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	6163      	str	r3, [r4, #20]
 800a452:	9b01      	ldr	r3, [sp, #4]
 800a454:	6120      	str	r0, [r4, #16]
 800a456:	b15b      	cbz	r3, 800a470 <__smakebuf_r+0x74>
 800a458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a45c:	4630      	mov	r0, r6
 800a45e:	f000 f8d1 	bl	800a604 <_isatty_r>
 800a462:	b128      	cbz	r0, 800a470 <__smakebuf_r+0x74>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	89a0      	ldrh	r0, [r4, #12]
 800a472:	4305      	orrs	r5, r0
 800a474:	81a5      	strh	r5, [r4, #12]
 800a476:	e7cd      	b.n	800a414 <__smakebuf_r+0x18>
 800a478:	0800a20d 	.word	0x0800a20d

0800a47c <_malloc_usable_size_r>:
 800a47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a480:	1f18      	subs	r0, r3, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	bfbc      	itt	lt
 800a486:	580b      	ldrlt	r3, [r1, r0]
 800a488:	18c0      	addlt	r0, r0, r3
 800a48a:	4770      	bx	lr

0800a48c <_raise_r>:
 800a48c:	291f      	cmp	r1, #31
 800a48e:	b538      	push	{r3, r4, r5, lr}
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	d904      	bls.n	800a4a0 <_raise_r+0x14>
 800a496:	2316      	movs	r3, #22
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	f04f 30ff 	mov.w	r0, #4294967295
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4a2:	b112      	cbz	r2, 800a4aa <_raise_r+0x1e>
 800a4a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4a8:	b94b      	cbnz	r3, 800a4be <_raise_r+0x32>
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 f830 	bl	800a510 <_getpid_r>
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ba:	f000 b817 	b.w	800a4ec <_kill_r>
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d00a      	beq.n	800a4d8 <_raise_r+0x4c>
 800a4c2:	1c59      	adds	r1, r3, #1
 800a4c4:	d103      	bne.n	800a4ce <_raise_r+0x42>
 800a4c6:	2316      	movs	r3, #22
 800a4c8:	6003      	str	r3, [r0, #0]
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	e7e7      	b.n	800a49e <_raise_r+0x12>
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	4798      	blx	r3
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e7e0      	b.n	800a49e <_raise_r+0x12>

0800a4dc <raise>:
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <raise+0xc>)
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f7ff bfd3 	b.w	800a48c <_raise_r>
 800a4e6:	bf00      	nop
 800a4e8:	20000010 	.word	0x20000010

0800a4ec <_kill_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_kill_r+0x20>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	602b      	str	r3, [r5, #0]
 800a4fa:	f7f7 ff6d 	bl	80023d8 <_kill>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d102      	bne.n	800a508 <_kill_r+0x1c>
 800a502:	682b      	ldr	r3, [r5, #0]
 800a504:	b103      	cbz	r3, 800a508 <_kill_r+0x1c>
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	bd38      	pop	{r3, r4, r5, pc}
 800a50a:	bf00      	nop
 800a50c:	20000830 	.word	0x20000830

0800a510 <_getpid_r>:
 800a510:	f7f7 bf5a 	b.w	80023c8 <_getpid>

0800a514 <__sread>:
 800a514:	b510      	push	{r4, lr}
 800a516:	460c      	mov	r4, r1
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	f000 f894 	bl	800a648 <_read_r>
 800a520:	2800      	cmp	r0, #0
 800a522:	bfab      	itete	ge
 800a524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a526:	89a3      	ldrhlt	r3, [r4, #12]
 800a528:	181b      	addge	r3, r3, r0
 800a52a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a52e:	bfac      	ite	ge
 800a530:	6563      	strge	r3, [r4, #84]	; 0x54
 800a532:	81a3      	strhlt	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__swrite>:
 800a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	461f      	mov	r7, r3
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	05db      	lsls	r3, r3, #23
 800a540:	4605      	mov	r5, r0
 800a542:	460c      	mov	r4, r1
 800a544:	4616      	mov	r6, r2
 800a546:	d505      	bpl.n	800a554 <__swrite+0x1e>
 800a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54c:	2302      	movs	r3, #2
 800a54e:	2200      	movs	r2, #0
 800a550:	f000 f868 	bl	800a624 <_lseek_r>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55e:	81a3      	strh	r3, [r4, #12]
 800a560:	4632      	mov	r2, r6
 800a562:	463b      	mov	r3, r7
 800a564:	4628      	mov	r0, r5
 800a566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a56a:	f000 b817 	b.w	800a59c <_write_r>

0800a56e <__sseek>:
 800a56e:	b510      	push	{r4, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a576:	f000 f855 	bl	800a624 <_lseek_r>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	bf15      	itete	ne
 800a580:	6560      	strne	r0, [r4, #84]	; 0x54
 800a582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a58a:	81a3      	strheq	r3, [r4, #12]
 800a58c:	bf18      	it	ne
 800a58e:	81a3      	strhne	r3, [r4, #12]
 800a590:	bd10      	pop	{r4, pc}

0800a592 <__sclose>:
 800a592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a596:	f000 b813 	b.w	800a5c0 <_close_r>
	...

0800a59c <_write_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	; (800a5bc <_write_r+0x20>)
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f7f7 ff4b 	bl	8002446 <_write>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_write_r+0x1e>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_write_r+0x1e>
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	20000830 	.word	0x20000830

0800a5c0 <_close_r>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	4d06      	ldr	r5, [pc, #24]	; (800a5dc <_close_r+0x1c>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	f7f7 ff57 	bl	800247e <_close>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_close_r+0x1a>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_close_r+0x1a>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	20000830 	.word	0x20000830

0800a5e0 <_fstat_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4d07      	ldr	r5, [pc, #28]	; (800a600 <_fstat_r+0x20>)
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	f7f7 ff52 	bl	8002496 <_fstat>
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	d102      	bne.n	800a5fc <_fstat_r+0x1c>
 800a5f6:	682b      	ldr	r3, [r5, #0]
 800a5f8:	b103      	cbz	r3, 800a5fc <_fstat_r+0x1c>
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
 800a5fe:	bf00      	nop
 800a600:	20000830 	.word	0x20000830

0800a604 <_isatty_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d06      	ldr	r5, [pc, #24]	; (800a620 <_isatty_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	f7f7 ff51 	bl	80024b6 <_isatty>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_isatty_r+0x1a>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_isatty_r+0x1a>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	20000830 	.word	0x20000830

0800a624 <_lseek_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4d07      	ldr	r5, [pc, #28]	; (800a644 <_lseek_r+0x20>)
 800a628:	4604      	mov	r4, r0
 800a62a:	4608      	mov	r0, r1
 800a62c:	4611      	mov	r1, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	602a      	str	r2, [r5, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	f7f7 ff4a 	bl	80024cc <_lseek>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_lseek_r+0x1e>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_lseek_r+0x1e>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20000830 	.word	0x20000830

0800a648 <_read_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d07      	ldr	r5, [pc, #28]	; (800a668 <_read_r+0x20>)
 800a64c:	4604      	mov	r4, r0
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	2200      	movs	r2, #0
 800a654:	602a      	str	r2, [r5, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	f7f7 fed8 	bl	800240c <_read>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_read_r+0x1e>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_read_r+0x1e>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20000830 	.word	0x20000830

0800a66c <_init>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	bf00      	nop
 800a670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a672:	bc08      	pop	{r3}
 800a674:	469e      	mov	lr, r3
 800a676:	4770      	bx	lr

0800a678 <_fini>:
 800a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67a:	bf00      	nop
 800a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a67e:	bc08      	pop	{r3}
 800a680:	469e      	mov	lr, r3
 800a682:	4770      	bx	lr
