
Project_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005408  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e8  080055e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f0  080055f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  2000000c  08005604  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08005604  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e35  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ee  00000000  00000000  00036e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ae3  00000000  00000000  0003bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f79  00000000  00000000  0003e75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef71c  00000000  00000000  000586d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147df0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f4  00000000  00000000  00147e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080055b8 	.word	0x080055b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080055b8 	.word	0x080055b8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <BH1750_Init+0x34>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 800050e:	f000 f813 	bl	8000538 <BH1750_Reset>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d107      	bne.n	8000528 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000518:	2045      	movs	r0, #69	; 0x45
 800051a:	f000 f859 	bl	80005d0 <BH1750_SetMtreg>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <BH1750_Init+0x28>
			return BH1750_OK;
 8000524:	2300      	movs	r3, #0
 8000526:	e000      	b.n	800052a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000528:	2301      	movs	r3, #1
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c

08000538 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800053e:	2307      	movs	r3, #7
 8000540:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <BH1750_Reset+0x30>)
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	1dfa      	adds	r2, r7, #7
 8000548:	230a      	movs	r3, #10
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	2146      	movs	r1, #70	; 0x46
 8000550:	f001 f98c 	bl	800186c <HAL_I2C_Master_Transmit>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d101      	bne.n	800055e <BH1750_Reset+0x26>
		return BH1750_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	e000      	b.n	8000560 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800055e:	2301      	movs	r3, #1
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	2000002c 	.word	0x2000002c

0800056c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d106      	bne.n	800058e <BH1750_SetMode+0x22>
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	095b      	lsrs	r3, r3, #5
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d101      	bne.n	800058e <BH1750_SetMode+0x22>
 800058a:	2301      	movs	r3, #1
 800058c:	e018      	b.n	80005c0 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <BH1750_SetMode+0x30>
 8000598:	2301      	movs	r3, #1
 800059a:	e011      	b.n	80005c0 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 800059c:	79fa      	ldrb	r2, [r7, #7]
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <BH1750_SetMode+0x5c>)
 80005a0:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <BH1750_SetMode+0x60>)
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	1dfa      	adds	r2, r7, #7
 80005a8:	230a      	movs	r3, #10
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	2146      	movs	r1, #70	; 0x46
 80005b0:	f001 f95c 	bl	800186c <HAL_I2C_Master_Transmit>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <BH1750_SetMode+0x52>
		return BH1750_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	2000002c 	.word	0x2000002c

080005d0 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b1e      	cmp	r3, #30
 80005de:	d902      	bls.n	80005e6 <BH1750_SetMtreg+0x16>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d101      	bne.n	80005ea <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e037      	b.n	800065a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 80005ea:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <BH1750_SetMtreg+0x94>)
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	095b      	lsrs	r3, r3, #5
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	f003 031f 	and.w	r3, r3, #31
 8000606:	b25b      	sxtb	r3, r3
 8000608:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <BH1750_SetMtreg+0x98>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	230a      	movs	r3, #10
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	2146      	movs	r1, #70	; 0x46
 8000622:	f001 f923 	bl	800186c <HAL_I2C_Master_Transmit>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <BH1750_SetMtreg+0x98>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	1c5a      	adds	r2, r3, #1
 800063e:	230a      	movs	r3, #10
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2146      	movs	r1, #70	; 0x46
 8000646:	f001 f911 	bl	800186c <HAL_I2C_Master_Transmit>
 800064a:	4603      	mov	r3, r0
 800064c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000658:	2301      	movs	r3, #1
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000030 	.word	0x20000030
 8000668:	2000002c 	.word	0x2000002c

0800066c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <BH1750_ReadLight+0xa0>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f107 0208 	add.w	r2, r7, #8
 800067c:	230a      	movs	r3, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2302      	movs	r3, #2
 8000682:	2146      	movs	r1, #70	; 0x46
 8000684:	f001 f9e6 	bl	8001a54 <HAL_I2C_Master_Receive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d138      	bne.n	8000700 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 800068e:	7a3b      	ldrb	r3, [r7, #8]
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	7a7a      	ldrb	r2, [r7, #9]
 8000694:	4313      	orrs	r3, r2
 8000696:	ee07 3a90 	vmov	s15, r3
 800069a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800069e:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <BH1750_ReadLight+0xa4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b45      	cmp	r3, #69	; 0x45
 80006a8:	d00f      	beq.n	80006ca <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <BH1750_ReadLight+0xa4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b6:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000714 <BH1750_ReadLight+0xa8>
 80006ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006be:	ed97 7a03 	vldr	s14, [r7, #12]
 80006c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <BH1750_ReadLight+0xac>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b21      	cmp	r3, #33	; 0x21
 80006d0:	d003      	beq.n	80006da <BH1750_ReadLight+0x6e>
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <BH1750_ReadLight+0xac>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b11      	cmp	r3, #17
 80006d8:	d107      	bne.n	80006ea <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 80006da:	ed97 7a03 	vldr	s14, [r7, #12]
 80006de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80006e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 80006ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80006ee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800071c <BH1750_ReadLight+0xb0>
 80006f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e000      	b.n	8000702 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8000700:	2301      	movs	r3, #1
}
 8000702:	4618      	mov	r0, r3
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000002c 	.word	0x2000002c
 8000710:	20000030 	.word	0x20000030
 8000714:	428a0000 	.word	0x428a0000
 8000718:	20000028 	.word	0x20000028
 800071c:	3f99999a 	.word	0x3f99999a

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fce5 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f81e 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f9ce 	bl	8000acc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000730:	f000 f96e 	bl	8000a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000734:	f000 f99c 	bl	8000a70 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000738:	f000 f87e 	bl	8000838 <MX_I2C1_Init>
  MX_TIM1_Init();
 800073c:	f000 f8bc 	bl	80008b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hi2c1);
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <main+0x3c>)
 8000742:	f7ff fedd 	bl	8000500 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8000746:	2011      	movs	r0, #17
 8000748:	f7ff ff10 	bl	800056c <BH1750_SetMode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800074c:	2100      	movs	r1, #0
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <main+0x40>)
 8000750:	f003 f82c 	bl	80037ac <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BH1750_ReadLight(&BH1750_lux);
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <main+0x44>)
 8000756:	f7ff ff89 	bl	800066c <BH1750_ReadLight>
 800075a:	e7fb      	b.n	8000754 <main+0x34>
 800075c:	200000b8 	.word	0x200000b8
 8000760:	2000050c 	.word	0x2000050c
 8000764:	20000508 	.word	0x20000508

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 ff16 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800078c:	f001 feb0 	bl	80024f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <SystemClock_Config+0xc8>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <SystemClock_Config+0xc8>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xcc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <SystemClock_Config+0xcc>)
 80007b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <SystemClock_Config+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007dc:	2348      	movs	r3, #72	; 0x48
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e4:	2303      	movs	r3, #3
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fe8f 	bl	8002510 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f8:	f000 fa5a 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f002 f91d 	bl	8002a58 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000824:	f000 fa44 	bl	8000cb0 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C1_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C1_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C1_Init+0x74>)
 8000850:	2201      	movs	r2, #1
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_I2C1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_I2C1_Init+0x74>)
 8000874:	f000 ff6a 	bl	800174c <HAL_I2C_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800087e:	f000 fa17 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C1_Init+0x74>)
 8000886:	f001 fc53 	bl	8002130 <HAL_I2CEx_ConfigAnalogFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000890:	f000 fa0e 	bl	8000cb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_I2C1_Init+0x74>)
 8000898:	f001 fc95 	bl	80021c6 <HAL_I2CEx_ConfigDigitalFilter>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fa05 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000b8 	.word	0x200000b8
 80008b0:	40005400 	.word	0x40005400
 80008b4:	00808cd2 	.word	0x00808cd2

080008b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09a      	sub	sp, #104	; 0x68
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	222c      	movs	r2, #44	; 0x2c
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fe58 	bl	80055a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <MX_TIM1_Init+0x150>)
 80008fa:	4a44      	ldr	r2, [pc, #272]	; (8000a0c <MX_TIM1_Init+0x154>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80008fe:	4b42      	ldr	r3, [pc, #264]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000900:	2247      	movs	r2, #71	; 0x47
 8000902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800090a:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <MX_TIM1_Init+0x150>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_TIM1_Init+0x150>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000924:	4838      	ldr	r0, [pc, #224]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000926:	f002 fe89 	bl	800363c <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f9be 	bl	8000cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800093e:	4619      	mov	r1, r3
 8000940:	4831      	ldr	r0, [pc, #196]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000942:	f003 f941 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800094c:	f000 f9b0 	bl	8000cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000950:	482d      	ldr	r0, [pc, #180]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000952:	f002 feca 	bl	80036ea <HAL_TIM_PWM_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800095c:	f000 f9a8 	bl	8000cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_TIM1_Init+0x150>)
 8000974:	f003 fdb0 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800097e:	f000 f997 	bl	8000cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000982:	2360      	movs	r3, #96	; 0x60
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_TIM1_Init+0x150>)
 80009a8:	f002 fffa 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009b2:	f000 f97d 	bl	8000cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_TIM1_Init+0x150>)
 80009ec:	f003 fe02 	bl	80045f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009f6:	f000 f95b 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM1_Init+0x150>)
 80009fc:	f000 fa02 	bl	8000e04 <HAL_TIM_MspPostInit>

}
 8000a00:	bf00      	nop
 8000a02:	3768      	adds	r7, #104	; 0x68
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000050c 	.word	0x2000050c
 8000a0c:	40010000 	.word	0x40010000

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <MX_USART3_UART_Init+0x5c>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART3_UART_Init+0x58>)
 8000a54:	f003 fe4c 	bl	80046f0 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f927 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000034 	.word	0x20000034
 8000a6c:	40004800 	.word	0x40004800

08000a70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7e:	2206      	movs	r2, #6
 8000a80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a90:	2202      	movs	r2, #2
 8000a92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab4:	f001 fbd3 	bl	800225e <HAL_PCD_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f8f7 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000104 	.word	0x20000104

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b6e      	ldr	r3, [pc, #440]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6d      	ldr	r2, [pc, #436]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6b      	ldr	r3, [pc, #428]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a67      	ldr	r2, [pc, #412]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b65      	ldr	r3, [pc, #404]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b62      	ldr	r3, [pc, #392]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a61      	ldr	r2, [pc, #388]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a5b      	ldr	r2, [pc, #364]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b59      	ldr	r3, [pc, #356]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	4b56      	ldr	r3, [pc, #344]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a55      	ldr	r2, [pc, #340]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a4f      	ldr	r2, [pc, #316]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b72:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a49      	ldr	r2, [pc, #292]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <MX_GPIO_Init+0x1d0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b90:	4843      	ldr	r0, [pc, #268]	; (8000ca0 <MX_GPIO_Init+0x1d4>)
 8000b92:	f000 fdc1 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	4842      	ldr	r0, [pc, #264]	; (8000ca4 <MX_GPIO_Init+0x1d8>)
 8000b9c:	f000 fdbc 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x1dc>)
 8000bb8:	f000 fc02 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bbc:	2332      	movs	r3, #50	; 0x32
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bcc:	230b      	movs	r3, #11
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4834      	ldr	r0, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x1dc>)
 8000bd8:	f000 fbf2 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bdc:	2386      	movs	r3, #134	; 0x86
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bec:	230b      	movs	r3, #11
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	482d      	ldr	r0, [pc, #180]	; (8000cac <MX_GPIO_Init+0x1e0>)
 8000bf8:	f000 fbe2 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bfc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <MX_GPIO_Init+0x1d4>)
 8000c16:	f000 fbd3 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <MX_GPIO_Init+0x1d4>)
 8000c38:	f000 fbc2 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_GPIO_Init+0x1d8>)
 8000c54:	f000 fbb4 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <MX_GPIO_Init+0x1d8>)
 8000c6c:	f000 fba8 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c82:	230b      	movs	r3, #11
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_GPIO_Init+0x1d8>)
 8000c8e:	f000 fb97 	bl	80013c0 <HAL_GPIO_Init>

}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	; 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0aa      	sub	sp, #168	; 0xa8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	2284      	movs	r2, #132	; 0x84
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f004 fc3f 	bl	80055a8 <memset>
  if(hi2c->Instance==I2C1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13c      	bne.n	8000dae <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d38:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 f88a 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d4e:	f7ff ffaf 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d72:	2312      	movs	r3, #18
 8000d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0xbc>)
 8000d92:	f000 fb15 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	37a8      	adds	r7, #168	; 0xa8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x38>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10b      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <HAL_TIM_MspPostInit+0x64>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d11c      	bne.n	8000e60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_TIM_MspPostInit+0x68>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_TIM_MspPostInit+0x68>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_TIM_MspPostInit+0x68>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_TIM_MspPostInit+0x6c>)
 8000e5c:	f000 fab0 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0aa      	sub	sp, #168	; 0xa8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2284      	movs	r2, #132	; 0x84
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 fb87 	bl	80055a8 <memset>
  if(huart->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <HAL_UART_MspInit+0xb4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d13c      	bne.n	8000f1e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 ffd2 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff fef7 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_UART_MspInit+0xb8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_UART_MspInit+0xbc>)
 8000f1a:	f000 fa51 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	37a8      	adds	r7, #168	; 0xa8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020c00 	.word	0x40020c00

08000f34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0ac      	sub	sp, #176	; 0xb0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	2284      	movs	r2, #132	; 0x84
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fb27 	bl	80055a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f62:	d159      	bne.n	8001018 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 ff71 	bl	8002e5c <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f80:	f7ff fe96 	bl	8000cb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f9c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <HAL_PCD_MspInit+0xf0>)
 8000fc4:	f000 f9fc 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_PCD_MspInit+0xf0>)
 8000fe4:	f000 f9ec 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8000ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_PCD_MspInit+0xec>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6453      	str	r3, [r2, #68]	; 0x44
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_PCD_MspInit+0xec>)
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	37b0      	adds	r7, #176	; 0xb0
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f87a 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f004 fa47 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fb25 	bl	8000720 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e4:	080055f8 	.word	0x080055f8
  ldr r2, =_sbss
 80010e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010ec:	2000055c 	.word	0x2000055c

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>

080010f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f92e 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f805 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001102:	f7ff fddb 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f93b 	bl	80013a6 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f911 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008
 8001190:	20000558 	.word	0x20000558

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000558 	.word	0x20000558

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 800121e:	4313      	orrs	r3, r2
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x40>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	05fa0000 	.word	0x05fa0000

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff47 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5c 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e175      	b.n	80016cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8164 	bne.w	80016c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_GPIO_Init+0x56>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b03      	cmp	r3, #3
 8001482:	d017      	beq.n	80014b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80be 	beq.w	80016c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001562:	4a61      	ldr	r2, [pc, #388]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a58      	ldr	r2, [pc, #352]	; (80016ec <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d037      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_GPIO_Init+0x334>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a55      	ldr	r2, [pc, #340]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a54      	ldr	r2, [pc, #336]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a53      	ldr	r2, [pc, #332]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x22a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	; (800170c <HAL_GPIO_Init+0x34c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	; (8001710 <HAL_GPIO_Init+0x350>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x21a>
 80015d6:	2309      	movs	r3, #9
 80015d8:	e012      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015da:	230a      	movs	r3, #10
 80015dc:	e010      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00e      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x328>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_GPIO_Init+0x354>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <HAL_GPIO_Init+0x354>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_GPIO_Init+0x354>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_GPIO_Init+0x354>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_GPIO_Init+0x354>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae86 	bls.w	80013e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40022000 	.word	0x40022000
 8001710:	40022400 	.word	0x40022400
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07f      	b.n	800185e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fac6 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	; 0x24
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800179c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	e006      	b.n	80017d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d104      	bne.n	80017e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_I2C_Init+0x11c>)
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69d9      	ldr	r1, [r3, #28]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	02008000 	.word	0x02008000

0800186c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	4613      	mov	r3, r2
 800187e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	f040 80da 	bne.w	8001a42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2C_Master_Transmit+0x30>
 8001898:	2302      	movs	r3, #2
 800189a:	e0d3      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a4:	f7ff fc76 	bl	8001194 <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2319      	movs	r3, #25
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9e6 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0be      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2221      	movs	r2, #33	; 0x21
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2210      	movs	r2, #16
 80018d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d90e      	bls.n	8001916 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	22ff      	movs	r2, #255	; 0xff
 80018fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	b2da      	uxtb	r2, r3
 8001904:	8979      	ldrh	r1, [r7, #10]
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <HAL_I2C_Master_Transmit+0x1e0>)
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fbdc 	bl	80020cc <I2C_TransferConfig>
 8001914:	e06c      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	b2da      	uxtb	r2, r3
 8001926:	8979      	ldrh	r1, [r7, #10]
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_I2C_Master_Transmit+0x1e0>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fbcb 	bl	80020cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001936:	e05b      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	6a39      	ldr	r1, [r7, #32]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f9e3 	bl	8001d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e07b      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d034      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x184>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	2b00      	cmp	r3, #0
 800198c:	d130      	bne.n	80019f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	2200      	movs	r2, #0
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f975 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e04d      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d90e      	bls.n	80019d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	8979      	ldrh	r1, [r7, #10]
 80019c0:	2300      	movs	r3, #0
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fb7f 	bl	80020cc <I2C_TransferConfig>
 80019ce:	e00f      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fb6e 	bl	80020cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d19e      	bne.n	8001938 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f9c2 	bl	8001d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e01a      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2220      	movs	r2, #32
 8001a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_I2C_Master_Transmit+0x1e4>)
 8001a22:	400b      	ands	r3, r1
 8001a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
  }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	80002000 	.word	0x80002000
 8001a50:	fe00e800 	.word	0xfe00e800

08001a54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	460b      	mov	r3, r1
 8001a62:	817b      	strh	r3, [r7, #10]
 8001a64:	4613      	mov	r3, r2
 8001a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	f040 80db 	bne.w	8001c2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Receive+0x30>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0d4      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fb82 	bl	8001194 <HAL_GetTick>
 8001a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2319      	movs	r3, #25
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f8f2 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0bf      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2222      	movs	r2, #34	; 0x22
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	893a      	ldrh	r2, [r7, #8]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d90e      	bls.n	8001afe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	8979      	ldrh	r1, [r7, #10]
 8001aee:	4b52      	ldr	r3, [pc, #328]	; (8001c38 <HAL_I2C_Master_Receive+0x1e4>)
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fae8 	bl	80020cc <I2C_TransferConfig>
 8001afc:	e06d      	b.n	8001bda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	8979      	ldrh	r1, [r7, #10]
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_I2C_Master_Receive+0x1e4>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fad7 	bl	80020cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b1e:	e05c      	b.n	8001bda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6a39      	ldr	r1, [r7, #32]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f96b 	bl	8001e00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e07c      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d034      	beq.n	8001bda <HAL_I2C_Master_Receive+0x186>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d130      	bne.n	8001bda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f880 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e04d      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	d90e      	bls.n	8001bba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fa8a 	bl	80020cc <I2C_TransferConfig>
 8001bb8:	e00f      	b.n	8001bda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	8979      	ldrh	r1, [r7, #10]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa79 	bl	80020cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d19d      	bne.n	8001b20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	6a39      	ldr	r1, [r7, #32]
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f8cd 	bl	8001d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e01a      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_I2C_Master_Receive+0x1e8>)
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	80002400 	.word	0x80002400
 8001c3c:	fe00e800 	.word	0xfe00e800

08001c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d103      	bne.n	8001c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d007      	beq.n	8001c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	619a      	str	r2, [r3, #24]
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c98:	e022      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d01e      	beq.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca2:	f7ff fa77 	bl	8001194 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d302      	bcc.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d113      	bne.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e00f      	b.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d0cd      	beq.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d14:	e02c      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f8ea 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e02a      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d01e      	beq.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d32:	f7ff fa2f 	bl	8001194 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d302      	bcc.n	8001d48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d113      	bne.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e007      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d1cb      	bne.n	8001d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d94:	e028      	b.n	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8aa 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e026      	b.n	8001df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001daa:	f7ff f9f3 	bl	8001194 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d302      	bcc.n	8001dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d113      	bne.n	8001de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	f043 0220 	orr.w	r2, r3, #32
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d1cf      	bne.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e0c:	e064      	b.n	8001ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f86e 	bl	8001ef4 <I2C_IsErrorOccurred>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e062      	b.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d138      	bne.n	8001ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d105      	bne.n	8001e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e04e      	b.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b10      	cmp	r3, #16
 8001e56:	d107      	bne.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2204      	movs	r2, #4
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
 8001e66:	e002      	b.n	8001e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2220      	movs	r2, #32
 8001e74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e022      	b.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea2:	f7ff f977 	bl	8001194 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10f      	bne.n	8001ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	f043 0220 	orr.w	r2, r3, #32
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e007      	b.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d193      	bne.n	8001e0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	fe00e800 	.word	0xfe00e800

08001ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d075      	beq.n	800200c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f28:	e056      	b.n	8001fd8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d052      	beq.n	8001fd8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f32:	f7ff f92f 	bl	8001194 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <I2C_IsErrorOccurred+0x54>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d147      	bne.n	8001fd8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6a:	d12e      	bne.n	8001fca <I2C_IsErrorOccurred+0xd6>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f72:	d02a      	beq.n	8001fca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d027      	beq.n	8001fca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f88:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f8a:	f7ff f903 	bl	8001194 <HAL_GetTick>
 8001f8e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f90:	e01b      	b.n	8001fca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f92:	f7ff f8ff 	bl	8001194 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b19      	cmp	r3, #25
 8001f9e:	d914      	bls.n	8001fca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d1dc      	bne.n	8001f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d003      	beq.n	8001fee <I2C_IsErrorOccurred+0xfa>
 8001fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d09d      	beq.n	8001f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002050:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800207a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01c      	beq.n	80020bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fddc 	bl	8001c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <I2C_IsErrorOccurred+0x1d4>)
 8002094:	400b      	ands	r3, r1
 8002096:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80020bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	fe00e800 	.word	0xfe00e800

080020cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	4613      	mov	r3, r2
 80020dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020de:	897b      	ldrh	r3, [r7, #10]
 80020e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020ec:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020fa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	0d5b      	lsrs	r3, r3, #21
 8002106:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <I2C_TransferConfig+0x60>)
 800210c:	430b      	orrs	r3, r1
 800210e:	43db      	mvns	r3, r3
 8002110:	ea02 0103 	and.w	r1, r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	03ff63ff 	.word	0x03ff63ff

08002130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	d138      	bne.n	80021b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002150:	2302      	movs	r3, #2
 8002152:	e032      	b.n	80021ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2224      	movs	r2, #36	; 0x24
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d139      	bne.n	8002250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e033      	b.n	8002252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2224      	movs	r2, #36	; 0x24
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800225e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002260:	b08f      	sub	sp, #60	; 0x3c
 8002262:	af0a      	add	r7, sp, #40	; 0x28
 8002264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e116      	b.n	800249e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fe52 	bl	8000f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2203      	movs	r2, #3
 8002294:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fec0 	bl	8005034 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	687e      	ldr	r6, [r7, #4]
 80022bc:	466d      	mov	r5, sp
 80022be:	f106 0410 	add.w	r4, r6, #16
 80022c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d2:	1d33      	adds	r3, r6, #4
 80022d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	f002 fe54 	bl	8004f84 <USB_CoreInit>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0d7      	b.n	800249e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 feae 	bl	8005056 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e04a      	b.n	8002396 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	333d      	adds	r3, #61	; 0x3d
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	333c      	adds	r3, #60	; 0x3c
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	b298      	uxth	r0, r3
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3342      	adds	r3, #66	; 0x42
 800233c:	4602      	mov	r2, r0
 800233e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	333f      	adds	r3, #63	; 0x3f
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3344      	adds	r3, #68	; 0x44
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3348      	adds	r3, #72	; 0x48
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3350      	adds	r3, #80	; 0x50
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	3301      	adds	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	429a      	cmp	r2, r3
 800239e:	d3af      	bcc.n	8002300 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e044      	b.n	8002430 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3301      	adds	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	7bfa      	ldrb	r2, [r7, #15]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3b5      	bcc.n	80023a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	687e      	ldr	r6, [r7, #4]
 8002442:	466d      	mov	r5, sp
 8002444:	f106 0410 	add.w	r4, r6, #16
 8002448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002454:	e885 0003 	stmia.w	r5, {r0, r1}
 8002458:	1d33      	adds	r3, r6, #4
 800245a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245c:	6838      	ldr	r0, [r7, #0]
 800245e:	f002 fe47 	bl	80050f0 <USB_DevInit>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e014      	b.n	800249e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f80b 	bl	80024a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f801 	bl	800549e <USB_DevDisconnect>

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_PCDEx_ActivateLPM+0x44>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	10000003 	.word	0x10000003

080024f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40007000 	.word	0x40007000

08002510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e291      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8087 	beq.w	8002642 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002534:	4b96      	ldr	r3, [pc, #600]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b04      	cmp	r3, #4
 800253e:	d00c      	beq.n	800255a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002540:	4b93      	ldr	r3, [pc, #588]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
 800254c:	4b90      	ldr	r3, [pc, #576]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002558:	d10b      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255a:	4b8d      	ldr	r3, [pc, #564]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d06c      	beq.n	8002640 <HAL_RCC_OscConfig+0x130>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d168      	bne.n	8002640 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e26b      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x7a>
 800257c:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a83      	ldr	r2, [pc, #524]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e02e      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10c      	bne.n	80025ac <HAL_RCC_OscConfig+0x9c>
 8002592:	4b7f      	ldr	r3, [pc, #508]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7e      	ldr	r2, [pc, #504]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b7c      	ldr	r3, [pc, #496]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a7b      	ldr	r2, [pc, #492]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	e01d      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0xc0>
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a72      	ldr	r2, [pc, #456]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0xd8>
 80025d0:	4b6f      	ldr	r3, [pc, #444]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6e      	ldr	r2, [pc, #440]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6b      	ldr	r2, [pc, #428]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fdd0 	bl	8001194 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7fe fdcc 	bl	8001194 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e21f      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	4b61      	ldr	r3, [pc, #388]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0xe8>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fdbc 	bl	8001194 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fdb8 	bl	8001194 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e20b      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	4b57      	ldr	r3, [pc, #348]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x110>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d069      	beq.n	8002722 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800264e:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265a:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x190>
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_RCC_OscConfig+0x17a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1df      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	493d      	ldr	r1, [pc, #244]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	e040      	b.n	8002722 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d023      	beq.n	80026f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a8:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a38      	ldr	r2, [pc, #224]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd6e 	bl	8001194 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd6a 	bl	8001194 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1bd      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4929      	ldr	r1, [pc, #164]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fd4a 	bl	8001194 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002704:	f7fe fd46 	bl	8001194 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e199      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d038      	beq.n	80027a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d019      	beq.n	800276a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fd27 	bl	8001194 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fd23 	bl	8001194 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e176      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x23a>
 8002768:	e01a      	b.n	80027a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <HAL_RCC_OscConfig+0x280>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fd0d 	bl	8001194 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe fd09 	bl	8001194 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d903      	bls.n	8002794 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e15c      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
 8002790:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	4b91      	ldr	r3, [pc, #580]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a4 	beq.w	80028f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b8b      	ldr	r3, [pc, #556]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a87      	ldr	r2, [pc, #540]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b85      	ldr	r3, [pc, #532]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027e2:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0x4d0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a7e      	ldr	r2, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fcd1 	bl	8001194 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fccd 	bl	8001194 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e120      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002808:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x4d0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x31a>
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a6e      	ldr	r2, [pc, #440]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e02d      	b.n	8002886 <HAL_RCC_OscConfig+0x376>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x33c>
 8002832:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a69      	ldr	r2, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
 800284a:	e01c      	b.n	8002886 <HAL_RCC_OscConfig+0x376>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x35e>
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	; 0x70
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a5d      	ldr	r2, [pc, #372]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x376>
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	4a5a      	ldr	r2, [pc, #360]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
 800287a:	4b58      	ldr	r3, [pc, #352]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a57      	ldr	r2, [pc, #348]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe fc81 	bl	8001194 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fc7d 	bl	8001194 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0ce      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x386>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fc6b 	bl	8001194 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fc67 	bl	8001194 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0b8      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a4 	beq.w	8002a48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d06b      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d149      	bne.n	80029a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fc38 	bl	8001194 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fc34 	bl	8001194 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e087      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	019b      	lsls	r3, r3, #6
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	4313      	orrs	r3, r2
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800296e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002972:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800297a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fc08 	bl	8001194 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002988:	f7fe fc04 	bl	8001194 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e057      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x478>
 80029a6:	e04f      	b.n	8002a48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fbee 	bl	8001194 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fbea 	bl	8001194 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e03d      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x4ac>
 80029da:	e035      	b.n	8002a48 <HAL_RCC_OscConfig+0x538>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCC_OscConfig+0x544>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d028      	beq.n	8002a44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d121      	bne.n	8002a44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d11a      	bne.n	8002a44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d0      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 020f 	bic.w	r2, r3, #15
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ada:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e073      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4936      	ldr	r1, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fb22 	bl	8001194 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fb1e 	bl	8001194 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e053      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d210      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 020f 	bic.w	r2, r3, #15
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1cc>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1d0>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fa7e 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	080055d0 	.word	0x080055d0
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	2300      	movs	r3, #0
 8002c42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c48:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x40>
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	f200 80bd 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c62:	e0b7      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c66:	60bb      	str	r3, [r7, #8]
      break;
 8002c68:	e0b7      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6a:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c6c:	60bb      	str	r3, [r7, #8]
      break;
 8002c6e:	e0b4      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c70:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c7a:	4b5b      	ldr	r3, [pc, #364]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04d      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c86:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	099b      	lsrs	r3, r3, #6
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	ea02 0800 	and.w	r8, r2, r0
 8002c9e:	ea03 0901 	and.w	r9, r3, r1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	014b      	lsls	r3, r1, #5
 8002cb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cb4:	0142      	lsls	r2, r0, #5
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	ebb0 0008 	subs.w	r0, r0, r8
 8002cbe:	eb61 0109 	sbc.w	r1, r1, r9
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	018b      	lsls	r3, r1, #6
 8002ccc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cd0:	0182      	lsls	r2, r0, #6
 8002cd2:	1a12      	subs	r2, r2, r0
 8002cd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	00d9      	lsls	r1, r3, #3
 8002ce2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce6:	00d0      	lsls	r0, r2, #3
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	eb12 0208 	adds.w	r2, r2, r8
 8002cf0:	eb43 0309 	adc.w	r3, r3, r9
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	0259      	lsls	r1, r3, #9
 8002cfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d02:	0250      	lsls	r0, r2, #9
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f7fd fa78 	bl	8000208 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	e04a      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	ea02 0400 	and.w	r4, r2, r0
 8002d3a:	ea03 0501 	and.w	r5, r3, r1
 8002d3e:	4620      	mov	r0, r4
 8002d40:	4629      	mov	r1, r5
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d50:	0142      	lsls	r2, r0, #5
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	1b00      	subs	r0, r0, r4
 8002d58:	eb61 0105 	sbc.w	r1, r1, r5
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	018b      	lsls	r3, r1, #6
 8002d66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d6a:	0182      	lsls	r2, r0, #6
 8002d6c:	1a12      	subs	r2, r2, r0
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d80:	00d0      	lsls	r0, r2, #3
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	1912      	adds	r2, r2, r4
 8002d88:	eb45 0303 	adc.w	r3, r5, r3
 8002d8c:	f04f 0000 	mov.w	r0, #0
 8002d90:	f04f 0100 	mov.w	r1, #0
 8002d94:	0299      	lsls	r1, r3, #10
 8002d96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d9a:	0290      	lsls	r0, r2, #10
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f7fd fa2c 	bl	8000208 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	60bb      	str	r3, [r7, #8]
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dd6:	60bb      	str	r3, [r7, #8]
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	68bb      	ldr	r3, [r7, #8]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	080055e0 	.word	0x080055e0

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080055e0 	.word	0x080055e0

08002e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e84:	4b69      	ldr	r3, [pc, #420]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a68      	ldr	r2, [pc, #416]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e8e:	6093      	str	r3, [r2, #8]
 8002e90:	4b66      	ldr	r3, [pc, #408]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	4964      	ldr	r1, [pc, #400]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d017      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	4959      	ldr	r1, [pc, #356]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d017      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef2:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ef8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	494a      	ldr	r1, [pc, #296]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 808b 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a39      	ldr	r2, [pc, #228]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4c:	4b37      	ldr	r3, [pc, #220]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f58:	4b35      	ldr	r3, [pc, #212]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f64:	f7fe f916 	bl	8001194 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe f912 	bl	8001194 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e357      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d035      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d02e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a1a      	ldr	r2, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fca:	4a18      	ldr	r2, [pc, #96]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d114      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f8da 	bl	8001194 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f8d6 	bl	8001194 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e319      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003022:	400b      	ands	r3, r1
 8003024:	4901      	ldr	r1, [pc, #4]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
 800302a:	e00b      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	0ffffcff 	.word	0x0ffffcff
 8003038:	4bb1      	ldr	r3, [pc, #708]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4ab0      	ldr	r2, [pc, #704]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003042:	6093      	str	r3, [r2, #8]
 8003044:	4bae      	ldr	r3, [pc, #696]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	49ab      	ldr	r1, [pc, #684]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003062:	4ba7      	ldr	r3, [pc, #668]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	4aa5      	ldr	r2, [pc, #660]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003072:	4ba3      	ldr	r3, [pc, #652]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003074:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	49a0      	ldr	r1, [pc, #640]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003090:	4b9b      	ldr	r3, [pc, #620]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309e:	4998      	ldr	r1, [pc, #608]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b2:	4b93      	ldr	r3, [pc, #588]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c0:	498f      	ldr	r1, [pc, #572]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030d4:	4b8a      	ldr	r3, [pc, #552]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	4987      	ldr	r1, [pc, #540]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030f6:	4b82      	ldr	r3, [pc, #520]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	497e      	ldr	r1, [pc, #504]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003118:	4b79      	ldr	r3, [pc, #484]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	4976      	ldr	r1, [pc, #472]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800313a:	4b71      	ldr	r3, [pc, #452]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f023 020c 	bic.w	r2, r3, #12
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	496d      	ldr	r1, [pc, #436]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316a:	4965      	ldr	r1, [pc, #404]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800317e:	4b60      	ldr	r3, [pc, #384]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318c:	495c      	ldr	r1, [pc, #368]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	4954      	ldr	r1, [pc, #336]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031c2:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	494b      	ldr	r1, [pc, #300]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031e4:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	4943      	ldr	r1, [pc, #268]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003206:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	493a      	ldr	r1, [pc, #232]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003228:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003236:	4932      	ldr	r1, [pc, #200]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d011      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800324a:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003258:	4929      	ldr	r1, [pc, #164]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003268:	d101      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800326a:	2301      	movs	r3, #1
 800326c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	4919      	ldr	r1, [pc, #100]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032bc:	4910      	ldr	r1, [pc, #64]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d006      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80d9 	beq.w	800348a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a08      	ldr	r2, [pc, #32]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e4:	f7fd ff56 	bl	8001194 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ea:	e00b      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032ec:	f7fd ff52 	bl	8001194 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d904      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e197      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003304:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ed      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d021      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11d      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003332:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	0e1b      	lsrs	r3, r3, #24
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	019a      	lsls	r2, r3, #6
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	071b      	lsls	r3, r3, #28
 8003358:	4957      	ldr	r1, [pc, #348]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d02e      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d129      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	0f1b      	lsrs	r3, r3, #28
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	019a      	lsls	r2, r3, #6
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	071b      	lsls	r3, r3, #28
 80033c0:	493d      	ldr	r1, [pc, #244]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033c8:	4b3b      	ldr	r3, [pc, #236]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ce:	f023 021f 	bic.w	r2, r3, #31
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01d      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f2:	0e1b      	lsrs	r3, r3, #24
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003400:	0f1b      	lsrs	r3, r3, #28
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	019a      	lsls	r2, r3, #6
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	431a      	orrs	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	431a      	orrs	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	071b      	lsls	r3, r3, #28
 8003420:	4925      	ldr	r1, [pc, #148]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d011      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	019a      	lsls	r2, r3, #6
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	071b      	lsls	r3, r3, #28
 8003450:	4919      	ldr	r1, [pc, #100]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fd fe96 	bl	8001194 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800346c:	f7fd fe92 	bl	8001194 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0d7      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 80cd 	bne.w	800362c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349e:	f7fd fe79 	bl	8001194 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034a4:	e00a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034a6:	f7fd fe75 	bl	8001194 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	; 0x64
 80034b2:	d903      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0ba      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034bc:	4b5e      	ldr	r3, [pc, #376]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c8:	d0ed      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x682>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d02e      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d12a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003500:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003506:	0f1b      	lsrs	r3, r3, #28
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	019a      	lsls	r2, r3, #6
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	431a      	orrs	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	061b      	lsls	r3, r3, #24
 8003520:	431a      	orrs	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	071b      	lsls	r3, r3, #28
 8003526:	4944      	ldr	r1, [pc, #272]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800352e:	4b42      	ldr	r3, [pc, #264]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	493d      	ldr	r1, [pc, #244]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d022      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800355c:	d11d      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	0e1b      	lsrs	r3, r3, #24
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	0f1b      	lsrs	r3, r3, #28
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	061b      	lsls	r3, r3, #24
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4929      	ldr	r1, [pc, #164]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d028      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	0e1b      	lsrs	r3, r3, #24
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035b4:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	019a      	lsls	r2, r3, #6
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	4917      	ldr	r1, [pc, #92]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	4911      	ldr	r1, [pc, #68]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7fd fdc6 	bl	8001194 <HAL_GetTick>
 8003608:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800360c:	f7fd fdc2 	bl	8001194 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e007      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362a:	d1ef      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e049      	b.n	80036e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fbae 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fb6e 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e049      	b.n	8003790 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f841 	bl	8003798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f000 fb17 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x24>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e03c      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d109      	bne.n	80037ea <HAL_TIM_PWM_Start+0x3e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e02f      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d109      	bne.n	8003804 <HAL_TIM_PWM_Start+0x58>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e022      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d109      	bne.n	800381e <HAL_TIM_PWM_Start+0x72>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	bf14      	ite	ne
 8003816:	2301      	movne	r3, #1
 8003818:	2300      	moveq	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e015      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b10      	cmp	r3, #16
 8003822:	d109      	bne.n	8003838 <HAL_TIM_PWM_Start+0x8c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e008      	b.n	800384a <HAL_TIM_PWM_Start+0x9e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e092      	b.n	8003978 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start+0xb6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003860:	e023      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start+0xc6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	e01b      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start+0xd6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	e013      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0xe6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003890:	e00b      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b10      	cmp	r3, #16
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xf6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a0:	e003      	b.n	80038aa <HAL_TIM_PWM_Start+0xfe>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fdea 	bl	800448c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a30      	ldr	r2, [pc, #192]	; (8003980 <HAL_TIM_PWM_Start+0x1d4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIM_PWM_Start+0x120>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <HAL_TIM_PWM_Start+0x1d8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_PWM_Start+0x124>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_TIM_PWM_Start+0x126>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a25      	ldr	r2, [pc, #148]	; (8003980 <HAL_TIM_PWM_Start+0x1d4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d01d      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_TIM_PWM_Start+0x1dc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a20      	ldr	r2, [pc, #128]	; (800398c <HAL_TIM_PWM_Start+0x1e0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_TIM_PWM_Start+0x1e4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_TIM_PWM_Start+0x1d8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_TIM_PWM_Start+0x1e8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_TIM_PWM_Start+0x18a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_TIM_PWM_Start+0x1ec>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d115      	bne.n	8003962 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <HAL_TIM_PWM_Start+0x1f0>)
 800393e:	4013      	ands	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b06      	cmp	r3, #6
 8003946:	d015      	beq.n	8003974 <HAL_TIM_PWM_Start+0x1c8>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d011      	beq.n	8003974 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	e008      	b.n	8003974 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0201 	orr.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	e000      	b.n	8003976 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003974:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40010000 	.word	0x40010000
 8003984:	40010400 	.word	0x40010400
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40014000 	.word	0x40014000
 8003998:	40001800 	.word	0x40001800
 800399c:	00010007 	.word	0x00010007

080039a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0ff      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b14      	cmp	r3, #20
 80039ca:	f200 80f0 	bhi.w	8003bae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003baf 	.word	0x08003baf
 80039dc:	08003baf 	.word	0x08003baf
 80039e0:	08003baf 	.word	0x08003baf
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003baf 	.word	0x08003baf
 80039ec:	08003baf 	.word	0x08003baf
 80039f0:	08003baf 	.word	0x08003baf
 80039f4:	08003aab 	.word	0x08003aab
 80039f8:	08003baf 	.word	0x08003baf
 80039fc:	08003baf 	.word	0x08003baf
 8003a00:	08003baf 	.word	0x08003baf
 8003a04:	08003aeb 	.word	0x08003aeb
 8003a08:	08003baf 	.word	0x08003baf
 8003a0c:	08003baf 	.word	0x08003baf
 8003a10:	08003baf 	.word	0x08003baf
 8003a14:	08003b2d 	.word	0x08003b2d
 8003a18:	08003baf 	.word	0x08003baf
 8003a1c:	08003baf 	.word	0x08003baf
 8003a20:	08003baf 	.word	0x08003baf
 8003a24:	08003b6d 	.word	0x08003b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa34 	bl	8003e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e0a5      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fa86 	bl	8003f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e084      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fadd 	bl	8004070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e064      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fb33 	bl	800415c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e043      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb6a 	bl	800420c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b6a:	e023      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb9c 	bl	80042b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bac:	e002      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop

08003bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_ConfigClockSource+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0b4      	b.n	8003d4e <HAL_TIM_ConfigClockSource+0x186>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_TIM_ConfigClockSource+0x190>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d03e      	beq.n	8003c9c <HAL_TIM_ConfigClockSource+0xd4>
 8003c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c22:	f200 8087 	bhi.w	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2a:	f000 8086 	beq.w	8003d3a <HAL_TIM_ConfigClockSource+0x172>
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	d87f      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c34:	2b70      	cmp	r3, #112	; 0x70
 8003c36:	d01a      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0xa6>
 8003c38:	2b70      	cmp	r3, #112	; 0x70
 8003c3a:	d87b      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c3c:	2b60      	cmp	r3, #96	; 0x60
 8003c3e:	d050      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x11a>
 8003c40:	2b60      	cmp	r3, #96	; 0x60
 8003c42:	d877      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c44:	2b50      	cmp	r3, #80	; 0x50
 8003c46:	d03c      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c48:	2b50      	cmp	r3, #80	; 0x50
 8003c4a:	d873      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d058      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0x13a>
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d86f      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d064      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x15a>
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d86b      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d060      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x15a>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d867      	bhi.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d05c      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x15a>
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d05a      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	e062      	b.n	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6899      	ldr	r1, [r3, #8]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f000 fbe5 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	609a      	str	r2, [r3, #8]
      break;
 8003c9a:	e04f      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6899      	ldr	r1, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f000 fbce 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cbe:	609a      	str	r2, [r3, #8]
      break;
 8003cc0:	e03c      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 fb42 	bl	8004358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2150      	movs	r1, #80	; 0x50
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fb9b 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e02c      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f000 fb61 	bl	80043b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2160      	movs	r1, #96	; 0x60
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb8b 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d00:	e01c      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f000 fb22 	bl	8004358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fb7b 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d20:	e00c      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 fb72 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d32:	e003      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e000      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	fffeff88 	.word	0xfffeff88

08003d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a40      	ldr	r2, [pc, #256]	; (8003e70 <TIM_Base_SetConfig+0x114>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <TIM_Base_SetConfig+0x40>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d00f      	beq.n	8003d9c <TIM_Base_SetConfig+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a3d      	ldr	r2, [pc, #244]	; (8003e74 <TIM_Base_SetConfig+0x118>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_Base_SetConfig+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3c      	ldr	r2, [pc, #240]	; (8003e78 <TIM_Base_SetConfig+0x11c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <TIM_Base_SetConfig+0x120>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <TIM_Base_SetConfig+0x124>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d108      	bne.n	8003dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <TIM_Base_SetConfig+0x114>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02b      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d027      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <TIM_Base_SetConfig+0x118>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d023      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <TIM_Base_SetConfig+0x11c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01f      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <TIM_Base_SetConfig+0x120>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <TIM_Base_SetConfig+0x124>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <TIM_Base_SetConfig+0x128>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a27      	ldr	r2, [pc, #156]	; (8003e88 <TIM_Base_SetConfig+0x12c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a26      	ldr	r2, [pc, #152]	; (8003e8c <TIM_Base_SetConfig+0x130>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <TIM_Base_SetConfig+0x134>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <TIM_Base_SetConfig+0x138>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <TIM_Base_SetConfig+0x13c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <TIM_Base_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_Base_SetConfig+0xf8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <TIM_Base_SetConfig+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d103      	bne.n	8003e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	615a      	str	r2, [r3, #20]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	40001800 	.word	0x40001800
 8003e94:	40001c00 	.word	0x40001c00
 8003e98:	40002000 	.word	0x40002000

08003e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <TIM_OC1_SetConfig+0xd8>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 0302 	bic.w	r3, r3, #2
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <TIM_OC1_SetConfig+0xdc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_OC1_SetConfig+0x64>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <TIM_OC1_SetConfig+0xe0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10c      	bne.n	8003f1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0308 	bic.w	r3, r3, #8
 8003f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <TIM_OC1_SetConfig+0xdc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC1_SetConfig+0x8e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a15      	ldr	r2, [pc, #84]	; (8003f7c <TIM_OC1_SetConfig+0xe0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	fffeff8f 	.word	0xfffeff8f
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0210 	bic.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <TIM_OC2_SetConfig+0xe4>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0320 	bic.w	r3, r3, #32
 8003fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <TIM_OC2_SetConfig+0xe8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC2_SetConfig+0x68>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a22      	ldr	r2, [pc, #136]	; (800406c <TIM_OC2_SetConfig+0xec>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d10d      	bne.n	8004004 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <TIM_OC2_SetConfig+0xe8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_OC2_SetConfig+0x94>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <TIM_OC2_SetConfig+0xec>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d113      	bne.n	800403c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800401a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	621a      	str	r2, [r3, #32]
}
 8004056:	bf00      	nop
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	feff8fff 	.word	0xfeff8fff
 8004068:	40010000 	.word	0x40010000
 800406c:	40010400 	.word	0x40010400

08004070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4b2d      	ldr	r3, [pc, #180]	; (8004150 <TIM_OC3_SetConfig+0xe0>)
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <TIM_OC3_SetConfig+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC3_SetConfig+0x66>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <TIM_OC3_SetConfig+0xe8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d10d      	bne.n	80040f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <TIM_OC3_SetConfig+0xe4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_OC3_SetConfig+0x92>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <TIM_OC3_SetConfig+0xe8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d113      	bne.n	800412a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	fffeff8f 	.word	0xfffeff8f
 8004154:	40010000 	.word	0x40010000
 8004158:	40010400 	.word	0x40010400

0800415c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <TIM_OC4_SetConfig+0xa4>)
 8004188:	4013      	ands	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	031b      	lsls	r3, r3, #12
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <TIM_OC4_SetConfig+0xa8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_OC4_SetConfig+0x68>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <TIM_OC4_SetConfig+0xac>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d109      	bne.n	80041d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	019b      	lsls	r3, r3, #6
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	feff8fff 	.word	0xfeff8fff
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <TIM_OC5_SetConfig+0x98>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800424c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <TIM_OC5_SetConfig+0x9c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_OC5_SetConfig+0x5e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a11      	ldr	r2, [pc, #68]	; (80042ac <TIM_OC5_SetConfig+0xa0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d109      	bne.n	800427e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	fffeff8f 	.word	0xfffeff8f
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <TIM_OC6_SetConfig+0x9c>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	051b      	lsls	r3, r3, #20
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <TIM_OC6_SetConfig+0xa0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_OC6_SetConfig+0x60>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <TIM_OC6_SetConfig+0xa4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	feff8fff 	.word	0xfeff8fff
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0210 	bic.w	r2, r3, #16
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	f043 0307 	orr.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e06d      	b.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800452a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d01d      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40001800 	.word	0x40001800

080045f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800460c:	2302      	movs	r3, #2
 800460e:	e065      	b.n	80046dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d115      	bne.n	80046ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	051b      	lsls	r3, r3, #20
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e040      	b.n	8004784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fbae 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	; 0x24
 800471c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f82c 	bl	800478c <UART_SetConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e022      	b.n	8004784 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa82 	bl	8004c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb09 	bl	8004d94 <UART_CheckIdleState>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4ba7      	ldr	r3, [pc, #668]	; (8004a54 <UART_SetConfig+0x2c8>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6979      	ldr	r1, [r7, #20]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a95      	ldr	r2, [pc, #596]	; (8004a58 <UART_SetConfig+0x2cc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d120      	bne.n	800484a <UART_SetConfig+0xbe>
 8004808:	4b94      	ldr	r3, [pc, #592]	; (8004a5c <UART_SetConfig+0x2d0>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b03      	cmp	r3, #3
 8004814:	d816      	bhi.n	8004844 <UART_SetConfig+0xb8>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <UART_SetConfig+0x90>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800482d 	.word	0x0800482d
 8004820:	08004839 	.word	0x08004839
 8004824:	08004833 	.word	0x08004833
 8004828:	0800483f 	.word	0x0800483f
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e14f      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004832:	2302      	movs	r3, #2
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e14c      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004838:	2304      	movs	r3, #4
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e149      	b.n	8004ad2 <UART_SetConfig+0x346>
 800483e:	2308      	movs	r3, #8
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e146      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004844:	2310      	movs	r3, #16
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e143      	b.n	8004ad2 <UART_SetConfig+0x346>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a84      	ldr	r2, [pc, #528]	; (8004a60 <UART_SetConfig+0x2d4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d132      	bne.n	80048ba <UART_SetConfig+0x12e>
 8004854:	4b81      	ldr	r3, [pc, #516]	; (8004a5c <UART_SetConfig+0x2d0>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b0c      	cmp	r3, #12
 8004860:	d828      	bhi.n	80048b4 <UART_SetConfig+0x128>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0xdc>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800489d 	.word	0x0800489d
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048b5 	.word	0x080048b5
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048a9 	.word	0x080048a9
 800487c:	080048b5 	.word	0x080048b5
 8004880:	080048b5 	.word	0x080048b5
 8004884:	080048b5 	.word	0x080048b5
 8004888:	080048a3 	.word	0x080048a3
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048b5 	.word	0x080048b5
 8004898:	080048af 	.word	0x080048af
 800489c:	2300      	movs	r3, #0
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e117      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e114      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e111      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e10e      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e10b      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a69      	ldr	r2, [pc, #420]	; (8004a64 <UART_SetConfig+0x2d8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d120      	bne.n	8004906 <UART_SetConfig+0x17a>
 80048c4:	4b65      	ldr	r3, [pc, #404]	; (8004a5c <UART_SetConfig+0x2d0>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ce:	2b30      	cmp	r3, #48	; 0x30
 80048d0:	d013      	beq.n	80048fa <UART_SetConfig+0x16e>
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d814      	bhi.n	8004900 <UART_SetConfig+0x174>
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d009      	beq.n	80048ee <UART_SetConfig+0x162>
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d810      	bhi.n	8004900 <UART_SetConfig+0x174>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <UART_SetConfig+0x15c>
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d006      	beq.n	80048f4 <UART_SetConfig+0x168>
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x174>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e0f1      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048ee:	2302      	movs	r3, #2
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e0ee      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048f4:	2304      	movs	r3, #4
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e0eb      	b.n	8004ad2 <UART_SetConfig+0x346>
 80048fa:	2308      	movs	r3, #8
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e0e8      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004900:	2310      	movs	r3, #16
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e0e5      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <UART_SetConfig+0x2dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d120      	bne.n	8004952 <UART_SetConfig+0x1c6>
 8004910:	4b52      	ldr	r3, [pc, #328]	; (8004a5c <UART_SetConfig+0x2d0>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800491a:	2bc0      	cmp	r3, #192	; 0xc0
 800491c:	d013      	beq.n	8004946 <UART_SetConfig+0x1ba>
 800491e:	2bc0      	cmp	r3, #192	; 0xc0
 8004920:	d814      	bhi.n	800494c <UART_SetConfig+0x1c0>
 8004922:	2b80      	cmp	r3, #128	; 0x80
 8004924:	d009      	beq.n	800493a <UART_SetConfig+0x1ae>
 8004926:	2b80      	cmp	r3, #128	; 0x80
 8004928:	d810      	bhi.n	800494c <UART_SetConfig+0x1c0>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <UART_SetConfig+0x1a8>
 800492e:	2b40      	cmp	r3, #64	; 0x40
 8004930:	d006      	beq.n	8004940 <UART_SetConfig+0x1b4>
 8004932:	e00b      	b.n	800494c <UART_SetConfig+0x1c0>
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e0cb      	b.n	8004ad2 <UART_SetConfig+0x346>
 800493a:	2302      	movs	r3, #2
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e0c8      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004940:	2304      	movs	r3, #4
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e0c5      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004946:	2308      	movs	r3, #8
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e0c2      	b.n	8004ad2 <UART_SetConfig+0x346>
 800494c:	2310      	movs	r3, #16
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e0bf      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a45      	ldr	r2, [pc, #276]	; (8004a6c <UART_SetConfig+0x2e0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d125      	bne.n	80049a8 <UART_SetConfig+0x21c>
 800495c:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <UART_SetConfig+0x2d0>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800496a:	d017      	beq.n	800499c <UART_SetConfig+0x210>
 800496c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004970:	d817      	bhi.n	80049a2 <UART_SetConfig+0x216>
 8004972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004976:	d00b      	beq.n	8004990 <UART_SetConfig+0x204>
 8004978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497c:	d811      	bhi.n	80049a2 <UART_SetConfig+0x216>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <UART_SetConfig+0x1fe>
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d006      	beq.n	8004996 <UART_SetConfig+0x20a>
 8004988:	e00b      	b.n	80049a2 <UART_SetConfig+0x216>
 800498a:	2300      	movs	r3, #0
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e0a0      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004990:	2302      	movs	r3, #2
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e09d      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004996:	2304      	movs	r3, #4
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e09a      	b.n	8004ad2 <UART_SetConfig+0x346>
 800499c:	2308      	movs	r3, #8
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e097      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049a2:	2310      	movs	r3, #16
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e094      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a30      	ldr	r2, [pc, #192]	; (8004a70 <UART_SetConfig+0x2e4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d125      	bne.n	80049fe <UART_SetConfig+0x272>
 80049b2:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <UART_SetConfig+0x2d0>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c0:	d017      	beq.n	80049f2 <UART_SetConfig+0x266>
 80049c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c6:	d817      	bhi.n	80049f8 <UART_SetConfig+0x26c>
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049cc:	d00b      	beq.n	80049e6 <UART_SetConfig+0x25a>
 80049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d2:	d811      	bhi.n	80049f8 <UART_SetConfig+0x26c>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <UART_SetConfig+0x254>
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d006      	beq.n	80049ec <UART_SetConfig+0x260>
 80049de:	e00b      	b.n	80049f8 <UART_SetConfig+0x26c>
 80049e0:	2301      	movs	r3, #1
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e075      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049e6:	2302      	movs	r3, #2
 80049e8:	77fb      	strb	r3, [r7, #31]
 80049ea:	e072      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049ec:	2304      	movs	r3, #4
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e06f      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049f2:	2308      	movs	r3, #8
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e06c      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049f8:	2310      	movs	r3, #16
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e069      	b.n	8004ad2 <UART_SetConfig+0x346>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <UART_SetConfig+0x2e8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d137      	bne.n	8004a78 <UART_SetConfig+0x2ec>
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <UART_SetConfig+0x2d0>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a16:	d017      	beq.n	8004a48 <UART_SetConfig+0x2bc>
 8004a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a1c:	d817      	bhi.n	8004a4e <UART_SetConfig+0x2c2>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	d00b      	beq.n	8004a3c <UART_SetConfig+0x2b0>
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a28:	d811      	bhi.n	8004a4e <UART_SetConfig+0x2c2>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <UART_SetConfig+0x2aa>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d006      	beq.n	8004a42 <UART_SetConfig+0x2b6>
 8004a34:	e00b      	b.n	8004a4e <UART_SetConfig+0x2c2>
 8004a36:	2300      	movs	r3, #0
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e04a      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e047      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004a42:	2304      	movs	r3, #4
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e044      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e041      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004a4e:	2310      	movs	r3, #16
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e03e      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004a54:	efff69f3 	.word	0xefff69f3
 8004a58:	40011000 	.word	0x40011000
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40004400 	.word	0x40004400
 8004a64:	40004800 	.word	0x40004800
 8004a68:	40004c00 	.word	0x40004c00
 8004a6c:	40005000 	.word	0x40005000
 8004a70:	40011400 	.word	0x40011400
 8004a74:	40007800 	.word	0x40007800
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a71      	ldr	r2, [pc, #452]	; (8004c44 <UART_SetConfig+0x4b8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d125      	bne.n	8004ace <UART_SetConfig+0x342>
 8004a82:	4b71      	ldr	r3, [pc, #452]	; (8004c48 <UART_SetConfig+0x4bc>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a90:	d017      	beq.n	8004ac2 <UART_SetConfig+0x336>
 8004a92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a96:	d817      	bhi.n	8004ac8 <UART_SetConfig+0x33c>
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	d00b      	beq.n	8004ab6 <UART_SetConfig+0x32a>
 8004a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa2:	d811      	bhi.n	8004ac8 <UART_SetConfig+0x33c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <UART_SetConfig+0x324>
 8004aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aac:	d006      	beq.n	8004abc <UART_SetConfig+0x330>
 8004aae:	e00b      	b.n	8004ac8 <UART_SetConfig+0x33c>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e00d      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e00a      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004abc:	2304      	movs	r3, #4
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e007      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e004      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e001      	b.n	8004ad2 <UART_SetConfig+0x346>
 8004ace:	2310      	movs	r3, #16
 8004ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ada:	d15a      	bne.n	8004b92 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d827      	bhi.n	8004b32 <UART_SetConfig+0x3a6>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <UART_SetConfig+0x35c>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7fe f97e 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7fe f98e 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8004b18:	61b8      	str	r0, [r7, #24]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <UART_SetConfig+0x4c0>)
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7fe f885 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8004b26:	61b8      	str	r0, [r7, #24]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77bb      	strb	r3, [r7, #30]
        break;
 8004b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d074      	beq.n	8004c2c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	005a      	lsls	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	d916      	bls.n	8004b8c <UART_SetConfig+0x400>
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d212      	bcs.n	8004b8c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f023 030f 	bic.w	r3, r3, #15
 8004b6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	89fa      	ldrh	r2, [r7, #14]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	e04f      	b.n	8004c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77bb      	strb	r3, [r7, #30]
 8004b90:	e04c      	b.n	8004c2c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d828      	bhi.n	8004bea <UART_SetConfig+0x45e>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x414>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bd5 	.word	0x08004bd5
 8004bac:	08004beb 	.word	0x08004beb
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004beb 	.word	0x08004beb
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004be3 	.word	0x08004be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc4:	f7fe f922 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8004bc8:	61b8      	str	r0, [r7, #24]
        break;
 8004bca:	e013      	b.n	8004bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7fe f932 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	61b8      	str	r0, [r7, #24]
        break;
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <UART_SetConfig+0x4c0>)
 8004bd6:	61bb      	str	r3, [r7, #24]
        break;
 8004bd8:	e00c      	b.n	8004bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bda:	f7fe f829 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8004bde:	61b8      	str	r0, [r7, #24]
        break;
 8004be0:	e008      	b.n	8004bf4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	61bb      	str	r3, [r7, #24]
        break;
 8004be8:	e004      	b.n	8004bf4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bf2:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d018      	beq.n	8004c2c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	085a      	lsrs	r2, r3, #1
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b0f      	cmp	r3, #15
 8004c12:	d909      	bls.n	8004c28 <UART_SetConfig+0x49c>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1a:	d205      	bcs.n	8004c28 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e001      	b.n	8004c2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c38:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40007c00 	.word	0x40007c00
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	00f42400 	.word	0x00f42400

08004c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d10a      	bne.n	8004d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da4:	f7fc f9f6 	bl	8001194 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10e      	bne.n	8004dd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f817 	bl	8004dfa <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e00d      	b.n	8004df2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b09c      	sub	sp, #112	; 0x70
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	4613      	mov	r3, r2
 8004e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0a:	e0a5      	b.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	f000 80a1 	beq.w	8004f58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fc f9bd 	bl	8001194 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x32>
 8004e26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d13e      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e40:	667b      	str	r3, [r7, #100]	; 0x64
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e6      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	663b      	str	r3, [r7, #96]	; 0x60
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1e5      	bne.n	8004e5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e067      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d04f      	beq.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ec6:	d147      	bne.n	8004f58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e6      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	613b      	str	r3, [r7, #16]
   return(result);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f24:	623a      	str	r2, [r7, #32]
 8004f26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	69f9      	ldr	r1, [r7, #28]
 8004f2a:	6a3a      	ldr	r2, [r7, #32]
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e010      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	f43f af4a 	beq.w	8004e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3770      	adds	r7, #112	; 0x70
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f84:	b084      	sub	sp, #16
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	f107 001c 	add.w	r0, r7, #28
 8004f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d120      	bne.n	8004fde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <USB_CoreInit+0xac>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa92 	bl	80054fc <USB_CoreReset>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e010      	b.n	8005000 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa86 	bl	80054fc <USB_CoreReset>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10b      	bne.n	800501e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f043 0206 	orr.w	r2, r3, #6
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800501e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800502a:	b004      	add	sp, #16
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	ffbdffbf 	.word	0xffbdffbf

08005034 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f023 0201 	bic.w	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005072:	78fb      	ldrb	r3, [r7, #3]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d115      	bne.n	80050a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005084:	2001      	movs	r0, #1
 8005086:	f7fc f891 	bl	80011ac <HAL_Delay>
      ms++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fa25 	bl	80054e0 <USB_GetMode>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d01e      	beq.n	80050da <USB_SetCurrentMode+0x84>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b31      	cmp	r3, #49	; 0x31
 80050a0:	d9f0      	bls.n	8005084 <USB_SetCurrentMode+0x2e>
 80050a2:	e01a      	b.n	80050da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d115      	bne.n	80050d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050b6:	2001      	movs	r0, #1
 80050b8:	f7fc f878 	bl	80011ac <HAL_Delay>
      ms++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa0c 	bl	80054e0 <USB_GetMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <USB_SetCurrentMode+0x84>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b31      	cmp	r3, #49	; 0x31
 80050d2:	d9f0      	bls.n	80050b6 <USB_SetCurrentMode+0x60>
 80050d4:	e001      	b.n	80050da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e005      	b.n	80050e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b32      	cmp	r3, #50	; 0x32
 80050de:	d101      	bne.n	80050e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050f0:	b084      	sub	sp, #16
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e009      	b.n	8005124 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3340      	adds	r3, #64	; 0x40
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3301      	adds	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b0e      	cmp	r3, #14
 8005128:	d9f2      	bls.n	8005110 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800512a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11c      	bne.n	800516a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e005      	b.n	8005176 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800517c:	461a      	mov	r2, r3
 800517e:	2300      	movs	r3, #0
 8005180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	4619      	mov	r1, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005190:	461a      	mov	r2, r3
 8005192:	680b      	ldr	r3, [r1, #0]
 8005194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10c      	bne.n	80051b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051a2:	2100      	movs	r1, #0
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f961 	bl	800546c <USB_SetDevSpeed>
 80051aa:	e008      	b.n	80051be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051ac:	2101      	movs	r1, #1
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f95c 	bl	800546c <USB_SetDevSpeed>
 80051b4:	e003      	b.n	80051be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051b6:	2103      	movs	r1, #3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f957 	bl	800546c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051be:	2110      	movs	r1, #16
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8f3 	bl	80053ac <USB_FlushTxFifo>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f91d 	bl	8005410 <USB_FlushRxFifo>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	461a      	mov	r2, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fe:	461a      	mov	r2, r3
 8005200:	2300      	movs	r3, #0
 8005202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e043      	b.n	8005292 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005220:	d118      	bne.n	8005254 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e013      	b.n	8005266 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e008      	b.n	8005266 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	461a      	mov	r2, r3
 8005262:	2300      	movs	r3, #0
 8005264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	461a      	mov	r2, r3
 8005274:	2300      	movs	r3, #0
 8005276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	461a      	mov	r2, r3
 8005286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800528a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	3301      	adds	r3, #1
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d3b7      	bcc.n	800520a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e043      	b.n	8005328 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b6:	d118      	bne.n	80052ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e013      	b.n	80052fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e008      	b.n	80052fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3301      	adds	r3, #1
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d3b7      	bcc.n	80052a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	f043 0210 	orr.w	r2, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	699a      	ldr	r2, [r3, #24]
 8005368:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <USB_DevInit+0x2b4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699a      	ldr	r2, [r3, #24]
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <USB_DevInit+0x2b8>)
 800538e:	4313      	orrs	r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a0:	b004      	add	sp, #16
 80053a2:	4770      	bx	lr
 80053a4:	803c3800 	.word	0x803c3800
 80053a8:	40000004 	.word	0x40000004

080053ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	4a12      	ldr	r2, [pc, #72]	; (800540c <USB_FlushTxFifo+0x60>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e01a      	b.n	8005400 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	daf3      	bge.n	80053ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	4a08      	ldr	r2, [pc, #32]	; (800540c <USB_FlushTxFifo+0x60>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e006      	b.n	8005400 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d0f1      	beq.n	80053e2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	00030d40 	.word	0x00030d40

08005410 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4a11      	ldr	r2, [pc, #68]	; (8005468 <USB_FlushRxFifo+0x58>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e017      	b.n	800545c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	daf3      	bge.n	800541c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2210      	movs	r2, #16
 800543c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	4a08      	ldr	r2, [pc, #32]	; (8005468 <USB_FlushRxFifo+0x58>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b10      	cmp	r3, #16
 8005458:	d0f1      	beq.n	800543e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00030d40 	.word	0x00030d40

0800546c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800548c:	4313      	orrs	r3, r2
 800548e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	f003 0301 	and.w	r3, r3, #1
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <USB_CoreReset+0x60>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d901      	bls.n	8005518 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e01a      	b.n	800554e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	daf3      	bge.n	8005508 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f043 0201 	orr.w	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <USB_CoreReset+0x60>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d901      	bls.n	8005540 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e006      	b.n	800554e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d0f1      	beq.n	8005530 <USB_CoreReset+0x34>

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	00030d40 	.word	0x00030d40

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	; (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	; (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	; (80055a4 <__libc_init_array+0x44>)
 8005574:	f000 f820 	bl	80055b8 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	080055f0 	.word	0x080055f0
 800559c:	080055f0 	.word	0x080055f0
 80055a0:	080055f0 	.word	0x080055f0
 80055a4:	080055f4 	.word	0x080055f4

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
