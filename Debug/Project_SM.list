
Project_SM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aa4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007c78  08007c78  00017c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008094  08008094  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800809c  0800809c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001dc  08008280  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08008280  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8a7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318f  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000144c7  00000000  00000000  00040c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00055110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  00056210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b30  00000000  00000000  00057518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020133  00000000  00000000  0007f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f399e  00000000  00000000  0009f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00192b19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004130  00000000  00000000  00192b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c5c 	.word	0x08007c5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007c5c 	.word	0x08007c5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid){
	/* Ustawienie wszystkich wartosci na 0 */
	pid->integrator = 0.0f;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61c3      	str	r3, [r0, #28]
	pid->prevE = 0.0f;
 8000f84:	6203      	str	r3, [r0, #32]
	
	pid->differentiator = 0.0f;
 8000f86:	6243      	str	r3, [r0, #36]	; 0x24
	pid->prevMeasurement = 0.0f;
 8000f88:	6283      	str	r3, [r0, #40]	; 0x28

	/* Ustawienie wartosci regulatora */
	pid->Kp = 1.0f;
 8000f8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f8e:	6002      	str	r2, [r0, #0]
	pid->Ki = 0.1f;
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <PIDController_Init+0x28>)
 8000f92:	6042      	str	r2, [r0, #4]
	pid->Kd = 0.07f;
 8000f94:	4905      	ldr	r1, [pc, #20]	; (8000fac <PIDController_Init+0x2c>)
 8000f96:	6081      	str	r1, [r0, #8]
	pid->tau = 0.1f;
 8000f98:	60c2      	str	r2, [r0, #12]
	pid->limMin = 0.0f;
 8000f9a:	6103      	str	r3, [r0, #16]
	pid->limMax = 1000.0f;
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <PIDController_Init+0x30>)
 8000f9e:	6143      	str	r3, [r0, #20]
	pid->Tp = 0.250f;
 8000fa0:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8000fa4:	6183      	str	r3, [r0, #24]

}
 8000fa6:	4770      	bx	lr
 8000fa8:	3dcccccd 	.word	0x3dcccccd
 8000fac:	3d8f5c29 	.word	0x3d8f5c29
 8000fb0:	447a0000 	.word	0x447a0000

08000fb4 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement){
	/* Uchyb */
	float error = setpoint - measurement;
 8000fb4:	ee30 0a60 	vsub.f32	s0, s0, s1
	
	/* Czlon proporcjonalny */
	float proportional = pid->Kp*error;
 8000fb8:	edd0 7a00 	vldr	s15, [r0]
 8000fbc:	ee60 7a27 	vmul.f32	s15, s0, s15
	
	/* Czlon calkujacy */
	pid->integrator = pid->Ki*pid->Tp*0.5f*(error + pid->prevE) + pid->integrator;
 8000fc0:	edd0 6a06 	vldr	s13, [r0, #24]
 8000fc4:	ed90 7a01 	vldr	s14, [r0, #4]
 8000fc8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000fcc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8000fd0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000fd4:	ed90 6a08 	vldr	s12, [r0, #32]
 8000fd8:	ee30 6a06 	vadd.f32	s12, s0, s12
 8000fdc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000fe0:	ed90 6a07 	vldr	s12, [r0, #28]
 8000fe4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8000fe8:	ed80 7a07 	vstr	s14, [r0, #28]


	/* Obliczanie ograniczen czlonu calkujacego */
	float limMinInt, limMaxInt;

	if (pid->limMax > proportional) {
 8000fec:	ed90 5a05 	vldr	s10, [r0, #20]
 8000ff0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		limMaxInt = pid->limMax - proportional;
 8000ff8:	bfcc      	ite	gt
 8000ffa:	ee35 6a67 	vsubgt.f32	s12, s10, s15
	} else {
		limMaxInt = 0.0f;
 8000ffe:	ed9f 6a2a 	vldrle	s12, [pc, #168]	; 80010a8 <PIDController_Update+0xf4>
	}

	if (pid->limMin < proportional) {
 8001002:	edd0 5a04 	vldr	s11, [r0, #16]
 8001006:	eef4 5ae7 	vcmpe.f32	s11, s15
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		limMinInt = pid->limMin - proportional;
 800100e:	bf4c      	ite	mi
 8001010:	ee75 4ae7 	vsubmi.f32	s9, s11, s15
	} else {
		limMinInt = 0.0f;
 8001014:	eddf 4a24 	vldrpl	s9, [pc, #144]	; 80010a8 <PIDController_Update+0xf4>
	}
	
	if(pid->integrator > limMaxInt) {
 8001018:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	dd31      	ble.n	8001086 <PIDController_Update+0xd2>
		pid->integrator = limMaxInt;
 8001022:	ed80 6a07 	vstr	s12, [r0, #28]
		pid->integrator = limMinInt;
	}

	/* Czlon rozniczkujacy */
	pid->differentiator = (2.0f*pid->Kd*(measurement - pid->prevMeasurement)
			    + (2.0f*pid->tau - pid->Tp) * pid->differentiator)
 8001026:	ed90 6a03 	vldr	s12, [r0, #12]
 800102a:	ee36 6a06 	vadd.f32	s12, s12, s12
	pid->differentiator = (2.0f*pid->Kd*(measurement - pid->prevMeasurement)
 800102e:	ed90 7a02 	vldr	s14, [r0, #8]
 8001032:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001036:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
 800103a:	ee70 4ae4 	vsub.f32	s9, s1, s9
 800103e:	ee27 7a24 	vmul.f32	s14, s14, s9
			    + (2.0f*pid->tau - pid->Tp) * pid->differentiator)
 8001042:	ee76 4a66 	vsub.f32	s9, s12, s13
 8001046:	ed90 4a09 	vldr	s8, [r0, #36]	; 0x24
 800104a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800104e:	ee37 7a24 	vadd.f32	s14, s14, s9
			    / (2.0f*pid->tau + pid->Tp);
 8001052:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001056:	ee87 6a26 	vdiv.f32	s12, s14, s13
	pid->differentiator = (2.0f*pid->Kd*(measurement - pid->prevMeasurement)
 800105a:	ed80 6a09 	vstr	s12, [r0, #36]	; 0x24

	/* sygnal sterujacy */
	pid->u = proportional + pid->integrator + pid->differentiator;
 800105e:	ed90 7a07 	vldr	s14, [r0, #28]
 8001062:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001066:	ee77 7a86 	vadd.f32	s15, s15, s12

	/* Ograniczenie syngalu */

	if(pid->u > pid->limMax) {
 800106a:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	d510      	bpl.n	8001096 <PIDController_Update+0xe2>
		pid->u = pid->limMax;
 8001074:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
	} else if(pid->u < pid->limMin){
		pid->u = pid->limMin;
	}

	/* Zapisanie nowego 'poprzedniego' bledu oraz pomiaru */
	pid->prevE = error;
 8001078:	ed80 0a08 	vstr	s0, [r0, #32]
	pid->prevMeasurement = measurement;
 800107c:	edc0 0a0a 	vstr	s1, [r0, #40]	; 0x28

	/* Przekazanie sygnalu sterujacego */
	return pid->u;
}
 8001080:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8001084:	4770      	bx	lr
	} else if (pid->integrator <limMinInt){
 8001086:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		pid->integrator = limMinInt;
 800108e:	bf48      	it	mi
 8001090:	edc0 4a07 	vstrmi	s9, [r0, #28]
 8001094:	e7c7      	b.n	8001026 <PIDController_Update+0x72>
	pid->u = proportional + pid->integrator + pid->differentiator;
 8001096:	eef4 5ae7 	vcmpe.f32	s11, s15
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	fe75 7aa7 	vselgt.f32	s15, s11, s15
 80010a2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
 80010a6:	e7e7      	b.n	8001078 <PIDController_Update+0xc4>
 80010a8:	00000000 	.word	0x00000000

080010ac <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 80010ac:	b500      	push	{lr}
 80010ae:	b085      	sub	sp, #20
	uint8_t tmp = 0x07;
 80010b0:	2307      	movs	r3, #7
 80010b2:	f88d 300f 	strb.w	r3, [sp, #15]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 80010b6:	230a      	movs	r3, #10
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	f10d 020f 	add.w	r2, sp, #15
 80010c0:	2146      	movs	r1, #70	; 0x46
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <BH1750_Reset+0x2c>)
 80010c4:	6800      	ldr	r0, [r0, #0]
 80010c6:	f001 faaf 	bl	8002628 <HAL_I2C_Master_Transmit>
		return BH1750_OK;

	return BH1750_ERROR;
}
 80010ca:	3800      	subs	r0, #0
 80010cc:	bf18      	it	ne
 80010ce:	2001      	movne	r0, #1
 80010d0:	b005      	add	sp, #20
 80010d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d6:	bf00      	nop
 80010d8:	20000214 	.word	0x20000214

080010dc <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 80010dc:	b500      	push	{lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	f88d 000f 	strb.w	r0, [sp, #15]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80010e4:	0903      	lsrs	r3, r0, #4
 80010e6:	d014      	beq.n	8001112 <BH1750_SetMode+0x36>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80010e8:	f010 0f0c 	tst.w	r0, #12
 80010ec:	d001      	beq.n	80010f2 <BH1750_SetMode+0x16>
 80010ee:	2001      	movs	r0, #1
 80010f0:	e010      	b.n	8001114 <BH1750_SetMode+0x38>

	Bh1750_Mode = Mode;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <BH1750_SetMode+0x40>)
 80010f4:	7018      	strb	r0, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80010f6:	230a      	movs	r3, #10
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	f10d 020f 	add.w	r2, sp, #15
 8001100:	2146      	movs	r1, #70	; 0x46
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <BH1750_SetMode+0x44>)
 8001104:	6800      	ldr	r0, [r0, #0]
 8001106:	f001 fa8f 	bl	8002628 <HAL_I2C_Master_Transmit>
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 800110a:	3800      	subs	r0, #0
 800110c:	bf18      	it	ne
 800110e:	2001      	movne	r0, #1
 8001110:	e000      	b.n	8001114 <BH1750_SetMode+0x38>
 8001112:	2001      	movs	r0, #1
		return BH1750_OK;

	return BH1750_ERROR;
}
 8001114:	b005      	add	sp, #20
 8001116:	f85d fb04 	ldr.w	pc, [sp], #4
 800111a:	bf00      	nop
 800111c:	20000210 	.word	0x20000210
 8001120:	20000214 	.word	0x20000214

08001124 <BH1750_SetMtreg>:
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001124:	f1a0 031f 	sub.w	r3, r0, #31
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2bdf      	cmp	r3, #223	; 0xdf
 800112c:	d901      	bls.n	8001132 <BH1750_SetMtreg+0xe>
		return BH1750_ERROR;
 800112e:	2001      	movs	r0, #1
	if (HAL_OK == retCode) {
		return BH1750_OK;
	}

	return BH1750_ERROR;
}
 8001130:	4770      	bx	lr
{
 8001132:	b500      	push	{lr}
 8001134:	b085      	sub	sp, #20
	Bh1750_Mtreg = Mtreg;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <BH1750_SetMtreg+0x64>)
 8001138:	7018      	strb	r0, [r3, #0]
	tmp[0] = (0x40 | (Mtreg >> 5));
 800113a:	0943      	lsrs	r3, r0, #5
 800113c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001140:	f88d 300c 	strb.w	r3, [sp, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	f040 0060 	orr.w	r0, r0, #96	; 0x60
 800114c:	f88d 000d 	strb.w	r0, [sp, #13]
	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001150:	230a      	movs	r3, #10
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	aa03      	add	r2, sp, #12
 8001158:	2146      	movs	r1, #70	; 0x46
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <BH1750_SetMtreg+0x68>)
 800115c:	6800      	ldr	r0, [r0, #0]
 800115e:	f001 fa63 	bl	8002628 <HAL_I2C_Master_Transmit>
	if (HAL_OK != retCode) {
 8001162:	b118      	cbz	r0, 800116c <BH1750_SetMtreg+0x48>
		return BH1750_ERROR;
 8001164:	2001      	movs	r0, #1
}
 8001166:	b005      	add	sp, #20
 8001168:	f85d fb04 	ldr.w	pc, [sp], #4
	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 800116c:	230a      	movs	r3, #10
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	f10d 020d 	add.w	r2, sp, #13
 8001176:	2146      	movs	r1, #70	; 0x46
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <BH1750_SetMtreg+0x68>)
 800117a:	6800      	ldr	r0, [r0, #0]
 800117c:	f001 fa54 	bl	8002628 <HAL_I2C_Master_Transmit>
		return BH1750_ERROR;
 8001180:	3800      	subs	r0, #0
 8001182:	bf18      	it	ne
 8001184:	2001      	movne	r0, #1
 8001186:	e7ee      	b.n	8001166 <BH1750_SetMtreg+0x42>
 8001188:	20000218 	.word	0x20000218
 800118c:	20000214 	.word	0x20000214

08001190 <BH1750_Init>:
{
 8001190:	b508      	push	{r3, lr}
	bh1750_i2c = hi2c;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <BH1750_Init+0x20>)
 8001194:	6018      	str	r0, [r3, #0]
	if(BH1750_OK == BH1750_Reset())
 8001196:	f7ff ff89 	bl	80010ac <BH1750_Reset>
 800119a:	b108      	cbz	r0, 80011a0 <BH1750_Init+0x10>
	return BH1750_ERROR;
 800119c:	2001      	movs	r0, #1
}
 800119e:	bd08      	pop	{r3, pc}
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 80011a0:	2045      	movs	r0, #69	; 0x45
 80011a2:	f7ff ffbf 	bl	8001124 <BH1750_SetMtreg>
			return BH1750_OK;
 80011a6:	3800      	subs	r0, #0
 80011a8:	bf18      	it	ne
 80011aa:	2001      	movne	r0, #1
 80011ac:	e7f7      	b.n	800119e <BH1750_Init+0xe>
 80011ae:	bf00      	nop
 80011b0:	20000214 	.word	0x20000214

080011b4 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80011b4:	b530      	push	{r4, r5, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	4605      	mov	r5, r0
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80011ba:	230a      	movs	r3, #10
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2302      	movs	r3, #2
 80011c0:	aa03      	add	r2, sp, #12
 80011c2:	2146      	movs	r1, #70	; 0x46
 80011c4:	4c18      	ldr	r4, [pc, #96]	; (8001228 <BH1750_ReadLight+0x74>)
 80011c6:	6820      	ldr	r0, [r4, #0]
 80011c8:	f001 faf2 	bl	80027b0 <HAL_I2C_Master_Receive>
 80011cc:	b110      	cbz	r0, 80011d4 <BH1750_ReadLight+0x20>
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
		return BH1750_OK;
	}
	return BH1750_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	b005      	add	sp, #20
 80011d2:	bd30      	pop	{r4, r5, pc}
		result = (tmp[0] << 8) | (tmp[1]);
 80011d4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <BH1750_ReadLight+0x78>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b45      	cmp	r3, #69	; 0x45
 80011ee:	d009      	beq.n	8001204 <BH1750_ReadLight+0x50>
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80011f0:	ee07 3a10 	vmov	s14, r3
 80011f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011f8:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8001230 <BH1750_ReadLight+0x7c>
 80011fc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8001200:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <BH1750_ReadLight+0x80>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b21      	cmp	r3, #33	; 0x21
 800120a:	d001      	beq.n	8001210 <BH1750_ReadLight+0x5c>
 800120c:	2b11      	cmp	r3, #17
 800120e:	d103      	bne.n	8001218 <BH1750_ReadLight+0x64>
			result /= 2.0;
 8001210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001218:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001238 <BH1750_ReadLight+0x84>
 800121c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001220:	ed85 7a00 	vstr	s14, [r5]
		return BH1750_OK;
 8001224:	e7d4      	b.n	80011d0 <BH1750_ReadLight+0x1c>
 8001226:	bf00      	nop
 8001228:	20000214 	.word	0x20000214
 800122c:	20000218 	.word	0x20000218
 8001230:	428a0000 	.word	0x428a0000
 8001234:	20000210 	.word	0x20000210
 8001238:	3f99999a 	.word	0x3f99999a

0800123c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800123c:	b508      	push	{r3, lr}
       switch (key[0]) {
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_UART_RxCpltCallback+0x6c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b65      	cmp	r3, #101	; 0x65
 8001244:	d01b      	beq.n	800127e <HAL_UART_RxCpltCallback+0x42>
 8001246:	2b71      	cmp	r3, #113	; 0x71
 8001248:	d113      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x36>
             case 'q': yr += 10; if(yr > limitMax) yr = limitMax;   break;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_RxCpltCallback+0x70>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001258:	edc3 7a00 	vstr	s15, [r3]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_UART_RxCpltCallback+0x74>)
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd02      	ble.n	8001272 <HAL_UART_RxCpltCallback+0x36>
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_UART_RxCpltCallback+0x70>)
 800126e:	ed83 7a00 	vstr	s14, [r3]
             case 'e': yr -= 10; if(yr < limitMin) yr = limitMin;   break;
       }
       HAL_UART_Receive_IT(&huart3, key, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <HAL_UART_RxCpltCallback+0x6c>)
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_UART_RxCpltCallback+0x78>)
 8001278:	f003 fcb6 	bl	8004be8 <HAL_UART_Receive_IT>
}
 800127c:	bd08      	pop	{r3, pc}
             case 'e': yr -= 10; if(yr < limitMin) yr = limitMin;   break;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_UART_RxCpltCallback+0x70>)
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	edc3 7a00 	vstr	s15, [r3]
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_UART_RxCpltCallback+0x7c>)
 8001292:	ed93 7a00 	vldr	s14, [r3]
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	d5e8      	bpl.n	8001272 <HAL_UART_RxCpltCallback+0x36>
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <HAL_UART_RxCpltCallback+0x70>)
 80012a2:	ed83 7a00 	vstr	s14, [r3]
 80012a6:	e7e4      	b.n	8001272 <HAL_UART_RxCpltCallback+0x36>
 80012a8:	20000384 	.word	0x20000384
 80012ac:	20000200 	.word	0x20000200
 80012b0:	20000390 	.word	0x20000390
 80012b4:	2000024c 	.word	0x2000024c
 80012b8:	20000388 	.word	0x20000388

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b500      	push	{lr}
 80012be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c0:	2230      	movs	r2, #48	; 0x30
 80012c2:	2100      	movs	r1, #0
 80012c4:	a808      	add	r0, sp, #32
 80012c6:	f003 fcdf 	bl	8004c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ca:	2300      	movs	r3, #0
 80012cc:	9303      	str	r3, [sp, #12]
 80012ce:	9304      	str	r3, [sp, #16]
 80012d0:	9305      	str	r3, [sp, #20]
 80012d2:	9306      	str	r3, [sp, #24]
 80012d4:	9307      	str	r3, [sp, #28]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012d6:	f001 fb89 	bl	80029ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <SystemClock_Config+0xa0>)
 80012dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <SystemClock_Config+0xa4>)
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001306:	2301      	movs	r3, #1
 8001308:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800130a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800130e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001314:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001318:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800131a:	2204      	movs	r2, #4
 800131c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800131e:	2248      	movs	r2, #72	; 0x48
 8001320:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001322:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001324:	2303      	movs	r3, #3
 8001326:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	a808      	add	r0, sp, #32
 800132a:	f001 fb67 	bl	80029fc <HAL_RCC_OscConfig>
 800132e:	b980      	cbnz	r0, 8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2102      	movs	r1, #2
 8001336:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	a803      	add	r0, sp, #12
 8001346:	f001 fddb 	bl	8002f00 <HAL_RCC_ClockConfig>
 800134a:	b920      	cbnz	r0, 8001356 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
}
 800134c:	b015      	add	sp, #84	; 0x54
 800134e:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001352:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <SystemClock_Config+0x98>
 8001356:	b672      	cpsid	i
 8001358:	e7fe      	b.n	8001358 <SystemClock_Config+0x9c>
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40007000 	.word	0x40007000

08001364 <main>:
{
 8001364:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001368:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 800136a:	f000 fd5b 	bl	8001e24 <HAL_Init>
  SystemClock_Config();
 800136e:	f7ff ffa5 	bl	80012bc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001372:	2400      	movs	r4, #0
 8001374:	941b      	str	r4, [sp, #108]	; 0x6c
 8001376:	941c      	str	r4, [sp, #112]	; 0x70
 8001378:	941d      	str	r4, [sp, #116]	; 0x74
 800137a:	941e      	str	r4, [sp, #120]	; 0x78
 800137c:	941f      	str	r4, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4ba1      	ldr	r3, [pc, #644]	; (8001604 <main+0x2a0>)
 8001380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001382:	f042 0204 	orr.w	r2, r2, #4
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
 8001388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138a:	f002 0204 	and.w	r2, r2, #4
 800138e:	9205      	str	r2, [sp, #20]
 8001390:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	f002 0220 	and.w	r2, r2, #32
 80013a0:	9206      	str	r2, [sp, #24]
 80013a2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
 80013ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013b2:	9207      	str	r2, [sp, #28]
 80013b4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
 80013be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c0:	f002 0201 	and.w	r2, r2, #1
 80013c4:	9208      	str	r2, [sp, #32]
 80013c6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ca:	f042 0202 	orr.w	r2, r2, #2
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	f002 0202 	and.w	r2, r2, #2
 80013d6:	9209      	str	r2, [sp, #36]	; 0x24
 80013d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013dc:	f042 0210 	orr.w	r2, r2, #16
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	f002 0210 	and.w	r2, r2, #16
 80013e8:	920a      	str	r2, [sp, #40]	; 0x28
 80013ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
 80013f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f6:	f002 0208 	and.w	r2, r2, #8
 80013fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80013fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140c:	930c      	str	r3, [sp, #48]	; 0x30
 800140e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001410:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8001620 <main+0x2bc>
 8001414:	4622      	mov	r2, r4
 8001416:	f244 0181 	movw	r1, #16513	; 0x4081
 800141a:	4658      	mov	r0, fp
 800141c:	f000 ff00 	bl	8002220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001420:	4622      	mov	r2, r4
 8001422:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001426:	4878      	ldr	r0, [pc, #480]	; (8001608 <main+0x2a4>)
 8001428:	f000 fefa 	bl	8002220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800142c:	4f77      	ldr	r7, [pc, #476]	; (800160c <main+0x2a8>)
 800142e:	4622      	mov	r2, r4
 8001430:	2140      	movs	r1, #64	; 0x40
 8001432:	4638      	mov	r0, r7
 8001434:	f000 fef4 	bl	8002220 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001442:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001446:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8001624 <main+0x2c0>
 800144a:	a91b      	add	r1, sp, #108	; 0x6c
 800144c:	4648      	mov	r0, r9
 800144e:	f000 fddf 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001452:	2332      	movs	r3, #50	; 0x32
 8001454:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2602      	movs	r6, #2
 8001458:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2503      	movs	r5, #3
 800145e:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001460:	f04f 080b 	mov.w	r8, #11
 8001464:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	a91b      	add	r1, sp, #108	; 0x6c
 800146a:	4648      	mov	r0, r9
 800146c:	f000 fdd0 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001470:	2386      	movs	r3, #134	; 0x86
 8001472:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147a:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 8001482:	a91b      	add	r1, sp, #108	; 0x6c
 8001484:	4648      	mov	r0, r9
 8001486:	f000 fdc3 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800148a:	f244 0381 	movw	r3, #16513	; 0x4081
 800148e:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	f04f 0a01 	mov.w	sl, #1
 8001494:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	a91b      	add	r1, sp, #108	; 0x6c
 800149e:	4658      	mov	r0, fp
 80014a0:	f000 fdb6 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014a8:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b2:	a91b      	add	r1, sp, #108	; 0x6c
 80014b4:	4854      	ldr	r0, [pc, #336]	; (8001608 <main+0x2a4>)
 80014b6:	f000 fdab 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c6:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ca:	a91b      	add	r1, sp, #108	; 0x6c
 80014cc:	4658      	mov	r0, fp
 80014ce:	f000 fd9f 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d2:	2340      	movs	r3, #64	; 0x40
 80014d4:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014de:	a91b      	add	r1, sp, #108	; 0x6c
 80014e0:	4638      	mov	r0, r7
 80014e2:	f000 fd95 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ea:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ee:	a91b      	add	r1, sp, #108	; 0x6c
 80014f0:	4638      	mov	r0, r7
 80014f2:	f000 fd8d 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80014f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014fa:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001502:	230a      	movs	r3, #10
 8001504:	931f      	str	r3, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	a91b      	add	r1, sp, #108	; 0x6c
 8001508:	4648      	mov	r0, r9
 800150a:	f000 fd81 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001518:	a91b      	add	r1, sp, #108	; 0x6c
 800151a:	4648      	mov	r0, r9
 800151c:	f000 fd78 	bl	8002010 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001520:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001524:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	951e      	str	r5, [sp, #120]	; 0x78
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152c:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001530:	a91b      	add	r1, sp, #108	; 0x6c
 8001532:	4638      	mov	r0, r7
 8001534:	f000 fd6c 	bl	8002010 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8001538:	4835      	ldr	r0, [pc, #212]	; (8001610 <main+0x2ac>)
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <main+0x2b0>)
 800153c:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800153e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001542:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001544:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001546:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001548:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800154a:	230c      	movs	r3, #12
 800154c:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001554:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001556:	f003 faa2 	bl	8004a9e <HAL_UART_Init>
 800155a:	2800      	cmp	r0, #0
 800155c:	f040 80fe 	bne.w	800175c <main+0x3f8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001560:	2400      	movs	r4, #0
 8001562:	9410      	str	r4, [sp, #64]	; 0x40
 8001564:	9411      	str	r4, [sp, #68]	; 0x44
 8001566:	9412      	str	r4, [sp, #72]	; 0x48
 8001568:	9413      	str	r4, [sp, #76]	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	940d      	str	r4, [sp, #52]	; 0x34
 800156c:	940e      	str	r4, [sp, #56]	; 0x38
 800156e:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	9414      	str	r4, [sp, #80]	; 0x50
 8001572:	9415      	str	r4, [sp, #84]	; 0x54
 8001574:	9416      	str	r4, [sp, #88]	; 0x58
 8001576:	9417      	str	r4, [sp, #92]	; 0x5c
 8001578:	9418      	str	r4, [sp, #96]	; 0x60
 800157a:	9419      	str	r4, [sp, #100]	; 0x64
 800157c:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	222c      	movs	r2, #44	; 0x2c
 8001580:	4621      	mov	r1, r4
 8001582:	a81b      	add	r0, sp, #108	; 0x6c
 8001584:	f003 fb80 	bl	8004c88 <memset>
  htim1.Instance = TIM1;
 8001588:	4823      	ldr	r0, [pc, #140]	; (8001618 <main+0x2b4>)
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <main+0x2b8>)
 800158c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 71;
 800158e:	2347      	movs	r3, #71	; 0x47
 8001590:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 999;
 8001594:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001598:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800159c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a2:	f002 f9a7 	bl	80038f4 <HAL_TIM_Base_Init>
 80015a6:	2800      	cmp	r0, #0
 80015a8:	f040 80da 	bne.w	8001760 <main+0x3fc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b2:	a910      	add	r1, sp, #64	; 0x40
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <main+0x2b4>)
 80015b6:	f002 fad9 	bl	8003b6c <HAL_TIM_ConfigClockSource>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	f040 80d2 	bne.w	8001764 <main+0x400>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015c0:	4815      	ldr	r0, [pc, #84]	; (8001618 <main+0x2b4>)
 80015c2:	f002 f9c7 	bl	8003954 <HAL_TIM_PWM_Init>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	f040 80ce 	bne.w	8001768 <main+0x404>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d0:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d4:	a90d      	add	r1, sp, #52	; 0x34
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <main+0x2b4>)
 80015d8:	f002 fc36 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	2800      	cmp	r0, #0
 80015de:	f040 80c5 	bne.w	800176c <main+0x408>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e2:	2360      	movs	r3, #96	; 0x60
 80015e4:	9314      	str	r3, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 80015e6:	2200      	movs	r2, #0
 80015e8:	9215      	str	r2, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ea:	9216      	str	r2, [sp, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ec:	9217      	str	r2, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ee:	9218      	str	r2, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f0:	9219      	str	r2, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f2:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	a914      	add	r1, sp, #80	; 0x50
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <main+0x2b4>)
 80015f8:	f002 fa0e 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 80015fc:	2800      	cmp	r0, #0
 80015fe:	f040 80b7 	bne.w	8001770 <main+0x40c>
 8001602:	e011      	b.n	8001628 <main+0x2c4>
 8001604:	40023800 	.word	0x40023800
 8001608:	40021400 	.word	0x40021400
 800160c:	40021800 	.word	0x40021800
 8001610:	2000024c 	.word	0x2000024c
 8001614:	40004800 	.word	0x40004800
 8001618:	20000338 	.word	0x20000338
 800161c:	40010000 	.word	0x40010000
 8001620:	40020400 	.word	0x40020400
 8001624:	40020800 	.word	0x40020800
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162c:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800162e:	931d      	str	r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 8001630:	931e      	str	r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001632:	931f      	str	r3, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001638:	9220      	str	r2, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.BreakFilter = 0;
 800163a:	9321      	str	r3, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800163c:	9322      	str	r3, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800163e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001642:	9223      	str	r2, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001644:	9324      	str	r3, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001646:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001648:	a91b      	add	r1, sp, #108	; 0x6c
 800164a:	487e      	ldr	r0, [pc, #504]	; (8001844 <main+0x4e0>)
 800164c:	f002 fc5a 	bl	8003f04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001650:	2800      	cmp	r0, #0
 8001652:	f040 808f 	bne.w	8001774 <main+0x410>
  HAL_TIM_MspPostInit(&htim1);
 8001656:	487b      	ldr	r0, [pc, #492]	; (8001844 <main+0x4e0>)
 8001658:	f000 faa0 	bl	8001b9c <HAL_TIM_MspPostInit>
  hi2c2.Instance = I2C2;
 800165c:	487a      	ldr	r0, [pc, #488]	; (8001848 <main+0x4e4>)
 800165e:	4b7b      	ldr	r3, [pc, #492]	; (800184c <main+0x4e8>)
 8001660:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <main+0x4ec>)
 8001664:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	2201      	movs	r2, #1
 800166c:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800166e:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001670:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001672:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001674:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001676:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001678:	f000 ff7c 	bl	8002574 <HAL_I2C_Init>
 800167c:	2800      	cmp	r0, #0
 800167e:	d17b      	bne.n	8001778 <main+0x414>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4871      	ldr	r0, [pc, #452]	; (8001848 <main+0x4e4>)
 8001684:	f001 f958 	bl	8002938 <HAL_I2CEx_ConfigAnalogFilter>
 8001688:	2800      	cmp	r0, #0
 800168a:	d177      	bne.n	800177c <main+0x418>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800168c:	2100      	movs	r1, #0
 800168e:	486e      	ldr	r0, [pc, #440]	; (8001848 <main+0x4e4>)
 8001690:	f001 f980 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 8001694:	2800      	cmp	r0, #0
 8001696:	d173      	bne.n	8001780 <main+0x41c>
  BH1750_Init(&hi2c2);
 8001698:	486b      	ldr	r0, [pc, #428]	; (8001848 <main+0x4e4>)
 800169a:	f7ff fd79 	bl	8001190 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 800169e:	2011      	movs	r0, #17
 80016a0:	f7ff fd1c 	bl	80010dc <BH1750_SetMode>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a4:	4e67      	ldr	r6, [pc, #412]	; (8001844 <main+0x4e0>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4630      	mov	r0, r6
 80016aa:	f002 fb25 	bl	8003cf8 <HAL_TIM_PWM_Start>
  PIDController_Init(&pid);
 80016ae:	4869      	ldr	r0, [pc, #420]	; (8001854 <main+0x4f0>)
 80016b0:	f7ff fc66 	bl	8000f80 <PIDController_Init>
  HAL_UART_Receive_IT(&huart3, key, 1); // <------------------------
 80016b4:	2201      	movs	r2, #1
 80016b6:	4968      	ldr	r1, [pc, #416]	; (8001858 <main+0x4f4>)
 80016b8:	4868      	ldr	r0, [pc, #416]	; (800185c <main+0x4f8>)
 80016ba:	f003 fa95 	bl	8004be8 <HAL_UART_Receive_IT>
  tm1637Init();
 80016be:	f000 f9c3 	bl	8001a48 <tm1637Init>
  tm1637SetBrightness(4);
 80016c2:	2004      	movs	r0, #4
 80016c4:	f000 f9b2 	bl	8001a2c <tm1637SetBrightness>
  BH1750_ReadLight(&light);
 80016c8:	4c65      	ldr	r4, [pc, #404]	; (8001860 <main+0x4fc>)
 80016ca:	4620      	mov	r0, r4
 80016cc:	f7ff fd72 	bl	80011b4 <BH1750_ReadLight>
  limitMin = ceil(light);
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f7fe ff59 	bl	8000588 <__aeabi_f2d>
 80016d6:	ec41 0b10 	vmov	d0, r0, r1
 80016da:	f006 f975 	bl	80079c8 <ceil>
 80016de:	ec51 0b10 	vmov	r0, r1, d0
 80016e2:	4d60      	ldr	r5, [pc, #384]	; (8001864 <main+0x500>)
 80016e4:	f7ff fa80 	bl	8000be8 <__aeabi_d2f>
 80016e8:	6028      	str	r0, [r5, #0]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80016ea:	6833      	ldr	r3, [r6, #0]
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	6358      	str	r0, [r3, #52]	; 0x34
  HAL_Delay(1000);
 80016f2:	f000 fbb5 	bl	8001e60 <HAL_Delay>
  BH1750_ReadLight(&light);
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff fd5c 	bl	80011b4 <BH1750_ReadLight>
  limitMax = floor(light);
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	f7fe ff43 	bl	8000588 <__aeabi_f2d>
 8001702:	ec41 0b10 	vmov	d0, r0, r1
 8001706:	f006 f9e3 	bl	8007ad0 <floor>
 800170a:	ec51 0b10 	vmov	r0, r1, d0
 800170e:	f7ff fa6b 	bl	8000be8 <__aeabi_d2f>
 8001712:	ee07 0a90 	vmov	s15, r0
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <main+0x504>)
 8001718:	6018      	str	r0, [r3, #0]
  yr = round((limitMax+limitMin)/2);
 800171a:	ed95 7a00 	vldr	s14, [r5]
 800171e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001722:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f7fe ff2b 	bl	8000588 <__aeabi_f2d>
 8001732:	ec41 0b10 	vmov	d0, r0, r1
 8001736:	f006 fa4b 	bl	8007bd0 <round>
 800173a:	ec51 0b10 	vmov	r0, r1, d0
 800173e:	f7ff fa53 	bl	8000be8 <__aeabi_d2f>
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <main+0x508>)
 8001744:	6018      	str	r0, [r3, #0]
	  BH1750_ReadLight(&measure);
 8001746:	4c4a      	ldr	r4, [pc, #296]	; (8001870 <main+0x50c>)
	  u = (uint16_t)PIDController_Update(&pid, yr, measure);
 8001748:	4698      	mov	r8, r3
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 800174a:	f8df a140 	ldr.w	sl, [pc, #320]	; 800188c <main+0x528>
	  u = (uint16_t)PIDController_Update(&pid, yr, measure);
 800174e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8001854 <main+0x4f0>
		 if(yr < 400) yr = 500;
 8001752:	eddf 8a48 	vldr	s17, [pc, #288]	; 8001874 <main+0x510>
		 else yr = 30;
 8001756:	ed9f 8a48 	vldr	s16, [pc, #288]	; 8001878 <main+0x514>
 800175a:	e024      	b.n	80017a6 <main+0x442>
 800175c:	b672      	cpsid	i
  while (1)
 800175e:	e7fe      	b.n	800175e <main+0x3fa>
 8001760:	b672      	cpsid	i
 8001762:	e7fe      	b.n	8001762 <main+0x3fe>
 8001764:	b672      	cpsid	i
 8001766:	e7fe      	b.n	8001766 <main+0x402>
 8001768:	b672      	cpsid	i
 800176a:	e7fe      	b.n	800176a <main+0x406>
 800176c:	b672      	cpsid	i
 800176e:	e7fe      	b.n	800176e <main+0x40a>
 8001770:	b672      	cpsid	i
 8001772:	e7fe      	b.n	8001772 <main+0x40e>
 8001774:	b672      	cpsid	i
 8001776:	e7fe      	b.n	8001776 <main+0x412>
 8001778:	b672      	cpsid	i
 800177a:	e7fe      	b.n	800177a <main+0x416>
 800177c:	b672      	cpsid	i
 800177e:	e7fe      	b.n	800177e <main+0x41a>
 8001780:	b672      	cpsid	i
 8001782:	e7fe      	b.n	8001782 <main+0x41e>
		 if(yr < 400) yr = 500;
 8001784:	edd8 7a00 	vldr	s15, [r8]
		 else yr = 30;
 8001788:	eef4 7ae8 	vcmpe.f32	s15, s17
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8001794:	bf48      	it	mi
 8001796:	eef0 7a48 	vmovmi.f32	s15, s16
 800179a:	edc8 7a00 	vstr	s15, [r8]
		 HAL_Delay(300);
 800179e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017a2:	f000 fb5d 	bl	8001e60 <HAL_Delay>
	  BH1750_ReadLight(&measure);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff fd04 	bl	80011b4 <BH1750_ReadLight>
	  u = (uint16_t)PIDController_Update(&pid, yr, measure);
 80017ac:	edd4 0a00 	vldr	s1, [r4]
 80017b0:	ed98 0a00 	vldr	s0, [r8]
 80017b4:	4648      	mov	r0, r9
 80017b6:	f7ff fbfd 	bl	8000fb4 <PIDController_Update>
 80017ba:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80017be:	ee10 3a10 	vmov	r3, s0
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4d2d      	ldr	r5, [pc, #180]	; (800187c <main+0x518>)
 80017c6:	802b      	strh	r3, [r5, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <main+0x4e0>)
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	6353      	str	r3, [r2, #52]	; 0x34
	  wyswietlaczf = measure*10;
 80017ce:	edd4 7a00 	vldr	s15, [r4]
 80017d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <main+0x51c>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	  wyswietlacz = wyswietlaczf;
 80017e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e4:	ee17 0a90 	vmov	r0, s15
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <main+0x520>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
	  tm1637DisplayDecimal(wyswietlacz, 0);
 80017ee:	2100      	movs	r1, #0
 80017f0:	f000 f8cc 	bl	800198c <tm1637DisplayDecimal>
	  sprintf((char*)text, "%.2f,%.2f,%d \n", measure, yr, u);
 80017f4:	6820      	ldr	r0, [r4, #0]
 80017f6:	f7fe fec7 	bl	8000588 <__aeabi_f2d>
 80017fa:	4606      	mov	r6, r0
 80017fc:	460f      	mov	r7, r1
 80017fe:	f8df b090 	ldr.w	fp, [pc, #144]	; 8001890 <main+0x52c>
 8001802:	882b      	ldrh	r3, [r5, #0]
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	f8d8 0000 	ldr.w	r0, [r8]
 800180a:	f7fe febd 	bl	8000588 <__aeabi_f2d>
 800180e:	e9cd 0100 	strd	r0, r1, [sp]
 8001812:	4632      	mov	r2, r6
 8001814:	463b      	mov	r3, r7
 8001816:	491c      	ldr	r1, [pc, #112]	; (8001888 <main+0x524>)
 8001818:	4658      	mov	r0, fp
 800181a:	f003 fea7 	bl	800556c <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)text, strlen(text), 500);
 800181e:	4658      	mov	r0, fp
 8001820:	f7fe fcf6 	bl	8000210 <strlen>
 8001824:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001828:	b282      	uxth	r2, r0
 800182a:	4659      	mov	r1, fp
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <main+0x4f8>)
 800182e:	f003 f8a1 	bl	8004974 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8001832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001836:	4650      	mov	r0, sl
 8001838:	f000 fcec 	bl	8002214 <HAL_GPIO_ReadPin>
 800183c:	2801      	cmp	r0, #1
 800183e:	d1b2      	bne.n	80017a6 <main+0x442>
 8001840:	e7a0      	b.n	8001784 <main+0x420>
 8001842:	bf00      	nop
 8001844:	20000338 	.word	0x20000338
 8001848:	200002d0 	.word	0x200002d0
 800184c:	40005800 	.word	0x40005800
 8001850:	00808cd2 	.word	0x00808cd2
 8001854:	2000021c 	.word	0x2000021c
 8001858:	20000384 	.word	0x20000384
 800185c:	2000024c 	.word	0x2000024c
 8001860:	20000320 	.word	0x20000320
 8001864:	20000388 	.word	0x20000388
 8001868:	20000390 	.word	0x20000390
 800186c:	20000200 	.word	0x20000200
 8001870:	2000031c 	.word	0x2000031c
 8001874:	43c80000 	.word	0x43c80000
 8001878:	43fa0000 	.word	0x43fa0000
 800187c:	2000038c 	.word	0x2000038c
 8001880:	200001fc 	.word	0x200001fc
 8001884:	200001f8 	.word	0x200001f8
 8001888:	08007c78 	.word	0x08007c78
 800188c:	40020800 	.word	0x40020800
 8001890:	20000324 	.word	0x20000324

08001894 <Error_Handler>:
 8001894:	b672      	cpsid	i
  while (1)
 8001896:	e7fe      	b.n	8001896 <Error_Handler+0x2>

08001898 <_tm1637DelayUsec>:
    }
}

void _tm1637DelayUsec(unsigned int i)
{
    for (; i>0; i--) {
 8001898:	4602      	mov	r2, r0
 800189a:	b130      	cbz	r0, 80018aa <_tm1637DelayUsec+0x12>
{
 800189c:	230a      	movs	r3, #10
        for (int j = 0; j < 10; ++j) {
            __asm__ __volatile__("nop\n\t":::"memory");
 800189e:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 80018a0:	3b01      	subs	r3, #1
 80018a2:	d1fc      	bne.n	800189e <_tm1637DelayUsec+0x6>
    for (; i>0; i--) {
 80018a4:	3a01      	subs	r2, #1
 80018a6:	d1f9      	bne.n	800189c <_tm1637DelayUsec+0x4>
        }
    }
}
 80018a8:	4770      	bx	lr
 80018aa:	4770      	bx	lr

080018ac <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 80018ac:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b4:	4801      	ldr	r0, [pc, #4]	; (80018bc <_tm1637ClkHigh+0x10>)
 80018b6:	f000 fcb3 	bl	8002220 <HAL_GPIO_WritePin>
}
 80018ba:	bd08      	pop	{r3, pc}
 80018bc:	40021400 	.word	0x40021400

080018c0 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 80018c0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018c8:	4801      	ldr	r0, [pc, #4]	; (80018d0 <_tm1637ClkLow+0x10>)
 80018ca:	f000 fca9 	bl	8002220 <HAL_GPIO_WritePin>
}
 80018ce:	bd08      	pop	{r3, pc}
 80018d0:	40021400 	.word	0x40021400

080018d4 <_tm1637ReadResult>:
{
 80018d4:	b508      	push	{r3, lr}
    _tm1637ClkLow();
 80018d6:	f7ff fff3 	bl	80018c0 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 80018da:	2005      	movs	r0, #5
 80018dc:	f7ff ffdc 	bl	8001898 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 80018e0:	f7ff ffe4 	bl	80018ac <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f7ff ffd7 	bl	8001898 <_tm1637DelayUsec>
    _tm1637ClkLow();
 80018ea:	f7ff ffe9 	bl	80018c0 <_tm1637ClkLow>
}
 80018ee:	bd08      	pop	{r3, pc}

080018f0 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 80018f0:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f8:	4801      	ldr	r0, [pc, #4]	; (8001900 <_tm1637DioHigh+0x10>)
 80018fa:	f000 fc91 	bl	8002220 <HAL_GPIO_WritePin>
}
 80018fe:	bd08      	pop	{r3, pc}
 8001900:	40021400 	.word	0x40021400

08001904 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001904:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190c:	4801      	ldr	r0, [pc, #4]	; (8001914 <_tm1637DioLow+0x10>)
 800190e:	f000 fc87 	bl	8002220 <HAL_GPIO_WritePin>
}
 8001912:	bd08      	pop	{r3, pc}
 8001914:	40021400 	.word	0x40021400

08001918 <_tm1637Start>:
{
 8001918:	b508      	push	{r3, lr}
    _tm1637ClkHigh();
 800191a:	f7ff ffc7 	bl	80018ac <_tm1637ClkHigh>
    _tm1637DioHigh();
 800191e:	f7ff ffe7 	bl	80018f0 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001922:	2002      	movs	r0, #2
 8001924:	f7ff ffb8 	bl	8001898 <_tm1637DelayUsec>
    _tm1637DioLow();
 8001928:	f7ff ffec 	bl	8001904 <_tm1637DioLow>
}
 800192c:	bd08      	pop	{r3, pc}

0800192e <_tm1637Stop>:
{
 800192e:	b508      	push	{r3, lr}
    _tm1637ClkLow();
 8001930:	f7ff ffc6 	bl	80018c0 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff ffaf 	bl	8001898 <_tm1637DelayUsec>
    _tm1637DioLow();
 800193a:	f7ff ffe3 	bl	8001904 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 800193e:	2002      	movs	r0, #2
 8001940:	f7ff ffaa 	bl	8001898 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001944:	f7ff ffb2 	bl	80018ac <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001948:	2002      	movs	r0, #2
 800194a:	f7ff ffa5 	bl	8001898 <_tm1637DelayUsec>
    _tm1637DioHigh();
 800194e:	f7ff ffcf 	bl	80018f0 <_tm1637DioHigh>
}
 8001952:	bd08      	pop	{r3, pc}

08001954 <_tm1637WriteByte>:
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4604      	mov	r4, r0
 8001958:	2508      	movs	r5, #8
        _tm1637DelayUsec(3);
 800195a:	2603      	movs	r6, #3
 800195c:	e00c      	b.n	8001978 <_tm1637WriteByte+0x24>
            _tm1637DioLow();
 800195e:	f7ff ffd1 	bl	8001904 <_tm1637DioLow>
        _tm1637DelayUsec(3);
 8001962:	4630      	mov	r0, r6
 8001964:	f7ff ff98 	bl	8001898 <_tm1637DelayUsec>
        b >>= 1;
 8001968:	0864      	lsrs	r4, r4, #1
        _tm1637ClkHigh();
 800196a:	f7ff ff9f 	bl	80018ac <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 800196e:	4630      	mov	r0, r6
 8001970:	f7ff ff92 	bl	8001898 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8001974:	3d01      	subs	r5, #1
 8001976:	d007      	beq.n	8001988 <_tm1637WriteByte+0x34>
        _tm1637ClkLow();
 8001978:	f7ff ffa2 	bl	80018c0 <_tm1637ClkLow>
        if (b & 0x01) {
 800197c:	f014 0f01 	tst.w	r4, #1
 8001980:	d0ed      	beq.n	800195e <_tm1637WriteByte+0xa>
            _tm1637DioHigh();
 8001982:	f7ff ffb5 	bl	80018f0 <_tm1637DioHigh>
 8001986:	e7ec      	b.n	8001962 <_tm1637WriteByte+0xe>
}
 8001988:	bd70      	pop	{r4, r5, r6, pc}
	...

0800198c <tm1637DisplayDecimal>:
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b083      	sub	sp, #12
    for (int i = 0; i < 4; ++i) {
 8001990:	ae01      	add	r6, sp, #4
{
 8001992:	4635      	mov	r5, r6
 8001994:	2401      	movs	r4, #1
        digitArr[i] = segmentMap[v % 10];
 8001996:	f8df c090 	ldr.w	ip, [pc, #144]	; 8001a28 <tm1637DisplayDecimal+0x9c>
 800199a:	4f22      	ldr	r7, [pc, #136]	; (8001a24 <tm1637DisplayDecimal+0x98>)
 800199c:	e009      	b.n	80019b2 <tm1637DisplayDecimal+0x26>
            digitArr[i] |= 1 << 7;
 800199e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019a2:	f88d 3006 	strb.w	r3, [sp, #6]
        v /= 10;
 80019a6:	fb87 2300 	smull	r2, r3, r7, r0
 80019aa:	17c0      	asrs	r0, r0, #31
 80019ac:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
    for (int i = 0; i < 4; ++i) {
 80019b0:	3401      	adds	r4, #1
        digitArr[i] = segmentMap[v % 10];
 80019b2:	fb87 2300 	smull	r2, r3, r7, r0
 80019b6:	17c2      	asrs	r2, r0, #31
 80019b8:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 80019bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019c0:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 80019c4:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80019c8:	f805 3b01 	strb.w	r3, [r5], #1
        if (i == 2 && displaySeparator) {
 80019cc:	2c03      	cmp	r4, #3
 80019ce:	d101      	bne.n	80019d4 <tm1637DisplayDecimal+0x48>
 80019d0:	2900      	cmp	r1, #0
 80019d2:	d1e4      	bne.n	800199e <tm1637DisplayDecimal+0x12>
    for (int i = 0; i < 4; ++i) {
 80019d4:	2c03      	cmp	r4, #3
 80019d6:	dc05      	bgt.n	80019e4 <tm1637DisplayDecimal+0x58>
        v /= 10;
 80019d8:	fb87 2300 	smull	r2, r3, r7, r0
 80019dc:	17c0      	asrs	r0, r0, #31
 80019de:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 80019e2:	e7e5      	b.n	80019b0 <tm1637DisplayDecimal+0x24>
    _tm1637Start();
 80019e4:	f7ff ff98 	bl	8001918 <_tm1637Start>
    _tm1637WriteByte(0x40);
 80019e8:	2040      	movs	r0, #64	; 0x40
 80019ea:	f7ff ffb3 	bl	8001954 <_tm1637WriteByte>
    _tm1637ReadResult();
 80019ee:	f7ff ff71 	bl	80018d4 <_tm1637ReadResult>
    _tm1637Stop();
 80019f2:	f7ff ff9c 	bl	800192e <_tm1637Stop>
    _tm1637Start();
 80019f6:	f7ff ff8f 	bl	8001918 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 80019fa:	20c0      	movs	r0, #192	; 0xc0
 80019fc:	f7ff ffaa 	bl	8001954 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001a00:	f7ff ff68 	bl	80018d4 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001a04:	f10d 0407 	add.w	r4, sp, #7
        _tm1637WriteByte(digitArr[3 - i]);
 8001a08:	7820      	ldrb	r0, [r4, #0]
 8001a0a:	f7ff ffa3 	bl	8001954 <_tm1637WriteByte>
        _tm1637ReadResult();
 8001a0e:	f7ff ff61 	bl	80018d4 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001a12:	42b4      	cmp	r4, r6
 8001a14:	f104 34ff 	add.w	r4, r4, #4294967295
 8001a18:	d1f6      	bne.n	8001a08 <tm1637DisplayDecimal+0x7c>
    _tm1637Stop();
 8001a1a:	f7ff ff88 	bl	800192e <_tm1637Stop>
}
 8001a1e:	b003      	add	sp, #12
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	66666667 	.word	0x66666667
 8001a28:	08007c88 	.word	0x08007c88

08001a2c <tm1637SetBrightness>:
{
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
    _tm1637Start();
 8001a30:	f7ff ff72 	bl	8001918 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8001a34:	f1a4 0079 	sub.w	r0, r4, #121	; 0x79
 8001a38:	b2c0      	uxtb	r0, r0
 8001a3a:	f7ff ff8b 	bl	8001954 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001a3e:	f7ff ff49 	bl	80018d4 <_tm1637ReadResult>
    _tm1637Stop();
 8001a42:	f7ff ff74 	bl	800192e <_tm1637Stop>
}
 8001a46:	bd10      	pop	{r4, pc}

08001a48 <tm1637Init>:
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	b088      	sub	sp, #32
    CLK_PORT_CLK_ENABLE();
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <tm1637Init+0x64>)
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	f042 0204 	orr.w	r2, r2, #4
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
 8001a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a58:	f002 0204 	and.w	r2, r2, #4
 8001a5c:	9201      	str	r2, [sp, #4]
 8001a5e:	9a01      	ldr	r2, [sp, #4]
    DIO_PORT_CLK_ENABLE();
 8001a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a62:	f042 0204 	orr.w	r2, r2, #4
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitTypeDef g = {0};
 8001a72:	2300      	movs	r3, #0
 8001a74:	9307      	str	r3, [sp, #28]
    g.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	9305      	str	r3, [sp, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001a7a:	2311      	movs	r3, #17
 8001a7c:	9304      	str	r3, [sp, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	9306      	str	r3, [sp, #24]
    g.Pin = CLK_PIN;
 8001a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a86:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8001a88:	4c09      	ldr	r4, [pc, #36]	; (8001ab0 <tm1637Init+0x68>)
 8001a8a:	a903      	add	r1, sp, #12
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f000 fabf 	bl	8002010 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8001a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a96:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8001a98:	a903      	add	r1, sp, #12
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f000 fab8 	bl	8002010 <HAL_GPIO_Init>
    tm1637SetBrightness(8);
 8001aa0:	2008      	movs	r0, #8
 8001aa2:	f7ff ffc3 	bl	8001a2c <tm1637SetBrightness>
}
 8001aa6:	b008      	add	sp, #32
 8001aa8:	bd10      	pop	{r4, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40021400 	.word	0x40021400

08001ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_MspInit+0x2c>)
 8001ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	b002      	add	sp, #8
 8001ade:	4770      	bx	lr
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	b0a8      	sub	sp, #160	; 0xa0
 8001ae8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	2100      	movs	r1, #0
 8001aec:	9123      	str	r1, [sp, #140]	; 0x8c
 8001aee:	9124      	str	r1, [sp, #144]	; 0x90
 8001af0:	9125      	str	r1, [sp, #148]	; 0x94
 8001af2:	9126      	str	r1, [sp, #152]	; 0x98
 8001af4:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af6:	2284      	movs	r2, #132	; 0x84
 8001af8:	a802      	add	r0, sp, #8
 8001afa:	f003 f8c5 	bl	8004c88 <memset>
  if(hi2c->Instance==I2C2)
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_I2C_MspInit+0x80>)
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b06:	b028      	add	sp, #160	; 0xa0
 8001b08:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0e:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	a802      	add	r0, sp, #8
 8001b16:	f001 facb 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	bb00      	cbnz	r0, 8001b5e <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1c:	4c12      	ldr	r4, [pc, #72]	; (8001b68 <HAL_I2C_MspInit+0x84>)
 8001b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	6323      	str	r3, [r4, #48]	; 0x30
 8001b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b30:	2303      	movs	r3, #3
 8001b32:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b34:	2212      	movs	r2, #18
 8001b36:	9224      	str	r2, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9225      	str	r2, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b42:	a923      	add	r1, sp, #140	; 0x8c
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <HAL_I2C_MspInit+0x88>)
 8001b46:	f000 fa63 	bl	8002010 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b50:	6423      	str	r3, [r4, #64]	; 0x40
 8001b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
}
 8001b5c:	e7d3      	b.n	8001b06 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001b5e:	f7ff fe99 	bl	8001894 <Error_Handler>
 8001b62:	e7db      	b.n	8001b1c <HAL_I2C_MspInit+0x38>
 8001b64:	40005800 	.word	0x40005800
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40021400 	.word	0x40021400

08001b70 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001b70:	6802      	ldr	r2, [r0, #0]
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x28>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d000      	beq.n	8001b7a <HAL_TIM_Base_MspInit+0xa>
 8001b78:	4770      	bx	lr
{
 8001b7a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b7c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b92:	b002      	add	sp, #8
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40010000 	.word	0x40010000

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b500      	push	{lr}
 8001b9e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	9303      	str	r3, [sp, #12]
 8001ba8:	9304      	str	r3, [sp, #16]
 8001baa:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_TIM_MspPostInit+0x54>)
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d002      	beq.n	8001bba <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bb4:	b007      	add	sp, #28
 8001bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bba:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	f042 0210 	orr.w	r2, r2, #16
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be4:	a901      	add	r1, sp, #4
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <HAL_TIM_MspPostInit+0x58>)
 8001be8:	f000 fa12 	bl	8002010 <HAL_GPIO_Init>
}
 8001bec:	e7e2      	b.n	8001bb4 <HAL_TIM_MspPostInit+0x18>
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	b0a8      	sub	sp, #160	; 0xa0
 8001bfc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	2100      	movs	r1, #0
 8001c00:	9123      	str	r1, [sp, #140]	; 0x8c
 8001c02:	9124      	str	r1, [sp, #144]	; 0x90
 8001c04:	9125      	str	r1, [sp, #148]	; 0x94
 8001c06:	9126      	str	r1, [sp, #152]	; 0x98
 8001c08:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0a:	2284      	movs	r2, #132	; 0x84
 8001c0c:	a802      	add	r0, sp, #8
 8001c0e:	f003 f83b 	bl	8004c88 <memset>
  if(huart->Instance==USART3)
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_UART_MspInit+0x94>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c1a:	b028      	add	sp, #160	; 0xa0
 8001c1c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c22:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c28:	a802      	add	r0, sp, #8
 8001c2a:	f001 fa41 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	bb50      	cbnz	r0, 8001c86 <HAL_UART_MspInit+0x8e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_UART_MspInit+0x98>)
 8001c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c34:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c3c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c40:	9200      	str	r2, [sp, #0]
 8001c42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5a:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2400      	movs	r4, #0
 8001c62:	9425      	str	r4, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c68:	2307      	movs	r3, #7
 8001c6a:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6c:	a923      	add	r1, sp, #140	; 0x8c
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_UART_MspInit+0x9c>)
 8001c70:	f000 f9ce 	bl	8002010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c74:	4622      	mov	r2, r4
 8001c76:	4621      	mov	r1, r4
 8001c78:	2027      	movs	r0, #39	; 0x27
 8001c7a:	f000 f917 	bl	8001eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c7e:	2027      	movs	r0, #39	; 0x27
 8001c80:	f000 f944 	bl	8001f0c <HAL_NVIC_EnableIRQ>
}
 8001c84:	e7c9      	b.n	8001c1a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001c86:	f7ff fe05 	bl	8001894 <Error_Handler>
 8001c8a:	e7d1      	b.n	8001c30 <HAL_UART_MspInit+0x38>
 8001c8c:	40004800 	.word	0x40004800
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020c00 	.word	0x40020c00

08001c98 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler>

08001c9a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler>

08001c9c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <MemManage_Handler>

08001c9e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler>

08001ca0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler>

08001ca2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001caa:	f000 f8c7 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cae:	bd08      	pop	{r3, pc}

08001cb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb2:	4802      	ldr	r0, [pc, #8]	; (8001cbc <USART3_IRQHandler+0xc>)
 8001cb4:	f002 f9a4 	bl	8004000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cb8:	bd08      	pop	{r3, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000024c 	.word	0x2000024c

08001cc0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cc6:	f002 ffb5 	bl	8004c34 <__errno>
 8001cca:	2316      	movs	r3, #22
 8001ccc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	bd08      	pop	{r3, pc}

08001cd4 <_exit>:

void _exit (int status)
{
 8001cd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cd6:	f002 ffad 	bl	8004c34 <__errno>
 8001cda:	2316      	movs	r3, #22
 8001cdc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0xa>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	1e16      	subs	r6, r2, #0
 8001ce4:	dd07      	ble.n	8001cf6 <_read+0x16>
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001cea:	f3af 8000 	nop.w
 8001cee:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	42a5      	cmp	r5, r4
 8001cf4:	d1f9      	bne.n	8001cea <_read+0xa>
	}

return len;
}
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}

08001cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cfa:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfc:	1e16      	subs	r6, r2, #0
 8001cfe:	dd07      	ble.n	8001d10 <_write+0x16>
 8001d00:	460c      	mov	r4, r1
 8001d02:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001d04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d08:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	42a5      	cmp	r5, r4
 8001d0e:	d1f9      	bne.n	8001d04 <_write+0xa>
	}
	return len;
}
 8001d10:	4630      	mov	r0, r6
 8001d12:	bd70      	pop	{r4, r5, r6, pc}

08001d14 <_close>:

int _close(int file)
{
	return -1;
}
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	4770      	bx	lr

08001d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d20:	2000      	movs	r0, #0
 8001d22:	4770      	bx	lr

08001d24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d24:	2001      	movs	r0, #1
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d28:	2000      	movs	r0, #0
 8001d2a:	4770      	bx	lr

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b508      	push	{r3, lr}
 8001d2e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <_sbrk+0x38>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	b152      	cbz	r2, 8001d4c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <_sbrk+0x38>)
 8001d38:	6810      	ldr	r0, [r2, #0]
 8001d3a:	4403      	add	r3, r0
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <_sbrk+0x3c>)
 8001d3e:	490b      	ldr	r1, [pc, #44]	; (8001d6c <_sbrk+0x40>)
 8001d40:	1a52      	subs	r2, r2, r1
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d806      	bhi.n	8001d54 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <_sbrk+0x38>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001d4a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <_sbrk+0x38>)
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <_sbrk+0x44>)
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	e7f0      	b.n	8001d36 <_sbrk+0xa>
    errno = ENOMEM;
 8001d54:	f002 ff6e 	bl	8004c34 <__errno>
 8001d58:	230c      	movs	r3, #12
 8001d5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	e7f3      	b.n	8001d4a <_sbrk+0x1e>
 8001d62:	bf00      	nop
 8001d64:	20000204 	.word	0x20000204
 8001d68:	20050000 	.word	0x20050000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	200003a8 	.word	0x200003a8

08001d74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4a03      	ldr	r2, [pc, #12]	; (8001d84 <SystemInit+0x10>)
 8001d76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8e:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da4:	4c0b      	ldr	r4, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db2:	f7ff ffdf 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f002 ff43 	bl	8004c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7ff fad3 	bl	8001364 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001dcc:	080080a4 	.word	0x080080a4
  ldr r2, =_sbss
 8001dd0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dd4:	200003a8 	.word	0x200003a8

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_InitTick+0x3c>)
 8001de2:	7818      	ldrb	r0, [r3, #0]
 8001de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_InitTick+0x40>)
 8001dee:	6810      	ldr	r0, [r2, #0]
 8001df0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001df4:	f000 f898 	bl	8001f28 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df8:	2c0f      	cmp	r4, #15
 8001dfa:	d800      	bhi.n	8001dfe <HAL_InitTick+0x22>
 8001dfc:	b108      	cbz	r0, 8001e02 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8001e00:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e02:	2200      	movs	r2, #0
 8001e04:	4621      	mov	r1, r4
 8001e06:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0a:	f000 f84f 	bl	8001eac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <HAL_InitTick+0x44>)
 8001e10:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8001e12:	2000      	movs	r0, #0
 8001e14:	e7f4      	b.n	8001e00 <HAL_InitTick+0x24>
 8001e16:	bf00      	nop
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_Init>:
{
 8001e24:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f000 f82e 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff ffd5 	bl	8001ddc <HAL_InitTick>
  HAL_MspInit();
 8001e32:	f7ff fe3f 	bl	8001ab4 <HAL_MspInit>
}
 8001e36:	2000      	movs	r0, #0
 8001e38:	bd08      	pop	{r3, pc}
	...

08001e3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e3c:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <HAL_IncTick+0x10>)
 8001e3e:	6811      	ldr	r1, [r2, #0]
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_IncTick+0x14>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	440b      	add	r3, r1
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000394 	.word	0x20000394
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e54:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <HAL_GetTick+0x8>)
 8001e56:	6818      	ldr	r0, [r3, #0]
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000394 	.word	0x20000394

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff fff6 	bl	8001e54 <HAL_GetTick>
 8001e68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001e6e:	d002      	beq.n	8001e76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <HAL_Delay+0x24>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e76:	f7ff ffed 	bl	8001e54 <HAL_GetTick>
 8001e7a:	1b40      	subs	r0, r0, r5
 8001e7c:	42a0      	cmp	r0, r4
 8001e7e:	d3fa      	bcc.n	8001e76 <HAL_Delay+0x16>
  {
  }
}
 8001e80:	bd38      	pop	{r3, r4, r5, pc}
 8001e82:	bf00      	nop
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001e8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	0200      	lsls	r0, r0, #8
 8001e8e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	0c1b      	lsrs	r3, r3, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e9e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ea0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00
 8001ea8:	05fa0000 	.word	0x05fa0000

08001eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eac:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_NVIC_SetPriority+0x54>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb6:	f1c3 0407 	rsb	r4, r3, #7
 8001eba:	2c04      	cmp	r4, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec0:	1d1d      	adds	r5, r3, #4
 8001ec2:	2d06      	cmp	r5, #6
 8001ec4:	bf8c      	ite	hi
 8001ec6:	3b03      	subhi	r3, #3
 8001ec8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eca:	f04f 35ff 	mov.w	r5, #4294967295
 8001ece:	fa05 f404 	lsl.w	r4, r5, r4
 8001ed2:	ea21 0104 	bic.w	r1, r1, r4
 8001ed6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	fa05 f303 	lsl.w	r3, r5, r3
 8001edc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	db05      	blt.n	8001ef2 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	0109      	lsls	r1, r1, #4
 8001ee8:	b2c9      	uxtb	r1, r1
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_NVIC_SetPriority+0x58>)
 8001eec:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001eee:	bc30      	pop	{r4, r5}
 8001ef0:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	f000 000f 	and.w	r0, r0, #15
 8001ef6:	0109      	lsls	r1, r1, #4
 8001ef8:	b2c9      	uxtb	r1, r1
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_NVIC_SetPriority+0x5c>)
 8001efc:	5419      	strb	r1, [r3, r0]
 8001efe:	e7f6      	b.n	8001eee <HAL_NVIC_SetPriority+0x42>
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	e000e400 	.word	0xe000e400
 8001f08:	e000ed14 	.word	0xe000ed14

08001f0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	db08      	blt.n	8001f22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f10:	0942      	lsrs	r2, r0, #5
 8001f12:	f000 001f 	and.w	r0, r0, #31
 8001f16:	2301      	movs	r3, #1
 8001f18:	fa03 f000 	lsl.w	r0, r3, r0
 8001f1c:	4b01      	ldr	r3, [pc, #4]	; (8001f24 <HAL_NVIC_EnableIRQ+0x18>)
 8001f1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100

08001f28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	3801      	subs	r0, #1
 8001f2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f2e:	d20a      	bcs.n	8001f46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_SYSTICK_Config+0x24>)
 8001f32:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_SYSTICK_Config+0x28>)
 8001f36:	21f0      	movs	r1, #240	; 0xf0
 8001f38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e010 	.word	0xe000e010
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f58:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001f5a:	f7ff ff7b 	bl	8001e54 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d006      	beq.n	8001f76 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8001f74:	bd70      	pop	{r4, r5, r6, pc}
 8001f76:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	f023 0316 	bic.w	r3, r3, #22
 8001f80:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	6953      	ldr	r3, [r2, #20]
 8001f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f8a:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f8e:	b1e3      	cbz	r3, 8001fca <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	6822      	ldr	r2, [r4, #0]
 8001f92:	6813      	ldr	r3, [r2, #0]
 8001f94:	f023 0308 	bic.w	r3, r3, #8
 8001f98:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	6822      	ldr	r2, [r4, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f013 0f01 	tst.w	r3, #1
 8001fac:	d011      	beq.n	8001fd2 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fae:	f7ff ff51 	bl	8001e54 <HAL_GetTick>
 8001fb2:	1b43      	subs	r3, r0, r5
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d9f5      	bls.n	8001fa4 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001fc8:	e7d4      	b.n	8001f74 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1df      	bne.n	8001f90 <HAL_DMA_Abort+0x3c>
 8001fd0:	e7e3      	b.n	8001f9a <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fd4:	233f      	movs	r3, #63	; 0x3f
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8001fe6:	e7c5      	b.n	8001f74 <HAL_DMA_Abort+0x20>

08001fe8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800200a:	2000      	movs	r0, #0
}
 800200c:	4770      	bx	lr
	...

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002014:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4e78      	ldr	r6, [pc, #480]	; (80021fc <HAL_GPIO_Init+0x1ec>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201a:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8002208 <HAL_GPIO_Init+0x1f8>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201e:	4d78      	ldr	r5, [pc, #480]	; (8002200 <HAL_GPIO_Init+0x1f0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002020:	f8df e1e8 	ldr.w	lr, [pc, #488]	; 800220c <HAL_GPIO_Init+0x1fc>
 8002024:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8002210 <HAL_GPIO_Init+0x200>
 8002028:	e049      	b.n	80020be <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR; 
 800202a:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800202e:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f20b 	lsl.w	r2, r2, fp
 8002038:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800203c:	68ca      	ldr	r2, [r1, #12]
 800203e:	fa02 f20b 	lsl.w	r2, r2, fp
 8002042:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8002046:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8002048:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204a:	ea22 0a04 	bic.w	sl, r2, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	684a      	ldr	r2, [r1, #4]
 8002050:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8002054:	409c      	lsls	r4, r3
 8002056:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OTYPER = temp;
 800205a:	6044      	str	r4, [r0, #4]
 800205c:	e03d      	b.n	80020da <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800205e:	2200      	movs	r2, #0
 8002060:	fa02 f20b 	lsl.w	r2, r2, fp
 8002064:	ea42 020a 	orr.w	r2, r2, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8002068:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 800206a:	68ac      	ldr	r4, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 800206c:	ea6f 0208 	mvn.w	r2, r8
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002070:	684f      	ldr	r7, [r1, #4]
 8002072:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002076:	bf0c      	ite	eq
 8002078:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 800207a:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->RTSR = temp;
 800207e:	60ac      	str	r4, [r5, #8]

        temp = EXTI->FTSR;
 8002080:	68ec      	ldr	r4, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002082:	684f      	ldr	r7, [r1, #4]
 8002084:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002088:	bf0c      	ite	eq
 800208a:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 800208c:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->FTSR = temp;
 8002090:	60ec      	str	r4, [r5, #12]

        temp = EXTI->EMR;
 8002092:	686c      	ldr	r4, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002094:	684f      	ldr	r7, [r1, #4]
 8002096:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800209a:	bf0c      	ite	eq
 800209c:	4014      	andeq	r4, r2
        {
          temp |= iocurrent;
 800209e:	ea48 0404 	orrne.w	r4, r8, r4
        }
        EXTI->EMR = temp;
 80020a2:	606c      	str	r4, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	682c      	ldr	r4, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a6:	684f      	ldr	r7, [r1, #4]
 80020a8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80020ac:	bf0c      	ite	eq
 80020ae:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 80020b0:	ea48 0204 	orrne.w	r2, r8, r4
        }
        EXTI->IMR = temp;
 80020b4:	602a      	str	r2, [r5, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020b6:	3301      	adds	r3, #1
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	f000 809b 	beq.w	80021f4 <HAL_GPIO_Init+0x1e4>
    ioposition = ((uint32_t)0x01) << position;
 80020be:	2401      	movs	r4, #1
 80020c0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c2:	680a      	ldr	r2, [r1, #0]
 80020c4:	ea04 0802 	and.w	r8, r4, r2
    if(iocurrent == ioposition)
 80020c8:	ea34 0202 	bics.w	r2, r4, r2
 80020cc:	d1f3      	bne.n	80020b6 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ce:	684a      	ldr	r2, [r1, #4]
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	3a01      	subs	r2, #1
 80020d6:	2a01      	cmp	r2, #1
 80020d8:	d9a7      	bls.n	800202a <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020da:	684a      	ldr	r2, [r1, #4]
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	2a03      	cmp	r2, #3
 80020e2:	d025      	beq.n	8002130 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80020e4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f20a 	lsl.w	r2, r2, sl
 80020f0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f4:	688a      	ldr	r2, [r1, #8]
 80020f6:	fa02 f20a 	lsl.w	r2, r2, sl
 80020fa:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80020fc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	684a      	ldr	r2, [r1, #4]
 8002100:	f002 0203 	and.w	r2, r2, #3
 8002104:	2a02      	cmp	r2, #2
 8002106:	d113      	bne.n	8002130 <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3];
 8002108:	08dc      	lsrs	r4, r3, #3
 800210a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800210e:	f8d4 a020 	ldr.w	sl, [r4, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002112:	f003 0207 	and.w	r2, r3, #7
 8002116:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f20b 	lsl.w	r2, r2, fp
 8002120:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002124:	690a      	ldr	r2, [r1, #16]
 8002126:	fa02 f20b 	lsl.w	r2, r2, fp
 800212a:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3] = temp;
 800212e:	6222      	str	r2, [r4, #32]
      temp = GPIOx->MODER;
 8002130:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002132:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f20a 	lsl.w	r2, r2, sl
 800213c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002140:	684a      	ldr	r2, [r1, #4]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	fa02 f20a 	lsl.w	r2, r2, sl
 800214a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800214c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214e:	684a      	ldr	r2, [r1, #4]
 8002150:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8002154:	d0af      	beq.n	80020b6 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8002158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800215c:	6472      	str	r2, [r6, #68]	; 0x44
 800215e:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8002160:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002164:	9201      	str	r2, [sp, #4]
 8002166:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8002168:	f023 0403 	bic.w	r4, r3, #3
 800216c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002170:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8002174:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f20b 	lsl.w	r2, r2, fp
 8002186:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800218a:	4560      	cmp	r0, ip
 800218c:	f43f af67 	beq.w	800205e <HAL_GPIO_Init+0x4e>
 8002190:	4570      	cmp	r0, lr
 8002192:	d01f      	beq.n	80021d4 <HAL_GPIO_Init+0x1c4>
 8002194:	4548      	cmp	r0, r9
 8002196:	d01f      	beq.n	80021d8 <HAL_GPIO_Init+0x1c8>
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x1f4>)
 800219a:	4290      	cmp	r0, r2
 800219c:	d01e      	beq.n	80021dc <HAL_GPIO_Init+0x1cc>
 800219e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d01c      	beq.n	80021e0 <HAL_GPIO_Init+0x1d0>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d01a      	beq.n	80021e4 <HAL_GPIO_Init+0x1d4>
 80021ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d018      	beq.n	80021e8 <HAL_GPIO_Init+0x1d8>
 80021b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ba:	4290      	cmp	r0, r2
 80021bc:	d016      	beq.n	80021ec <HAL_GPIO_Init+0x1dc>
 80021be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c2:	4290      	cmp	r0, r2
 80021c4:	d014      	beq.n	80021f0 <HAL_GPIO_Init+0x1e0>
 80021c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ca:	4290      	cmp	r0, r2
 80021cc:	bf0c      	ite	eq
 80021ce:	2209      	moveq	r2, #9
 80021d0:	220a      	movne	r2, #10
 80021d2:	e745      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021d4:	2201      	movs	r2, #1
 80021d6:	e743      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021d8:	2202      	movs	r2, #2
 80021da:	e741      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021dc:	2203      	movs	r2, #3
 80021de:	e73f      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021e0:	2204      	movs	r2, #4
 80021e2:	e73d      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021e4:	2205      	movs	r2, #5
 80021e6:	e73b      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021e8:	2206      	movs	r2, #6
 80021ea:	e739      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021ec:	2207      	movs	r2, #7
 80021ee:	e737      	b.n	8002060 <HAL_GPIO_Init+0x50>
 80021f0:	2208      	movs	r2, #8
 80021f2:	e735      	b.n	8002060 <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 80021f4:	b003      	add	sp, #12
 80021f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013c00 	.word	0x40013c00
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800

08002214 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002214:	6903      	ldr	r3, [r0, #16]
 8002216:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002218:	bf14      	ite	ne
 800221a:	2001      	movne	r0, #1
 800221c:	2000      	moveq	r0, #0
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002220:	b10a      	cbz	r2, 8002226 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	6181      	str	r1, [r0, #24]
 8002224:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002226:	0409      	lsls	r1, r1, #16
 8002228:	6181      	str	r1, [r0, #24]
  }
}
 800222a:	4770      	bx	lr

0800222c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800222c:	6803      	ldr	r3, [r0, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	f012 0f02 	tst.w	r2, #2
 8002234:	d001      	beq.n	800223a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223a:	6803      	ldr	r3, [r0, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	f012 0f01 	tst.w	r2, #1
 8002242:	d103      	bne.n	800224c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	619a      	str	r2, [r3, #24]
  }
}
 800224c:	4770      	bx	lr

0800224e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800224e:	b430      	push	{r4, r5}
 8002250:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002252:	6805      	ldr	r5, [r0, #0]
 8002254:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002256:	4323      	orrs	r3, r4
 8002258:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800225c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002260:	430b      	orrs	r3, r1
 8002262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002266:	0d64      	lsrs	r4, r4, #21
 8002268:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800226c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002270:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8002274:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002278:	f044 0403 	orr.w	r4, r4, #3
 800227c:	ea20 0404 	bic.w	r4, r0, r4
 8002280:	4323      	orrs	r3, r4
 8002282:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002284:	bc30      	pop	{r4, r5}
 8002286:	4770      	bx	lr

08002288 <I2C_IsErrorOccurred>:
{
 8002288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800228c:	4605      	mov	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800228e:	6803      	ldr	r3, [r0, #0]
 8002290:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002292:	f017 0710 	ands.w	r7, r7, #16
 8002296:	d052      	beq.n	800233e <I2C_IsErrorOccurred+0xb6>
 8002298:	460e      	mov	r6, r1
 800229a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	2210      	movs	r2, #16
 800229e:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2400      	movs	r4, #0
 80022a2:	46a1      	mov	r9, r4
 80022a4:	46a2      	mov	sl, r4
 80022a6:	4627      	mov	r7, r4
              hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	f04f 0b20 	mov.w	fp, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022ac:	682a      	ldr	r2, [r5, #0]
 80022ae:	6993      	ldr	r3, [r2, #24]
 80022b0:	f013 0f20 	tst.w	r3, #32
 80022b4:	d13c      	bne.n	8002330 <I2C_IsErrorOccurred+0xa8>
 80022b6:	2c00      	cmp	r4, #0
 80022b8:	d13a      	bne.n	8002330 <I2C_IsErrorOccurred+0xa8>
      if (Timeout != HAL_MAX_DELAY)
 80022ba:	463c      	mov	r4, r7
 80022bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80022c0:	d0f5      	beq.n	80022ae <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7ff fdc7 	bl	8001e54 <HAL_GetTick>
 80022c6:	4654      	mov	r4, sl
 80022c8:	eba0 0008 	sub.w	r0, r0, r8
 80022cc:	42b0      	cmp	r0, r6
 80022ce:	d801      	bhi.n	80022d4 <I2C_IsErrorOccurred+0x4c>
 80022d0:	2e00      	cmp	r6, #0
 80022d2:	d1eb      	bne.n	80022ac <I2C_IsErrorOccurred+0x24>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022d4:	682a      	ldr	r2, [r5, #0]
 80022d6:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80022d8:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 80022dc:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022de:	6991      	ldr	r1, [r2, #24]
 80022e0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80022e4:	d004      	beq.n	80022f0 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80022e6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80022ea:	d101      	bne.n	80022f0 <I2C_IsErrorOccurred+0x68>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d117      	bne.n	8002320 <I2C_IsErrorOccurred+0x98>
{
 80022f0:	464c      	mov	r4, r9
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f013 0f20 	tst.w	r3, #32
 80022fa:	d1d7      	bne.n	80022ac <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022fc:	f7ff fdaa 	bl	8001e54 <HAL_GetTick>
 8002300:	eba0 0008 	sub.w	r0, r0, r8
 8002304:	2819      	cmp	r0, #25
 8002306:	d9f4      	bls.n	80022f2 <I2C_IsErrorOccurred+0x6a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800230a:	f043 0320 	orr.w	r3, r3, #32
 800230e:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002310:	f885 b041 	strb.w	fp, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	f885 9042 	strb.w	r9, [r5, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8002318:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
              status = HAL_ERROR;
 800231c:	2401      	movs	r4, #1
 800231e:	e7e8      	b.n	80022f2 <I2C_IsErrorOccurred+0x6a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002320:	6853      	ldr	r3, [r2, #4]
 8002322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002326:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8002328:	f7ff fd94 	bl	8001e54 <HAL_GetTick>
 800232c:	4680      	mov	r8, r0
 800232e:	e7df      	b.n	80022f0 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8002330:	2c00      	cmp	r4, #0
 8002332:	d13f      	bne.n	80023b4 <I2C_IsErrorOccurred+0x12c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002334:	2320      	movs	r3, #32
 8002336:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002338:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800233a:	2401      	movs	r4, #1
 800233c:	e000      	b.n	8002340 <I2C_IsErrorOccurred+0xb8>
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2400      	movs	r4, #0
  itflag = hi2c->Instance->ISR;
 8002340:	682a      	ldr	r2, [r5, #0]
 8002342:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002344:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002348:	d005      	beq.n	8002356 <I2C_IsErrorOccurred+0xce>
    error_code |= HAL_I2C_ERROR_BERR;
 800234a:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800234e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002352:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8002354:	2401      	movs	r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002356:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800235a:	d02d      	beq.n	80023b8 <I2C_IsErrorOccurred+0x130>
    error_code |= HAL_I2C_ERROR_OVR;
 800235c:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002360:	682a      	ldr	r2, [r5, #0]
 8002362:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002366:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002368:	f413 7f00 	tst.w	r3, #512	; 0x200
 800236c:	d005      	beq.n	800237a <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 800236e:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002372:	682b      	ldr	r3, [r5, #0]
 8002374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002378:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800237a:	4628      	mov	r0, r5
 800237c:	f7ff ff56 	bl	800222c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002380:	682a      	ldr	r2, [r5, #0]
 8002382:	6853      	ldr	r3, [r2, #4]
 8002384:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002388:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800238c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002396:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002398:	431f      	orrs	r7, r3
 800239a:	646f      	str	r7, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800239c:	2320      	movs	r3, #32
 800239e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80023a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80023ac:	2401      	movs	r4, #1
}
 80023ae:	4620      	mov	r0, r4
 80023b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80023b4:	2704      	movs	r7, #4
 80023b6:	e7c3      	b.n	8002340 <I2C_IsErrorOccurred+0xb8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023b8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80023bc:	d1d7      	bne.n	800236e <I2C_IsErrorOccurred+0xe6>
  if (status != HAL_OK)
 80023be:	2c00      	cmp	r4, #0
 80023c0:	d0f5      	beq.n	80023ae <I2C_IsErrorOccurred+0x126>
 80023c2:	e7da      	b.n	800237a <I2C_IsErrorOccurred+0xf2>

080023c4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	4604      	mov	r4, r0
 80023c8:	460d      	mov	r5, r1
 80023ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f013 0f02 	tst.w	r3, #2
 80023d4:	d11d      	bne.n	8002412 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d6:	4632      	mov	r2, r6
 80023d8:	4629      	mov	r1, r5
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff ff54 	bl	8002288 <I2C_IsErrorOccurred>
 80023e0:	b9c8      	cbnz	r0, 8002416 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80023e6:	d0f1      	beq.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e8:	f7ff fd34 	bl	8001e54 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	42a8      	cmp	r0, r5
 80023f0:	d801      	bhi.n	80023f6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80023f2:	2d00      	cmp	r5, #0
 80023f4:	d1ea      	bne.n	80023cc <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	2320      	movs	r3, #32
 8002400:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	2300      	movs	r3, #0
 8002406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800240a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
 8002410:	e000      	b.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8002412:	2000      	movs	r0, #0
}
 8002414:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002416:	2001      	movs	r0, #1
 8002418:	e7fc      	b.n	8002414 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

0800241a <I2C_WaitOnFlagUntilTimeout>:
{
 800241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241e:	4680      	mov	r8, r0
 8002420:	460f      	mov	r7, r1
 8002422:	4616      	mov	r6, r2
 8002424:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002426:	f8d8 3000 	ldr.w	r3, [r8]
 800242a:	699c      	ldr	r4, [r3, #24]
 800242c:	ea37 0204 	bics.w	r2, r7, r4
 8002430:	bf0c      	ite	eq
 8002432:	2401      	moveq	r4, #1
 8002434:	2400      	movne	r4, #0
 8002436:	42b4      	cmp	r4, r6
 8002438:	d11a      	bne.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800243a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800243e:	d0f4      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002440:	f7ff fd08 	bl	8001e54 <HAL_GetTick>
 8002444:	9b06      	ldr	r3, [sp, #24]
 8002446:	1ac0      	subs	r0, r0, r3
 8002448:	42a8      	cmp	r0, r5
 800244a:	d801      	bhi.n	8002450 <I2C_WaitOnFlagUntilTimeout+0x36>
 800244c:	2d00      	cmp	r5, #0
 800244e:	d1ea      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800245c:	2320      	movs	r3, #32
 800245e:	f888 3041 	strb.w	r3, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002468:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 800246c:	2001      	movs	r0, #1
 800246e:	e000      	b.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x58>
  return HAL_OK;
 8002470:	2000      	movs	r0, #0
}
 8002472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002476 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002476:	b570      	push	{r4, r5, r6, lr}
 8002478:	4605      	mov	r5, r0
 800247a:	460c      	mov	r4, r1
 800247c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800247e:	682b      	ldr	r3, [r5, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f013 0f20 	tst.w	r3, #32
 8002486:	d11a      	bne.n	80024be <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002488:	4632      	mov	r2, r6
 800248a:	4621      	mov	r1, r4
 800248c:	4628      	mov	r0, r5
 800248e:	f7ff fefb 	bl	8002288 <I2C_IsErrorOccurred>
 8002492:	b9b0      	cbnz	r0, 80024c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff fcde 	bl	8001e54 <HAL_GetTick>
 8002498:	1b80      	subs	r0, r0, r6
 800249a:	42a0      	cmp	r0, r4
 800249c:	d801      	bhi.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 800249e:	2c00      	cmp	r4, #0
 80024a0:	d1ed      	bne.n	800247e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80024a4:	f043 0320 	orr.w	r3, r3, #32
 80024a8:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	2320      	movs	r3, #32
 80024ac:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80024b6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
}
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80024be:	2000      	movs	r0, #0
 80024c0:	e7fc      	b.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80024c2:	2001      	movs	r0, #1
 80024c4:	e7fa      	b.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080024c6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80024c6:	b570      	push	{r4, r5, r6, lr}
 80024c8:	4604      	mov	r4, r0
 80024ca:	460d      	mov	r5, r1
 80024cc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f013 0f04 	tst.w	r3, #4
 80024d6:	d149      	bne.n	800256c <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d8:	4632      	mov	r2, r6
 80024da:	4629      	mov	r1, r5
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff fed3 	bl	8002288 <I2C_IsErrorOccurred>
 80024e2:	4601      	mov	r1, r0
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d143      	bne.n	8002570 <I2C_WaitOnRXNEFlagUntilTimeout+0xaa>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	f012 0f20 	tst.w	r2, #32
 80024f0:	d113      	bne.n	800251a <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f2:	f7ff fcaf 	bl	8001e54 <HAL_GetTick>
 80024f6:	1b80      	subs	r0, r0, r6
 80024f8:	42a8      	cmp	r0, r5
 80024fa:	d801      	bhi.n	8002500 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	d1e6      	bne.n	80024ce <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002502:	f043 0320 	orr.w	r3, r3, #32
 8002506:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002508:	2320      	movs	r3, #32
 800250a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002514:	2101      	movs	r1, #1
}
 8002516:	4608      	mov	r0, r1
 8002518:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	f012 0f04 	tst.w	r2, #4
 8002520:	d002      	beq.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002522:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002524:	2a00      	cmp	r2, #0
 8002526:	d1f6      	bne.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	f012 0f10 	tst.w	r2, #16
 800252e:	d01a      	beq.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002530:	2210      	movs	r2, #16
 8002532:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002534:	2304      	movs	r3, #4
 8002536:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	2220      	movs	r2, #32
 800253c:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	684b      	ldr	r3, [r1, #4]
 8002542:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002546:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800254a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8002554:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	2300      	movs	r3, #0
 800255a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800255e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002562:	2101      	movs	r1, #1
 8002564:	e7d7      	b.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002566:	2300      	movs	r3, #0
 8002568:	6463      	str	r3, [r4, #68]	; 0x44
 800256a:	e7e5      	b.n	8002538 <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
  return HAL_OK;
 800256c:	2100      	movs	r1, #0
 800256e:	e7d2      	b.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
      return HAL_ERROR;
 8002570:	2101      	movs	r1, #1
 8002572:	e7d0      	b.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>

08002574 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002574:	2800      	cmp	r0, #0
 8002576:	d053      	beq.n	8002620 <HAL_I2C_Init+0xac>
{
 8002578:	b510      	push	{r4, lr}
 800257a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002580:	2b00      	cmp	r3, #0
 8002582:	d043      	beq.n	800260c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002584:	2324      	movs	r3, #36	; 0x24
 8002586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	6813      	ldr	r3, [r2, #0]
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002594:	6822      	ldr	r2, [r4, #0]
 8002596:	6863      	ldr	r3, [r4, #4]
 8002598:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800259c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025a6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025a8:	68e3      	ldr	r3, [r4, #12]
 80025aa:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	68a3      	ldr	r3, [r4, #8]
 80025b0:	bf0c      	ite	eq
 80025b2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025b6:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80025ba:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025bc:	68e3      	ldr	r3, [r4, #12]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d029      	beq.n	8002616 <HAL_I2C_Init+0xa2>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	6851      	ldr	r1, [r2, #4]
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_I2C_Init+0xb0>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	68d3      	ldr	r3, [r2, #12]
 80025d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025d4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d6:	6822      	ldr	r2, [r4, #0]
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	6961      	ldr	r1, [r4, #20]
 80025dc:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025de:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025e4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e6:	6822      	ldr	r2, [r4, #0]
 80025e8:	69e3      	ldr	r3, [r4, #28]
 80025ea:	6a21      	ldr	r1, [r4, #32]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80025f0:	6822      	ldr	r2, [r4, #0]
 80025f2:	6813      	ldr	r3, [r2, #0]
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	2000      	movs	r0, #0
 80025fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	2320      	movs	r3, #32
 8002600:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002604:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800260a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800260c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002610:	f7ff fa68 	bl	8001ae4 <HAL_I2C_MspInit>
 8002614:	e7b6      	b.n	8002584 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	e7d0      	b.n	80025c2 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
}
 8002622:	4770      	bx	lr
 8002624:	02008000 	.word	0x02008000

08002628 <HAL_I2C_Master_Transmit>:
{
 8002628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	460f      	mov	r7, r1
 8002630:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8002636:	b2c9      	uxtb	r1, r1
 8002638:	2920      	cmp	r1, #32
 800263a:	f040 80a8 	bne.w	800278e <HAL_I2C_Master_Transmit+0x166>
 800263e:	4604      	mov	r4, r0
 8002640:	4690      	mov	r8, r2
 8002642:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8002644:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002648:	2b01      	cmp	r3, #1
 800264a:	f000 80a4 	beq.w	8002796 <HAL_I2C_Master_Transmit+0x16e>
 800264e:	f04f 0a01 	mov.w	sl, #1
 8002652:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002656:	f7ff fbfd 	bl	8001e54 <HAL_GetTick>
 800265a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800265c:	9000      	str	r0, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	4652      	mov	r2, sl
 8002662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fed7 	bl	800241a <I2C_WaitOnFlagUntilTimeout>
 800266c:	2800      	cmp	r0, #0
 800266e:	f040 8094 	bne.w	800279a <HAL_I2C_Master_Transmit+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002672:	2321      	movs	r3, #33	; 0x21
 8002674:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002678:	2310      	movs	r3, #16
 800267a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002682:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002686:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800268a:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800268c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2bff      	cmp	r3, #255	; 0xff
 8002692:	d947      	bls.n	8002724 <HAL_I2C_Master_Transmit+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002698:	4b44      	ldr	r3, [pc, #272]	; (80027ac <HAL_I2C_Master_Transmit+0x184>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a0:	4639      	mov	r1, r7
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff fdd3 	bl	800224e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026a8:	f04f 0800 	mov.w	r8, #0
 80026ac:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b0:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 80026b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d04c      	beq.n	8002756 <HAL_I2C_Master_Transmit+0x12e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026bc:	462a      	mov	r2, r5
 80026be:	4631      	mov	r1, r6
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff fe7f 	bl	80023c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d169      	bne.n	800279e <HAL_I2C_Master_Transmit+0x176>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026ea:	b292      	uxth	r2, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e1      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x8c>
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d0df      	beq.n	80026b4 <HAL_I2C_Master_Transmit+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	9500      	str	r5, [sp, #0]
 80026f6:	4633      	mov	r3, r6
 80026f8:	4642      	mov	r2, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff fe8c 	bl	800241a <I2C_WaitOnFlagUntilTimeout>
 8002702:	2800      	cmp	r0, #0
 8002704:	d14d      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002706:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2bff      	cmp	r3, #255	; 0xff
 800270c:	d917      	bls.n	800273e <HAL_I2C_Master_Transmit+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800270e:	22ff      	movs	r2, #255	; 0xff
 8002710:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002712:	f8cd 8000 	str.w	r8, [sp]
 8002716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800271a:	4639      	mov	r1, r7
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff fd96 	bl	800224e <I2C_TransferConfig>
 8002722:	e7c7      	b.n	80026b4 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8002724:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002726:	b292      	uxth	r2, r2
 8002728:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_I2C_Master_Transmit+0x184>)
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4639      	mov	r1, r7
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fd89 	bl	800224e <I2C_TransferConfig>
 800273c:	e7b4      	b.n	80026a8 <HAL_I2C_Master_Transmit+0x80>
          hi2c->XferSize = hi2c->XferCount;
 800273e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002740:	b292      	uxth	r2, r2
 8002742:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002744:	f8cd 8000 	str.w	r8, [sp]
 8002748:	4653      	mov	r3, sl
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4639      	mov	r1, r7
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff fd7d 	bl	800224e <I2C_TransferConfig>
 8002754:	e7ae      	b.n	80026b4 <HAL_I2C_Master_Transmit+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	462a      	mov	r2, r5
 8002758:	4631      	mov	r1, r6
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff fe8b 	bl	8002476 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002760:	bb08      	cbnz	r0, 80027a6 <HAL_I2C_Master_Transmit+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	2220      	movs	r2, #32
 8002766:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002768:	6821      	ldr	r1, [r4, #0]
 800276a:	684b      	ldr	r3, [r1, #4]
 800276c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002770:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002774:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002782:	2300      	movs	r3, #0
 8002784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002788:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800278c:	e000      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 800278e:	2002      	movs	r0, #2
}
 8002790:	b002      	add	sp, #8
 8002792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8002796:	2002      	movs	r0, #2
 8002798:	e7fa      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
 800279c:	e7f8      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
 80027a0:	e7f6      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
 80027a4:	e7f4      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 80027a6:	2001      	movs	r0, #1
 80027a8:	e7f2      	b.n	8002790 <HAL_I2C_Master_Transmit+0x168>
 80027aa:	bf00      	nop
 80027ac:	80002000 	.word	0x80002000

080027b0 <HAL_I2C_Master_Receive>:
{
 80027b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	460f      	mov	r7, r1
 80027b8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80027be:	b2c9      	uxtb	r1, r1
 80027c0:	2920      	cmp	r1, #32
 80027c2:	f040 80a8 	bne.w	8002916 <HAL_I2C_Master_Receive+0x166>
 80027c6:	4604      	mov	r4, r0
 80027c8:	4690      	mov	r8, r2
 80027ca:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80027cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f000 80a4 	beq.w	800291e <HAL_I2C_Master_Receive+0x16e>
 80027d6:	f04f 0a01 	mov.w	sl, #1
 80027da:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80027de:	f7ff fb39 	bl	8001e54 <HAL_GetTick>
 80027e2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e4:	9000      	str	r0, [sp, #0]
 80027e6:	2319      	movs	r3, #25
 80027e8:	4652      	mov	r2, sl
 80027ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fe13 	bl	800241a <I2C_WaitOnFlagUntilTimeout>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	f040 8094 	bne.w	8002922 <HAL_I2C_Master_Receive+0x172>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027fa:	2322      	movs	r3, #34	; 0x22
 80027fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002800:	2310      	movs	r3, #16
 8002802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002806:	2300      	movs	r3, #0
 8002808:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800280a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800280e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002812:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002814:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2bff      	cmp	r3, #255	; 0xff
 800281a:	d947      	bls.n	80028ac <HAL_I2C_Master_Receive+0xfc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002820:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_I2C_Master_Receive+0x184>)
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002828:	4639      	mov	r1, r7
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fd0f 	bl	800224e <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002830:	f04f 0800 	mov.w	r8, #0
 8002834:	f04f 0980 	mov.w	r9, #128	; 0x80
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002838:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    while (hi2c->XferCount > 0U)
 800283c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d04c      	beq.n	80028de <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	462a      	mov	r2, r5
 8002846:	4631      	mov	r1, r6
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fe3c 	bl	80024c6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284e:	2800      	cmp	r0, #0
 8002850:	d169      	bne.n	8002926 <HAL_I2C_Master_Receive+0x176>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002858:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800285a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800285c:	3301      	adds	r3, #1
 800285e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002860:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29b      	uxth	r3, r3
 8002866:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002868:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800286a:	3a01      	subs	r2, #1
 800286c:	b292      	uxth	r2, r2
 800286e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002870:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002872:	b292      	uxth	r2, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e1      	bne.n	800283c <HAL_I2C_Master_Receive+0x8c>
 8002878:	2a00      	cmp	r2, #0
 800287a:	d0df      	beq.n	800283c <HAL_I2C_Master_Receive+0x8c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800287c:	9500      	str	r5, [sp, #0]
 800287e:	4633      	mov	r3, r6
 8002880:	4642      	mov	r2, r8
 8002882:	4649      	mov	r1, r9
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff fdc8 	bl	800241a <I2C_WaitOnFlagUntilTimeout>
 800288a:	2800      	cmp	r0, #0
 800288c:	d14d      	bne.n	800292a <HAL_I2C_Master_Receive+0x17a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	; 0xff
 8002894:	d917      	bls.n	80028c6 <HAL_I2C_Master_Receive+0x116>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	22ff      	movs	r2, #255	; 0xff
 8002898:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800289a:	f8cd 8000 	str.w	r8, [sp]
 800289e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a2:	4639      	mov	r1, r7
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fcd2 	bl	800224e <I2C_TransferConfig>
 80028aa:	e7c7      	b.n	800283c <HAL_I2C_Master_Receive+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 80028ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028ae:	b292      	uxth	r2, r2
 80028b0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_I2C_Master_Receive+0x184>)
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4639      	mov	r1, r7
 80028be:	4620      	mov	r0, r4
 80028c0:	f7ff fcc5 	bl	800224e <I2C_TransferConfig>
 80028c4:	e7b4      	b.n	8002830 <HAL_I2C_Master_Receive+0x80>
          hi2c->XferSize = hi2c->XferCount;
 80028c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028c8:	b292      	uxth	r2, r2
 80028ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028cc:	f8cd 8000 	str.w	r8, [sp]
 80028d0:	4653      	mov	r3, sl
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4639      	mov	r1, r7
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff fcb9 	bl	800224e <I2C_TransferConfig>
 80028dc:	e7ae      	b.n	800283c <HAL_I2C_Master_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	462a      	mov	r2, r5
 80028e0:	4631      	mov	r1, r6
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7ff fdc7 	bl	8002476 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e8:	bb08      	cbnz	r0, 800292e <HAL_I2C_Master_Receive+0x17e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80028f0:	6821      	ldr	r1, [r4, #0]
 80028f2:	684b      	ldr	r3, [r1, #4]
 80028f4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80028f8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80028fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002906:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002910:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8002914:	e000      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 8002916:	2002      	movs	r0, #2
}
 8002918:	b002      	add	sp, #8
 800291a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800291e:	2002      	movs	r0, #2
 8002920:	e7fa      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	e7f8      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 8002926:	2001      	movs	r0, #1
 8002928:	e7f6      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 800292a:	2001      	movs	r0, #1
 800292c:	e7f4      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 800292e:	2001      	movs	r0, #1
 8002930:	e7f2      	b.n	8002918 <HAL_I2C_Master_Receive+0x168>
 8002932:	bf00      	nop
 8002934:	80002400 	.word	0x80002400

08002938 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002938:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	d124      	bne.n	800298c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002942:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002946:	2b01      	cmp	r3, #1
 8002948:	d022      	beq.n	8002990 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800294a:	2301      	movs	r3, #1
 800294c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	2324      	movs	r3, #36	; 0x24
 8002952:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002956:	6802      	ldr	r2, [r0, #0]
 8002958:	6813      	ldr	r3, [r2, #0]
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002960:	6802      	ldr	r2, [r0, #0]
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002968:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800296a:	6802      	ldr	r2, [r0, #0]
 800296c:	6813      	ldr	r3, [r2, #0]
 800296e:	4319      	orrs	r1, r3
 8002970:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800297c:	2320      	movs	r3, #32
 800297e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002988:	4618      	mov	r0, r3
 800298a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800298c:	2002      	movs	r0, #2
 800298e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002990:	2002      	movs	r0, #2
  }
}
 8002992:	4770      	bx	lr

08002994 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002994:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b20      	cmp	r3, #32
 800299c:	d122      	bne.n	80029e4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d020      	beq.n	80029e8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80029a6:	2301      	movs	r3, #1
 80029a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	2324      	movs	r3, #36	; 0x24
 80029ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b2:	6802      	ldr	r2, [r0, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029bc:	6802      	ldr	r2, [r0, #0]
 80029be:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029c8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ca:	6802      	ldr	r2, [r0, #0]
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	2320      	movs	r3, #32
 80029d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80029e0:	4618      	mov	r0, r3
 80029e2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2002      	movs	r0, #2
 80029e6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80029e8:	2002      	movs	r0, #2
  }
}
 80029ea:	4770      	bx	lr

080029ec <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ec:	4a02      	ldr	r2, [pc, #8]	; (80029f8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]
}
 80029f6:	4770      	bx	lr
 80029f8:	40007000 	.word	0x40007000

080029fc <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	2800      	cmp	r0, #0
 80029fe:	f000 8202 	beq.w	8002e06 <HAL_RCC_OscConfig+0x40a>
{
 8002a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	f013 0f01 	tst.w	r3, #1
 8002a10:	d029      	beq.n	8002a66 <HAL_RCC_OscConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a12:	4ba8      	ldr	r3, [pc, #672]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d01a      	beq.n	8002a54 <HAL_RCC_OscConfig+0x58>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4ba5      	ldr	r3, [pc, #660]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d00f      	beq.n	8002a4a <HAL_RCC_OscConfig+0x4e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	6863      	ldr	r3, [r4, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d040      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xb8>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d154      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xe4>
 8002a36:	4b9f      	ldr	r3, [pc, #636]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	e039      	b.n	8002abe <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4a:	4b9a      	ldr	r3, [pc, #616]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002a52:	d0ea      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4b97      	ldr	r3, [pc, #604]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_OscConfig+0x6a>
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 81d2 	beq.w	8002e0a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	f013 0f02 	tst.w	r3, #2
 8002a6c:	d074      	beq.n	8002b58 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6e:	4b91      	ldr	r3, [pc, #580]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f013 0f0c 	tst.w	r3, #12
 8002a76:	d05e      	beq.n	8002b36 <HAL_RCC_OscConfig+0x13a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a78:	4b8e      	ldr	r3, [pc, #568]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d053      	beq.n	8002b2c <HAL_RCC_OscConfig+0x130>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a84:	68e3      	ldr	r3, [r4, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8089 	beq.w	8002b9e <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4a89      	ldr	r2, [pc, #548]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7ff f9dd 	bl	8001e54 <HAL_GetTick>
 8002a9a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	4e85      	ldr	r6, [pc, #532]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002a9e:	6833      	ldr	r3, [r6, #0]
 8002aa0:	f013 0f02 	tst.w	r3, #2
 8002aa4:	d172      	bne.n	8002b8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f9d5 	bl	8001e54 <HAL_GetTick>
 8002aaa:	1b40      	subs	r0, r0, r5
 8002aac:	2802      	cmp	r0, #2
 8002aae:	d9f6      	bls.n	8002a9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	e1af      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab4:	4a7f      	ldr	r2, [pc, #508]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002abe:	6863      	ldr	r3, [r4, #4]
 8002ac0:	b32b      	cbz	r3, 8002b0e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f9c7 	bl	8001e54 <HAL_GetTick>
 8002ac6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac8:	4e7a      	ldr	r6, [pc, #488]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002aca:	6833      	ldr	r3, [r6, #0]
 8002acc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ad0:	d1c9      	bne.n	8002a66 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad2:	f7ff f9bf 	bl	8001e54 <HAL_GetTick>
 8002ad6:	1b40      	subs	r0, r0, r5
 8002ad8:	2864      	cmp	r0, #100	; 0x64
 8002ada:	d9f6      	bls.n	8002aca <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8002adc:	2003      	movs	r0, #3
 8002ade:	e199      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_OscConfig+0xfe>
 8002ae6:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e7e1      	b.n	8002abe <HAL_RCC_OscConfig+0xc2>
 8002afa:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e7d7      	b.n	8002abe <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002b0e:	f7ff f9a1 	bl	8001e54 <HAL_GetTick>
 8002b12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b14:	4e67      	ldr	r6, [pc, #412]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b16:	6833      	ldr	r3, [r6, #0]
 8002b18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b1c:	d0a3      	beq.n	8002a66 <HAL_RCC_OscConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7ff f999 	bl	8001e54 <HAL_GetTick>
 8002b22:	1b40      	subs	r0, r0, r5
 8002b24:	2864      	cmp	r0, #100	; 0x64
 8002b26:	d9f6      	bls.n	8002b16 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 8002b28:	2003      	movs	r0, #3
 8002b2a:	e173      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002b34:	d1a6      	bne.n	8002a84 <HAL_RCC_OscConfig+0x88>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f013 0f02 	tst.w	r3, #2
 8002b3e:	d003      	beq.n	8002b48 <HAL_RCC_OscConfig+0x14c>
 8002b40:	68e3      	ldr	r3, [r4, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8163 	bne.w	8002e0e <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	6921      	ldr	r1, [r4, #16]
 8002b4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b56:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f013 0f08 	tst.w	r3, #8
 8002b5e:	d046      	beq.n	8002bee <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b60:	6963      	ldr	r3, [r4, #20]
 8002b62:	b383      	cbz	r3, 8002bc6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b64:	4a53      	ldr	r2, [pc, #332]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b66:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f971 	bl	8001e54 <HAL_GetTick>
 8002b72:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b74:	4e4f      	ldr	r6, [pc, #316]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b76:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002b78:	f013 0f02 	tst.w	r3, #2
 8002b7c:	d137      	bne.n	8002bee <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7ff f969 	bl	8001e54 <HAL_GetTick>
 8002b82:	1b40      	subs	r0, r0, r5
 8002b84:	2802      	cmp	r0, #2
 8002b86:	d9f6      	bls.n	8002b76 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002b88:	2003      	movs	r0, #3
 8002b8a:	e143      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4a49      	ldr	r2, [pc, #292]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	6921      	ldr	r1, [r4, #16]
 8002b92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	e7dc      	b.n	8002b58 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002ba0:	6813      	ldr	r3, [r2, #0]
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f954 	bl	8001e54 <HAL_GetTick>
 8002bac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	4e41      	ldr	r6, [pc, #260]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	6833      	ldr	r3, [r6, #0]
 8002bb2:	f013 0f02 	tst.w	r3, #2
 8002bb6:	d0cf      	beq.n	8002b58 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff f94c 	bl	8001e54 <HAL_GetTick>
 8002bbc:	1b40      	subs	r0, r0, r5
 8002bbe:	2802      	cmp	r0, #2
 8002bc0:	d9f6      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
 8002bc4:	e126      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc6:	4a3b      	ldr	r2, [pc, #236]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002bc8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7ff f940 	bl	8001e54 <HAL_GetTick>
 8002bd4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd6:	4e37      	ldr	r6, [pc, #220]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002bd8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002bda:	f013 0f02 	tst.w	r3, #2
 8002bde:	d006      	beq.n	8002bee <HAL_RCC_OscConfig+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be0:	f7ff f938 	bl	8001e54 <HAL_GetTick>
 8002be4:	1b40      	subs	r0, r0, r5
 8002be6:	2802      	cmp	r0, #2
 8002be8:	d9f6      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8002bea:	2003      	movs	r0, #3
 8002bec:	e112      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	f013 0f04 	tst.w	r3, #4
 8002bf4:	d07e      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x21c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c14:	2501      	movs	r5, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x21e>
  FlagStatus pwrclkchanged = RESET;
 8002c18:	2500      	movs	r5, #0
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x2bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c22:	d00e      	beq.n	8002c42 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	68a3      	ldr	r3, [r4, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d01f      	beq.n	8002c6a <HAL_RCC_OscConfig+0x26e>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d135      	bne.n	8002c9a <HAL_RCC_OscConfig+0x29e>
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	671a      	str	r2, [r3, #112]	; 0x70
 8002c38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	671a      	str	r2, [r3, #112]	; 0x70
 8002c40:	e018      	b.n	8002c74 <HAL_RCC_OscConfig+0x278>
      PWR->CR1 |= PWR_CR1_DBP;
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_RCC_OscConfig+0x2bc>)
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c4c:	f7ff f902 	bl	8001e54 <HAL_GetTick>
 8002c50:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	4f19      	ldr	r7, [pc, #100]	; (8002cb8 <HAL_RCC_OscConfig+0x2bc>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c5a:	d1e3      	bne.n	8002c24 <HAL_RCC_OscConfig+0x228>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5c:	f7ff f8fa 	bl	8001e54 <HAL_GetTick>
 8002c60:	1b80      	subs	r0, r0, r6
 8002c62:	2864      	cmp	r0, #100	; 0x64
 8002c64:	d9f6      	bls.n	8002c54 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002c66:	2003      	movs	r0, #3
 8002c68:	e0d4      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002c6c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c74:	68a3      	ldr	r3, [r4, #8]
 8002c76:	b35b      	cbz	r3, 8002cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff f8ec 	bl	8001e54 <HAL_GetTick>
 8002c7c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4f0d      	ldr	r7, [pc, #52]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c86:	f013 0f02 	tst.w	r3, #2
 8002c8a:	d132      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f8e2 	bl	8001e54 <HAL_GetTick>
 8002c90:	1b80      	subs	r0, r0, r6
 8002c92:	4540      	cmp	r0, r8
 8002c94:	d9f6      	bls.n	8002c84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
 8002c98:	e0bc      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d00e      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2c0>
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_OscConfig+0x2b8>)
 8002ca0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ca8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002caa:	f022 0204 	bic.w	r2, r2, #4
 8002cae:	671a      	str	r2, [r3, #112]	; 0x70
 8002cb0:	e7e0      	b.n	8002c74 <HAL_RCC_OscConfig+0x278>
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002cbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cc0:	f042 0204 	orr.w	r2, r2, #4
 8002cc4:	671a      	str	r2, [r3, #112]	; 0x70
 8002cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	671a      	str	r2, [r3, #112]	; 0x70
 8002cce:	e7d1      	b.n	8002c74 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f8c0 	bl	8001e54 <HAL_GetTick>
 8002cd4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4f56      	ldr	r7, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cde:	f013 0f02 	tst.w	r3, #2
 8002ce2:	d006      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce4:	f7ff f8b6 	bl	8001e54 <HAL_GetTick>
 8002ce8:	1b80      	subs	r0, r0, r6
 8002cea:	4540      	cmp	r0, r8
 8002cec:	d9f6      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 8002cee:	2003      	movs	r0, #3
 8002cf0:	e090      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf2:	b9fd      	cbnz	r5, 8002d34 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	69a3      	ldr	r3, [r4, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 808b 	beq.w	8002e12 <HAL_RCC_OscConfig+0x416>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	f002 020c 	and.w	r2, r2, #12
 8002d04:	2a08      	cmp	r2, #8
 8002d06:	d058      	beq.n	8002dba <HAL_RCC_OscConfig+0x3be>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d019      	beq.n	8002d40 <HAL_RCC_OscConfig+0x344>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4a48      	ldr	r2, [pc, #288]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d0e:	6813      	ldr	r3, [r2, #0]
 8002d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d16:	f7ff f89d 	bl	8001e54 <HAL_GetTick>
 8002d1a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1c:	4d44      	ldr	r5, [pc, #272]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d24:	d047      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d26:	f7ff f895 	bl	8001e54 <HAL_GetTick>
 8002d2a:	1b00      	subs	r0, r0, r4
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d9f6      	bls.n	8002d1e <HAL_RCC_OscConfig+0x322>
          {
            return HAL_TIMEOUT;
 8002d30:	2003      	movs	r0, #3
 8002d32:	e06f      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	e7d9      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4a3b      	ldr	r2, [pc, #236]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d42:	6813      	ldr	r3, [r2, #0]
 8002d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d48:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d4a:	f7ff f883 	bl	8001e54 <HAL_GetTick>
 8002d4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	4e37      	ldr	r6, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d52:	6833      	ldr	r3, [r6, #0]
 8002d54:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d58:	d006      	beq.n	8002d68 <HAL_RCC_OscConfig+0x36c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7ff f87b 	bl	8001e54 <HAL_GetTick>
 8002d5e:	1b40      	subs	r0, r0, r5
 8002d60:	2802      	cmp	r0, #2
 8002d62:	d9f6      	bls.n	8002d52 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8002d64:	2003      	movs	r0, #3
 8002d66:	e055      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	69e3      	ldr	r3, [r4, #28]
 8002d70:	6a21      	ldr	r1, [r4, #32]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d88:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d8a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d94:	f7ff f85e 	bl	8001e54 <HAL_GetTick>
 8002d98:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4d25      	ldr	r5, [pc, #148]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002d9c:	682b      	ldr	r3, [r5, #0]
 8002d9e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3b6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff f856 	bl	8001e54 <HAL_GetTick>
 8002da8:	1b00      	subs	r0, r0, r4
 8002daa:	2802      	cmp	r0, #2
 8002dac:	d9f6      	bls.n	8002d9c <HAL_RCC_OscConfig+0x3a0>
            return HAL_TIMEOUT;
 8002dae:	2003      	movs	r0, #3
 8002db0:	e030      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002db2:	2000      	movs	r0, #0
 8002db4:	e02e      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002db6:	2000      	movs	r0, #0
 8002db8:	e02c      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
      pll_config = RCC->PLLCFGR;
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_RCC_OscConfig+0x434>)
 8002dbc:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d02b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	69e1      	ldr	r1, [r4, #28]
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d128      	bne.n	8002e1e <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dcc:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	6a21      	ldr	r1, [r4, #32]
 8002dd2:	428b      	cmp	r3, r1
 8002dd4:	d125      	bne.n	8002e22 <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ddc:	4013      	ands	r3, r2
 8002dde:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002de2:	d120      	bne.n	8002e26 <HAL_RCC_OscConfig+0x42a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002de4:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002de8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dee:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002df2:	d11a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x42e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002df6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dfa:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
  return HAL_OK;
 8002dfe:	bf14      	ite	ne
 8002e00:	2001      	movne	r0, #1
 8002e02:	2000      	moveq	r0, #0
 8002e04:	e006      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
    return HAL_ERROR;
 8002e06:	2001      	movs	r0, #1
}
 8002e08:	4770      	bx	lr
        return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	e002      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
        return HAL_ERROR;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	e000      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
  return HAL_OK;
 8002e12:	2000      	movs	r0, #0
}
 8002e14:	b002      	add	sp, #8
 8002e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	e7fa      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e7f8      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7f6      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002e26:	2001      	movs	r0, #1
 8002e28:	e7f4      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	e7f2      	b.n	8002e14 <HAL_RCC_OscConfig+0x418>
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d053      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0xb6>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d153      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002e54:	d028      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002e5e:	0158      	lsls	r0, r3, #5
 8002e60:	2100      	movs	r1, #0
 8002e62:	1ac0      	subs	r0, r0, r3
 8002e64:	f161 0100 	sbc.w	r1, r1, #0
 8002e68:	018e      	lsls	r6, r1, #6
 8002e6a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002e6e:	0187      	lsls	r7, r0, #6
 8002e70:	1a3c      	subs	r4, r7, r0
 8002e72:	eb66 0501 	sbc.w	r5, r6, r1
 8002e76:	00e9      	lsls	r1, r5, #3
 8002e78:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002e7c:	00e0      	lsls	r0, r4, #3
 8002e7e:	18c0      	adds	r0, r0, r3
 8002e80:	f141 0100 	adc.w	r1, r1, #0
 8002e84:	024b      	lsls	r3, r1, #9
 8002e86:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002e8a:	0244      	lsls	r4, r0, #9
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	f7fd fef9 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002ea2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002ea6:	e023      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002eb0:	015c      	lsls	r4, r3, #5
 8002eb2:	2500      	movs	r5, #0
 8002eb4:	1ae4      	subs	r4, r4, r3
 8002eb6:	f165 0500 	sbc.w	r5, r5, #0
 8002eba:	01ae      	lsls	r6, r5, #6
 8002ebc:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002ec0:	01a7      	lsls	r7, r4, #6
 8002ec2:	1b38      	subs	r0, r7, r4
 8002ec4:	eb66 0105 	sbc.w	r1, r6, r5
 8002ec8:	00cc      	lsls	r4, r1, #3
 8002eca:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002ece:	00c5      	lsls	r5, r0, #3
 8002ed0:	18e8      	adds	r0, r5, r3
 8002ed2:	f144 0100 	adc.w	r1, r4, #0
 8002ed6:	028b      	lsls	r3, r1, #10
 8002ed8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002edc:	0284      	lsls	r4, r0, #10
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f7fd fed0 	bl	8000c88 <__aeabi_uldivmod>
 8002ee8:	e7d5      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x62>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eea:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eec:	e000      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0xbc>
      sysclockfreq = HSI_VALUE;
 8002eee:	4803      	ldr	r0, [pc, #12]	; (8002efc <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	007a1200 	.word	0x007a1200
 8002efc:	00f42400 	.word	0x00f42400

08002f00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	f000 80a2 	beq.w	800304a <HAL_RCC_ClockConfig+0x14a>
{
 8002f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x15c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	428b      	cmp	r3, r1
 8002f18:	d20b      	bcs.n	8002f32 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_RCC_ClockConfig+0x15c>)
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f023 030f 	bic.w	r3, r3, #15
 8002f22:	430b      	orrs	r3, r1
 8002f24:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	f040 808e 	bne.w	800304e <HAL_RCC_ClockConfig+0x14e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f013 0f02 	tst.w	r3, #2
 8002f38:	d017      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3a:	f013 0f04 	tst.w	r3, #4
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f40:	4a47      	ldr	r2, [pc, #284]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002f42:	6893      	ldr	r3, [r2, #8]
 8002f44:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f48:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	f013 0f08 	tst.w	r3, #8
 8002f50:	d004      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f52:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002f54:	6893      	ldr	r3, [r2, #8]
 8002f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f5a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4a40      	ldr	r2, [pc, #256]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002f5e:	6893      	ldr	r3, [r2, #8]
 8002f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f64:	68a1      	ldr	r1, [r4, #8]
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	f013 0f01 	tst.w	r3, #1
 8002f70:	d031      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	6862      	ldr	r2, [r4, #4]
 8002f74:	2a01      	cmp	r2, #1
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f78:	2a02      	cmp	r2, #2
 8002f7a:	d025      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b38      	ldr	r3, [pc, #224]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f013 0f02 	tst.w	r3, #2
 8002f84:	d065      	beq.n	8003052 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f86:	4936      	ldr	r1, [pc, #216]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002f88:	688b      	ldr	r3, [r1, #8]
 8002f8a:	f023 0303 	bic.w	r3, r3, #3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002f92:	f7fe ff5f 	bl	8001e54 <HAL_GetTick>
 8002f96:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f98:	4f31      	ldr	r7, [pc, #196]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	6862      	ldr	r2, [r4, #4]
 8002fa6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002faa:	d014      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe ff52 	bl	8001e54 <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	4540      	cmp	r0, r8
 8002fb4:	d9f3      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8002fb6:	2003      	movs	r0, #3
 8002fb8:	e045      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fc2:	d1e0      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e03e      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	4b25      	ldr	r3, [pc, #148]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fd0:	d1d9      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	e037      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_RCC_ClockConfig+0x15c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	d90a      	bls.n	8002ff8 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_RCC_ClockConfig+0x15c>)
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	f023 030f 	bic.w	r3, r3, #15
 8002fea:	432b      	orrs	r3, r5
 8002fec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	42ab      	cmp	r3, r5
 8002ff6:	d12e      	bne.n	8003056 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f013 0f04 	tst.w	r3, #4
 8002ffe:	d006      	beq.n	800300e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8003002:	6893      	ldr	r3, [r2, #8]
 8003004:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003008:	68e1      	ldr	r1, [r4, #12]
 800300a:	430b      	orrs	r3, r1
 800300c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	f013 0f08 	tst.w	r3, #8
 8003014:	d007      	beq.n	8003026 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 8003018:	6893      	ldr	r3, [r2, #8]
 800301a:	6921      	ldr	r1, [r4, #16]
 800301c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003020:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003024:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f7ff ff05 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCC_ClockConfig+0x160>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <HAL_RCC_ClockConfig+0x164>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	40d8      	lsrs	r0, r3
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_RCC_ClockConfig+0x168>)
 800303a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCC_ClockConfig+0x16c>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	f7fe fecc 	bl	8001ddc <HAL_InitTick>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800304a:	2001      	movs	r0, #1
}
 800304c:	4770      	bx	lr
      return HAL_ERROR;
 800304e:	2001      	movs	r0, #1
 8003050:	e7f9      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003052:	2001      	movs	r0, #1
 8003054:	e7f7      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
      return HAL_ERROR;
 8003056:	2001      	movs	r0, #1
 8003058:	e7f5      	b.n	8003046 <HAL_RCC_ClockConfig+0x146>
 800305a:	bf00      	nop
 800305c:	40023c00 	.word	0x40023c00
 8003060:	40023800 	.word	0x40023800
 8003064:	08007c9c 	.word	0x08007c9c
 8003068:	20000000 	.word	0x20000000
 800306c:	20000008 	.word	0x20000008

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x18>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	4a03      	ldr	r2, [pc, #12]	; (800308c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800307e:	6810      	ldr	r0, [r2, #0]
}
 8003080:	40d8      	lsrs	r0, r3
 8003082:	4770      	bx	lr
 8003084:	40023800 	.word	0x40023800
 8003088:	08007cac 	.word	0x08007cac
 800308c:	20000000 	.word	0x20000000

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003098:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	4a03      	ldr	r2, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800309e:	6810      	ldr	r0, [r2, #0]
}
 80030a0:	40d8      	lsrs	r0, r3
 80030a2:	4770      	bx	lr
 80030a4:	40023800 	.word	0x40023800
 80030a8:	08007cac 	.word	0x08007cac
 80030ac:	20000000 	.word	0x20000000

080030b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030b4:	b083      	sub	sp, #12
 80030b6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030b8:	6806      	ldr	r6, [r0, #0]
 80030ba:	f016 0601 	ands.w	r6, r6, #1
 80030be:	d00c      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c0:	4bb3      	ldr	r3, [pc, #716]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030d2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80030d4:	fab6 f686 	clz	r6, r6
 80030d8:	0976      	lsrs	r6, r6, #5
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030da:	6825      	ldr	r5, [r4, #0]
 80030dc:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80030e0:	d010      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e2:	4aab      	ldr	r2, [pc, #684]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80030e4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80030e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80030ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80030ee:	430b      	orrs	r3, r1
 80030f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1;
 80030f6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80030fa:	bf08      	it	eq
 80030fc:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030fe:	fab5 f585 	clz	r5, r5
 8003102:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800310a:	d010      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800310c:	4aa0      	ldr	r2, [pc, #640]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800310e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003112:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003116:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003118:	430b      	orrs	r3, r1
 800311a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800311e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003124:	f000 8112 	beq.w	800334c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf08      	it	eq
 800312c:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800312e:	6823      	ldr	r3, [r4, #0]
  {
      plli2sused = 1;
 8003130:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003134:	bf18      	it	ne
 8003136:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003138:	f013 0f20 	tst.w	r3, #32
 800313c:	f040 8108 	bne.w	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	f013 0f10 	tst.w	r3, #16
 8003146:	d00c      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003148:	4b91      	ldr	r3, [pc, #580]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800314a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800314e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003156:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800315a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800315c:	430a      	orrs	r2, r1
 800315e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003168:	d008      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316a:	4a89      	ldr	r2, [pc, #548]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800316c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003170:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003174:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003176:	430b      	orrs	r3, r1
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003184:	4a82      	ldr	r2, [pc, #520]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003186:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800318a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800318e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003190:	430b      	orrs	r3, r1
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800319c:	d008      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319e:	4a7c      	ldr	r2, [pc, #496]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031b8:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031c2:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80031c4:	430b      	orrs	r3, r1
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031d8:	f023 0303 	bic.w	r3, r3, #3
 80031dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80031de:	430b      	orrs	r3, r1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031ea:	d008      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031ec:	4a68      	ldr	r2, [pc, #416]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80031ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031f2:	f023 030c 	bic.w	r3, r3, #12
 80031f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80031f8:	430b      	orrs	r3, r1
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003204:	d008      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003206:	4a62      	ldr	r2, [pc, #392]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003208:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800320c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003210:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003212:	430b      	orrs	r3, r1
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800321e:	d008      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003220:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003222:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003226:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800322a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800322c:	430b      	orrs	r3, r1
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003238:	d008      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323a:	4a55      	ldr	r2, [pc, #340]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800323c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003246:	430b      	orrs	r3, r1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003252:	d008      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003254:	4a4e      	ldr	r2, [pc, #312]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003256:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800325a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800325e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003260:	430b      	orrs	r3, r1
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800326c:	d008      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800326e:	4a48      	ldr	r2, [pc, #288]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003270:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003274:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003278:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800327a:	430b      	orrs	r3, r1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003286:	d008      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003288:	4a41      	ldr	r2, [pc, #260]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800328a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800328e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003292:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003294:	430b      	orrs	r3, r1
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80032a0:	d008      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032ac:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80032ae:	430b      	orrs	r3, r1
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80032ba:	d00d      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032bc:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032c2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80032c6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80032c8:	430b      	orrs	r3, r1
 80032ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032ce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1;
 80032d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d4:	bf08      	it	eq
 80032d6:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d8:	6823      	ldr	r3, [r4, #0]
  {
    pllsaiused = 1;
 80032da:	f013 0f08 	tst.w	r3, #8
 80032de:	bf18      	it	ne
 80032e0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032e2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80032ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80032ee:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80032f2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80032f4:	430b      	orrs	r3, r1
 80032f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003300:	d009      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003302:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003304:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003310:	430b      	orrs	r3, r1
 8003312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003316:	2e01      	cmp	r6, #1
 8003318:	d004      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003320:	f000 8102 	beq.w	8003528 <HAL_RCCEx_PeriphCLKConfig+0x478>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800332c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332e:	f7fe fd91 	bl	8001e54 <HAL_GetTick>
 8003332:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003334:	4f16      	ldr	r7, [pc, #88]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800333c:	d076      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800333e:	f7fe fd89 	bl	8001e54 <HAL_GetTick>
 8003342:	1b80      	subs	r0, r0, r6
 8003344:	2864      	cmp	r0, #100	; 0x64
 8003346:	d9f6      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x286>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003348:	2003      	movs	r0, #3
 800334a:	e0f0      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
      plli2sused = 1;
 800334c:	2601      	movs	r6, #1
 800334e:	e6ee      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003354:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800336e:	f7fe fd71 	bl	8001e54 <HAL_GetTick>
 8003372:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003374:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8003394 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003378:	f8d8 3000 	ldr.w	r3, [r8]
 800337c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003380:	d10a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe fd67 	bl	8001e54 <HAL_GetTick>
 8003386:	1bc0      	subs	r0, r0, r7
 8003388:	2864      	cmp	r0, #100	; 0x64
 800338a:	d9f5      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
        return HAL_TIMEOUT;
 800338c:	2003      	movs	r0, #3
 800338e:	e0ce      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003390:	40023800 	.word	0x40023800
 8003394:	40007000 	.word	0x40007000
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003398:	4bab      	ldr	r3, [pc, #684]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800339c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80033a0:	d015      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
 80033a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033a4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d010      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4ba6      	ldr	r3, [pc, #664]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80033ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033b6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80033ba:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80033c2:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80033c4:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f013 0f01 	tst.w	r3, #1
 80033cc:	d112      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033d0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80033d4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80033d8:	d01f      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80033da:	4a9b      	ldr	r2, [pc, #620]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80033dc:	6893      	ldr	r3, [r2, #8]
 80033de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033e2:	6093      	str	r3, [r2, #8]
 80033e4:	4a98      	ldr	r2, [pc, #608]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80033e6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80033e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	e6a5      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80033f4:	f7fe fd2e 	bl	8001e54 <HAL_GetTick>
 80033f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003402:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8003406:	f013 0f02 	tst.w	r3, #2
 800340a:	d1e0      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x31e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fd22 	bl	8001e54 <HAL_GetTick>
 8003410:	1bc0      	subs	r0, r0, r7
 8003412:	4548      	cmp	r0, r9
 8003414:	d9f5      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x352>
            return HAL_TIMEOUT;
 8003416:	2003      	movs	r0, #3
 8003418:	e089      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	488b      	ldr	r0, [pc, #556]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800341c:	6882      	ldr	r2, [r0, #8]
 800341e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003422:	498a      	ldr	r1, [pc, #552]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8003424:	4019      	ands	r1, r3
 8003426:	430a      	orrs	r2, r1
 8003428:	6082      	str	r2, [r0, #8]
 800342a:	e7db      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x334>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	f013 0f01 	tst.w	r3, #1
 8003432:	d013      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003436:	b98b      	cbnz	r3, 800345c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800343a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800343e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003446:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800344a:	430b      	orrs	r3, r1
 800344c:	6861      	ldr	r1, [r4, #4]
 800344e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003452:	68a1      	ldr	r1, [r4, #8]
 8003454:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003458:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003464:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003466:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800346a:	d006      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800346c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003470:	d01e      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	d11a      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800347a:	4a73      	ldr	r2, [pc, #460]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800347c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003480:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003488:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800348c:	430b      	orrs	r3, r1
 800348e:	6861      	ldr	r1, [r4, #4]
 8003490:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003494:	68e1      	ldr	r1, [r4, #12]
 8003496:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800349a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800349e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80034a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a4:	3b01      	subs	r3, #1
 80034a6:	f021 011f 	bic.w	r1, r1, #31
 80034aa:	430b      	orrs	r3, r1
 80034ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80034b6:	d011      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x42c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034b8:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80034ba:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034be:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034c2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80034c6:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80034ca:	430b      	orrs	r3, r1
 80034cc:	6861      	ldr	r1, [r4, #4]
 80034ce:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80034d2:	6921      	ldr	r1, [r4, #16]
 80034d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80034d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034e2:	d00d      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x450>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e4:	6862      	ldr	r2, [r4, #4]
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80034ee:	68e2      	ldr	r2, [r4, #12]
 80034f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80034f4:	68a2      	ldr	r2, [r4, #8]
 80034f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80034fa:	4a53      	ldr	r2, [pc, #332]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80034fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003500:	4a51      	ldr	r2, [pc, #324]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350a:	f7fe fca3 	bl	8001e54 <HAL_GetTick>
 800350e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003510:	4f4d      	ldr	r7, [pc, #308]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003518:	d106      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x478>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800351a:	f7fe fc9b 	bl	8001e54 <HAL_GetTick>
 800351e:	1b80      	subs	r0, r0, r6
 8003520:	2864      	cmp	r0, #100	; 0x64
 8003522:	d9f6      	bls.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003524:	2003      	movs	r0, #3
 8003526:	e002      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003528:	2d01      	cmp	r5, #1
 800352a:	d003      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x484>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800352c:	2000      	movs	r0, #0
}
 800352e:	b003      	add	sp, #12
 8003530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8003534:	4a44      	ldr	r2, [pc, #272]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800353e:	f7fe fc89 	bl	8001e54 <HAL_GetTick>
 8003542:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003544:	4e40      	ldr	r6, [pc, #256]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003546:	6833      	ldr	r3, [r6, #0]
 8003548:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800354c:	d006      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800354e:	f7fe fc81 	bl	8001e54 <HAL_GetTick>
 8003552:	1b40      	subs	r0, r0, r5
 8003554:	2864      	cmp	r0, #100	; 0x64
 8003556:	d9f6      	bls.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8003558:	2003      	movs	r0, #3
 800355a:	e7e8      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8003564:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003566:	b122      	cbz	r2, 8003572 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003568:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800356c:	d01d      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800356e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003570:	b9db      	cbnz	r3, 80035aa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003572:	4a35      	ldr	r2, [pc, #212]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003574:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003578:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800357c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003580:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003584:	430b      	orrs	r3, r1
 8003586:	6961      	ldr	r1, [r4, #20]
 8003588:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800358c:	69a1      	ldr	r1, [r4, #24]
 800358e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003592:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003596:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800359a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800359c:	3901      	subs	r1, #1
 800359e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80035a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80035a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80035b0:	d003      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80035b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80035b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b8:	d031      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x56e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f013 0f08 	tst.w	r3, #8
 80035c0:	d019      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x546>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c2:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80035c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035d0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6961      	ldr	r1, [r4, #20]
 80035d8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80035dc:	69e1      	ldr	r1, [r4, #28]
 80035de:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80035e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80035ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035f0:	430b      	orrs	r3, r1
 80035f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003600:	f7fe fc28 	bl	8001e54 <HAL_GetTick>
 8003604:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003606:	4d10      	ldr	r5, [pc, #64]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800360e:	d119      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x594>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003610:	f7fe fc20 	bl	8001e54 <HAL_GetTick>
 8003614:	1b00      	subs	r0, r0, r4
 8003616:	2864      	cmp	r0, #100	; 0x64
 8003618:	d9f6      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x558>
        return HAL_TIMEOUT;
 800361a:	2003      	movs	r0, #3
 800361c:	e787      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8003620:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003624:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003628:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800362c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003630:	430b      	orrs	r3, r1
 8003632:	6961      	ldr	r1, [r4, #20]
 8003634:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003638:	6a21      	ldr	r1, [r4, #32]
 800363a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800363e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003642:	e7ba      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  return HAL_OK;
 8003644:	2000      	movs	r0, #0
 8003646:	e772      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003648:	40023800 	.word	0x40023800
 800364c:	0ffffcff 	.word	0x0ffffcff

08003650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003650:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003652:	6a03      	ldr	r3, [r0, #32]
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003660:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <TIM_OC1_SetConfig+0x54>)
 8003662:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	680d      	ldr	r5, [r1, #0]
 8003666:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003668:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800366c:	688d      	ldr	r5, [r1, #8]
 800366e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003670:	4d0d      	ldr	r5, [pc, #52]	; (80036a8 <TIM_OC1_SetConfig+0x58>)
 8003672:	42a8      	cmp	r0, r5
 8003674:	d003      	beq.n	800367e <TIM_OC1_SetConfig+0x2e>
 8003676:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800367a:	42a8      	cmp	r0, r5
 800367c:	d10b      	bne.n	8003696 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800367e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003682:	68cd      	ldr	r5, [r1, #12]
 8003684:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003686:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800368e:	694d      	ldr	r5, [r1, #20]
 8003690:	698e      	ldr	r6, [r1, #24]
 8003692:	4335      	orrs	r5, r6
 8003694:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003696:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003698:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800369a:	684a      	ldr	r2, [r1, #4]
 800369c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369e:	6203      	str	r3, [r0, #32]
}
 80036a0:	bc70      	pop	{r4, r5, r6}
 80036a2:	4770      	bx	lr
 80036a4:	fffeff8c 	.word	0xfffeff8c
 80036a8:	40010000 	.word	0x40010000

080036ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036ae:	6a03      	ldr	r3, [r0, #32]
 80036b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ba:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <TIM_OC3_SetConfig+0x5c>)
 80036be:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c0:	680d      	ldr	r5, [r1, #0]
 80036c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036c8:	688d      	ldr	r5, [r1, #8]
 80036ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ce:	4d0f      	ldr	r5, [pc, #60]	; (800370c <TIM_OC3_SetConfig+0x60>)
 80036d0:	42a8      	cmp	r0, r5
 80036d2:	d003      	beq.n	80036dc <TIM_OC3_SetConfig+0x30>
 80036d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036d8:	42a8      	cmp	r0, r5
 80036da:	d10d      	bne.n	80036f8 <TIM_OC3_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036e0:	68cd      	ldr	r5, [r1, #12]
 80036e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ea:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ee:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036f0:	698e      	ldr	r6, [r1, #24]
 80036f2:	4335      	orrs	r5, r6
 80036f4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036fc:	684a      	ldr	r2, [r1, #4]
 80036fe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	6203      	str	r3, [r0, #32]
}
 8003702:	bc70      	pop	{r4, r5, r6}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	fffeff8c 	.word	0xfffeff8c
 800370c:	40010000 	.word	0x40010000

08003710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003712:	6a03      	ldr	r3, [r0, #32]
 8003714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003718:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800371e:	69c5      	ldr	r5, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003720:	4a0e      	ldr	r2, [pc, #56]	; (800375c <TIM_OC4_SetConfig+0x4c>)
 8003722:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003724:	680d      	ldr	r5, [r1, #0]
 8003726:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800372a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800372e:	688d      	ldr	r5, [r1, #8]
 8003730:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	4d0a      	ldr	r5, [pc, #40]	; (8003760 <TIM_OC4_SetConfig+0x50>)
 8003736:	42a8      	cmp	r0, r5
 8003738:	d003      	beq.n	8003742 <TIM_OC4_SetConfig+0x32>
 800373a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800373e:	42a8      	cmp	r0, r5
 8003740:	d104      	bne.n	800374c <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003742:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003746:	694d      	ldr	r5, [r1, #20]
 8003748:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800374e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003750:	684a      	ldr	r2, [r1, #4]
 8003752:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	6203      	str	r3, [r0, #32]
}
 8003756:	bc30      	pop	{r4, r5}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	feff8cff 	.word	0xfeff8cff
 8003760:	40010000 	.word	0x40010000

08003764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003766:	6a03      	ldr	r3, [r0, #32]
 8003768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003772:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <TIM_OC5_SetConfig+0x48>)
 8003776:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	680d      	ldr	r5, [r1, #0]
 800377a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800377c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003780:	688d      	ldr	r5, [r1, #8]
 8003782:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	4d0a      	ldr	r5, [pc, #40]	; (80037b0 <TIM_OC5_SetConfig+0x4c>)
 8003788:	42a8      	cmp	r0, r5
 800378a:	d003      	beq.n	8003794 <TIM_OC5_SetConfig+0x30>
 800378c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003790:	42a8      	cmp	r0, r5
 8003792:	d104      	bne.n	800379e <TIM_OC5_SetConfig+0x3a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003794:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003798:	694d      	ldr	r5, [r1, #20]
 800379a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037a0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037a2:	684a      	ldr	r2, [r1, #4]
 80037a4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	6203      	str	r3, [r0, #32]
}
 80037a8:	bc30      	pop	{r4, r5}
 80037aa:	4770      	bx	lr
 80037ac:	fffeff8f 	.word	0xfffeff8f
 80037b0:	40010000 	.word	0x40010000

080037b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80037b6:	6a03      	ldr	r3, [r0, #32]
 80037b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80037bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037c2:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <TIM_OC6_SetConfig+0x4c>)
 80037c6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	680d      	ldr	r5, [r1, #0]
 80037ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037d2:	688d      	ldr	r5, [r1, #8]
 80037d4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d8:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <TIM_OC6_SetConfig+0x50>)
 80037da:	42a8      	cmp	r0, r5
 80037dc:	d003      	beq.n	80037e6 <TIM_OC6_SetConfig+0x32>
 80037de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80037e2:	42a8      	cmp	r0, r5
 80037e4:	d104      	bne.n	80037f0 <TIM_OC6_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037e6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037ea:	694d      	ldr	r5, [r1, #20]
 80037ec:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037f2:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037f4:	684a      	ldr	r2, [r1, #4]
 80037f6:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f8:	6203      	str	r3, [r0, #32]
}
 80037fa:	bc30      	pop	{r4, r5}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	feff8fff 	.word	0xfeff8fff
 8003804:	40010000 	.word	0x40010000

08003808 <HAL_TIM_PWM_MspInit>:
}
 8003808:	4770      	bx	lr
	...

0800380c <TIM_Base_SetConfig>:
{
 800380c:	b410      	push	{r4}
  tmpcr1 = TIMx->CR1;
 800380e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <TIM_Base_SetConfig+0xd8>)
 8003812:	4290      	cmp	r0, r2
 8003814:	bf14      	ite	ne
 8003816:	2200      	movne	r2, #0
 8003818:	2201      	moveq	r2, #1
 800381a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800381e:	d044      	beq.n	80038aa <TIM_Base_SetConfig+0x9e>
 8003820:	2a00      	cmp	r2, #0
 8003822:	d142      	bne.n	80038aa <TIM_Base_SetConfig+0x9e>
 8003824:	4c30      	ldr	r4, [pc, #192]	; (80038e8 <TIM_Base_SetConfig+0xdc>)
 8003826:	42a0      	cmp	r0, r4
 8003828:	d00b      	beq.n	8003842 <TIM_Base_SetConfig+0x36>
 800382a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800382e:	42a0      	cmp	r0, r4
 8003830:	d007      	beq.n	8003842 <TIM_Base_SetConfig+0x36>
 8003832:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003836:	42a0      	cmp	r0, r4
 8003838:	d003      	beq.n	8003842 <TIM_Base_SetConfig+0x36>
 800383a:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800383e:	42a0      	cmp	r0, r4
 8003840:	d10a      	bne.n	8003858 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003846:	684c      	ldr	r4, [r1, #4]
 8003848:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800384a:	4c27      	ldr	r4, [pc, #156]	; (80038e8 <TIM_Base_SetConfig+0xdc>)
 800384c:	42a0      	cmp	r0, r4
 800384e:	d030      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 8003850:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003854:	42a0      	cmp	r0, r4
 8003856:	d02c      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 8003858:	4c24      	ldr	r4, [pc, #144]	; (80038ec <TIM_Base_SetConfig+0xe0>)
 800385a:	42a0      	cmp	r0, r4
 800385c:	d029      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 800385e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003862:	42a0      	cmp	r0, r4
 8003864:	d025      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 8003866:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800386a:	42a0      	cmp	r0, r4
 800386c:	d021      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 800386e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003872:	42a0      	cmp	r0, r4
 8003874:	d01d      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 8003876:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800387a:	42a0      	cmp	r0, r4
 800387c:	d019      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 800387e:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8003882:	42a0      	cmp	r0, r4
 8003884:	d015      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 8003886:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800388a:	42a0      	cmp	r0, r4
 800388c:	d011      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
 800388e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003892:	42a0      	cmp	r0, r4
 8003894:	d00d      	beq.n	80038b2 <TIM_Base_SetConfig+0xa6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389a:	694a      	ldr	r2, [r1, #20]
 800389c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800389e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a0:	688b      	ldr	r3, [r1, #8]
 80038a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038a4:	680b      	ldr	r3, [r1, #0]
 80038a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	e016      	b.n	80038d8 <TIM_Base_SetConfig+0xcc>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80038ae:	684c      	ldr	r4, [r1, #4]
 80038b0:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80038b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b6:	68cc      	ldr	r4, [r1, #12]
 80038b8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	694c      	ldr	r4, [r1, #20]
 80038c0:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80038c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c4:	688b      	ldr	r3, [r1, #8]
 80038c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038c8:	680b      	ldr	r3, [r1, #0]
 80038ca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <TIM_Base_SetConfig+0xe4>)
 80038ce:	4298      	cmp	r0, r3
 80038d0:	d000      	beq.n	80038d4 <TIM_Base_SetConfig+0xc8>
 80038d2:	b10a      	cbz	r2, 80038d8 <TIM_Base_SetConfig+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	690b      	ldr	r3, [r1, #16]
 80038d6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	2301      	movs	r3, #1
 80038da:	6143      	str	r3, [r0, #20]
}
 80038dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80038f4:	b360      	cbz	r0, 8003950 <HAL_TIM_Base_Init+0x5c>
{
 80038f6:	b510      	push	{r4, lr}
 80038f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038fe:	b313      	cbz	r3, 8003946 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003906:	4621      	mov	r1, r4
 8003908:	f851 0b04 	ldr.w	r0, [r1], #4
 800390c:	f7ff ff7e 	bl	800380c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	2301      	movs	r3, #1
 8003912:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800391a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800391e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800392a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003936:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800393a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800393e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003942:	2000      	movs	r0, #0
}
 8003944:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003946:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800394a:	f7fe f911 	bl	8001b70 <HAL_TIM_Base_MspInit>
 800394e:	e7d7      	b.n	8003900 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
}
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003954:	b360      	cbz	r0, 80039b0 <HAL_TIM_PWM_Init+0x5c>
{
 8003956:	b510      	push	{r4, lr}
 8003958:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800395a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800395e:	b313      	cbz	r3, 80039a6 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003966:	4621      	mov	r1, r4
 8003968:	f851 0b04 	ldr.w	r0, [r1], #4
 800396c:	f7ff ff4e 	bl	800380c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	2301      	movs	r3, #1
 8003972:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800397a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800397e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003982:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800398a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003996:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800399a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800399e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039a2:	2000      	movs	r0, #0
}
 80039a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80039a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80039aa:	f7ff ff2d 	bl	8003808 <HAL_TIM_PWM_MspInit>
 80039ae:	e7d7      	b.n	8003960 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80039b0:	2001      	movs	r0, #1
}
 80039b2:	4770      	bx	lr

080039b4 <TIM_OC2_SetConfig>:
{
 80039b4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b6:	6a03      	ldr	r3, [r0, #32]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80039be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80039c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80039c2:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c4:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <TIM_OC2_SetConfig+0x5c>)
 80039c6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	680d      	ldr	r5, [r1, #0]
 80039ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80039ce:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d2:	688d      	ldr	r5, [r1, #8]
 80039d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039d8:	4d0e      	ldr	r5, [pc, #56]	; (8003a14 <TIM_OC2_SetConfig+0x60>)
 80039da:	42a8      	cmp	r0, r5
 80039dc:	d003      	beq.n	80039e6 <TIM_OC2_SetConfig+0x32>
 80039de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80039e2:	42a8      	cmp	r0, r5
 80039e4:	d10d      	bne.n	8003a02 <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
 80039e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039ea:	68cd      	ldr	r5, [r1, #12]
 80039ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80039f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039f4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039f8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039fa:	698e      	ldr	r6, [r1, #24]
 80039fc:	4335      	orrs	r5, r6
 80039fe:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003a02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a04:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a06:	684a      	ldr	r2, [r1, #4]
 8003a08:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003a0a:	6203      	str	r3, [r0, #32]
}
 8003a0c:	bc70      	pop	{r4, r5, r6}
 8003a0e:	4770      	bx	lr
 8003a10:	feff8cff 	.word	0xfeff8cff
 8003a14:	40010000 	.word	0x40010000

08003a18 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003a1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f000 8095 	beq.w	8003b4e <HAL_TIM_PWM_ConfigChannel+0x136>
 8003a24:	4604      	mov	r4, r0
 8003a26:	460d      	mov	r5, r1
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003a2e:	2a14      	cmp	r2, #20
 8003a30:	f200 8088 	bhi.w	8003b44 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8003a34:	e8df f002 	tbb	[pc, r2]
 8003a38:	8686860b 	.word	0x8686860b
 8003a3c:	8686861f 	.word	0x8686861f
 8003a40:	86868634 	.word	0x86868634
 8003a44:	86868648 	.word	0x86868648
 8003a48:	8686865d 	.word	0x8686865d
 8003a4c:	71          	.byte	0x71
 8003a4d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	f7ff fdfe 	bl	8003650 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	6993      	ldr	r3, [r2, #24]
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	6993      	ldr	r3, [r2, #24]
 8003a62:	f023 0304 	bic.w	r3, r3, #4
 8003a66:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	6993      	ldr	r3, [r2, #24]
 8003a6c:	6929      	ldr	r1, [r5, #16]
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2000      	movs	r0, #0
      break;
 8003a74:	e067      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a76:	6800      	ldr	r0, [r0, #0]
 8003a78:	f7ff ff9c 	bl	80039b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	6822      	ldr	r2, [r4, #0]
 8003a7e:	6993      	ldr	r3, [r2, #24]
 8003a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a84:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	6993      	ldr	r3, [r2, #24]
 8003a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	6993      	ldr	r3, [r2, #24]
 8003a94:	6929      	ldr	r1, [r5, #16]
 8003a96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003a9a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2000      	movs	r0, #0
      break;
 8003a9e:	e052      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aa0:	6800      	ldr	r0, [r0, #0]
 8003aa2:	f7ff fe03 	bl	80036ac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	69d3      	ldr	r3, [r2, #28]
 8003aaa:	f043 0308 	orr.w	r3, r3, #8
 8003aae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	69d3      	ldr	r3, [r2, #28]
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aba:	6822      	ldr	r2, [r4, #0]
 8003abc:	69d3      	ldr	r3, [r2, #28]
 8003abe:	6929      	ldr	r1, [r5, #16]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	2000      	movs	r0, #0
      break;
 8003ac6:	e03e      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac8:	6800      	ldr	r0, [r0, #0]
 8003aca:	f7ff fe21 	bl	8003710 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	69d3      	ldr	r3, [r2, #28]
 8003ad2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ad6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	69d3      	ldr	r3, [r2, #28]
 8003adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ae0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	69d3      	ldr	r3, [r2, #28]
 8003ae6:	6929      	ldr	r1, [r5, #16]
 8003ae8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003aec:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2000      	movs	r0, #0
      break;
 8003af0:	e029      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003af2:	6800      	ldr	r0, [r0, #0]
 8003af4:	f7ff fe36 	bl	8003764 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003afc:	f043 0308 	orr.w	r3, r3, #8
 8003b00:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b10:	6929      	ldr	r1, [r5, #16]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2000      	movs	r0, #0
      break;
 8003b18:	e015      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	f7ff fe4a 	bl	80037b4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b28:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b2a:	6822      	ldr	r2, [r4, #0]
 8003b2c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b32:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003b38:	6929      	ldr	r1, [r5, #16]
 8003b3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003b3e:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2000      	movs	r0, #0
      break;
 8003b42:	e000      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x12e>
  __HAL_LOCK(htim);
 8003b44:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003b4e:	2002      	movs	r0, #2
 8003b50:	e7fc      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x134>

08003b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b52:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b54:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b56:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003b60:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b62:	6082      	str	r2, [r0, #8]
}
 8003b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f000 80ac 	beq.w	8003cce <HAL_TIM_ConfigClockSource+0x162>
{
 8003b76:	b570      	push	{r4, r5, r6, lr}
 8003b78:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003b86:	6802      	ldr	r2, [r0, #0]
 8003b88:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8a:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <HAL_TIM_ConfigClockSource+0x168>)
 8003b8c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003b8e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003b90:	680b      	ldr	r3, [r1, #0]
 8003b92:	2b60      	cmp	r3, #96	; 0x60
 8003b94:	d060      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xec>
 8003b96:	d83d      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0xa8>
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d079      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0x124>
 8003b9c:	d91c      	bls.n	8003bd8 <HAL_TIM_ConfigClockSource+0x6c>
 8003b9e:	2b50      	cmp	r3, #80	; 0x50
 8003ba0:	d136      	bne.n	8003c10 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	6848      	ldr	r0, [r1, #4]
 8003ba6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003ba8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003baa:	6a1d      	ldr	r5, [r3, #32]
 8003bac:	f025 0501 	bic.w	r5, r5, #1
 8003bb0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bbc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003bc0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bc6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003bc8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003bd2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2000      	movs	r0, #0
}
 8003bd6:	e012      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d002      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x76>
 8003bdc:	d90b      	bls.n	8003bf6 <HAL_TIM_ConfigClockSource+0x8a>
 8003bde:	2b30      	cmp	r3, #48	; 0x30
 8003be0:	d114      	bne.n	8003c0c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003be2:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003be4:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003bf0:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2000      	movs	r0, #0
}
 8003bf4:	e003      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003bf6:	f033 0210 	bics.w	r2, r3, #16
 8003bfa:	d0f2      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x76>
 8003bfc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003c04:	2300      	movs	r3, #0
 8003c06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e7f6      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7f4      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d055      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	d10c      	bne.n	8003c3a <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 8003c20:	68cb      	ldr	r3, [r1, #12]
 8003c22:	684a      	ldr	r2, [r1, #4]
 8003c24:	6889      	ldr	r1, [r1, #8]
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	f7ff ff93 	bl	8003b52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c2c:	6822      	ldr	r2, [r4, #0]
 8003c2e:	6893      	ldr	r3, [r2, #8]
 8003c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c34:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2000      	movs	r0, #0
      break;
 8003c38:	e7e1      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003c3a:	2b70      	cmp	r3, #112	; 0x70
 8003c3c:	d145      	bne.n	8003cca <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	68cb      	ldr	r3, [r1, #12]
 8003c40:	684a      	ldr	r2, [r1, #4]
 8003c42:	6889      	ldr	r1, [r1, #8]
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	f7ff ff84 	bl	8003b52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003c52:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c54:	2000      	movs	r0, #0
      break;
 8003c56:	e7d2      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	684d      	ldr	r5, [r1, #4]
 8003c5c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5e:	6a18      	ldr	r0, [r3, #32]
 8003c60:	f020 0010 	bic.w	r0, r0, #16
 8003c64:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003c68:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c6a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c6e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c76:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c7c:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003c80:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c86:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003c8a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	e7b6      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	6848      	ldr	r0, [r1, #4]
 8003c94:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c96:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c98:	6a1d      	ldr	r5, [r3, #32]
 8003c9a:	f025 0501 	bic.w	r5, r5, #1
 8003c9e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003caa:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003cae:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003cb6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cbc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003cc0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2000      	movs	r0, #0
}
 8003cc4:	e79b      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	e799      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003cca:	2001      	movs	r0, #1
 8003ccc:	e797      	b.n	8003bfe <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 8003cce:	2002      	movs	r0, #2
}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	fffe0088 	.word	0xfffe0088

08003cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cda:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cde:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce0:	2401      	movs	r4, #1
 8003ce2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003ce4:	ea23 0304 	bic.w	r3, r3, r4
 8003ce8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cea:	6a03      	ldr	r3, [r0, #32]
 8003cec:	408a      	lsls	r2, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	6202      	str	r2, [r0, #32]
}
 8003cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_PWM_Start>:
{
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d151      	bne.n	8003da6 <HAL_TIM_PWM_Start+0xae>
 8003d02:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	2a01      	cmp	r2, #1
 8003d0a:	f040 8087 	bne.w	8003e1c <HAL_TIM_PWM_Start+0x124>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d14:	2201      	movs	r2, #1
 8003d16:	4619      	mov	r1, r3
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	f7ff ffdd 	bl	8003cd8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	4a45      	ldr	r2, [pc, #276]	; (8003e38 <HAL_TIM_PWM_Start+0x140>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_PWM_Start+0x36>
 8003d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d103      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x3e>
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_TIM_PWM_Start+0x140>)
 8003d3a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003d3e:	bf18      	it	ne
 8003d40:	429a      	cmpne	r2, r3
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	493c      	ldr	r1, [pc, #240]	; (8003e3c <HAL_TIM_PWM_Start+0x144>)
 8003d4a:	428a      	cmp	r2, r1
 8003d4c:	bf08      	it	eq
 8003d4e:	f043 0301 	orreq.w	r3, r3, #1
 8003d52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d56:	428a      	cmp	r2, r1
 8003d58:	bf08      	it	eq
 8003d5a:	f043 0301 	orreq.w	r3, r3, #1
 8003d5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d62:	428a      	cmp	r2, r1
 8003d64:	bf08      	it	eq
 8003d66:	f043 0301 	orreq.w	r3, r3, #1
 8003d6a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8003d6e:	428a      	cmp	r2, r1
 8003d70:	bf08      	it	eq
 8003d72:	f043 0301 	orreq.w	r3, r3, #1
 8003d76:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8003d7a:	428a      	cmp	r2, r1
 8003d7c:	bf08      	it	eq
 8003d7e:	f043 0301 	orreq.w	r3, r3, #1
 8003d82:	b913      	cbnz	r3, 8003d8a <HAL_TIM_PWM_Start+0x92>
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_TIM_PWM_Start+0x148>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d142      	bne.n	8003e10 <HAL_TIM_PWM_Start+0x118>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8a:	6891      	ldr	r1, [r2, #8]
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_TIM_PWM_Start+0x14c>)
 8003d8e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d04f      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x13c>
 8003d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d98:	d04c      	beq.n	8003e34 <HAL_TIM_PWM_Start+0x13c>
      __HAL_TIM_ENABLE(htim);
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003da2:	2000      	movs	r0, #0
 8003da4:	e047      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003da6:	2904      	cmp	r1, #4
 8003da8:	d00e      	beq.n	8003dc8 <HAL_TIM_PWM_Start+0xd0>
 8003daa:	2908      	cmp	r1, #8
 8003dac:	d015      	beq.n	8003dda <HAL_TIM_PWM_Start+0xe2>
 8003dae:	290c      	cmp	r1, #12
 8003db0:	d01c      	beq.n	8003dec <HAL_TIM_PWM_Start+0xf4>
 8003db2:	2910      	cmp	r1, #16
 8003db4:	d023      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x106>
 8003db6:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	d137      	bne.n	8003e30 <HAL_TIM_PWM_Start+0x138>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 8003dc6:	e7a5      	b.n	8003d14 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc8:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	d126      	bne.n	8003e20 <HAL_TIM_PWM_Start+0x128>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 8003dd8:	e79c      	b.n	8003d14 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	2a01      	cmp	r2, #1
 8003de2:	d11f      	bne.n	8003e24 <HAL_TIM_PWM_Start+0x12c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de4:	2202      	movs	r2, #2
 8003de6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8003dea:	e793      	b.n	8003d14 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dec:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	d118      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x130>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	2202      	movs	r2, #2
 8003df8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 8003dfc:	e78a      	b.n	8003d14 <HAL_TIM_PWM_Start+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfe:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	2a01      	cmp	r2, #1
 8003e06:	d111      	bne.n	8003e2c <HAL_TIM_PWM_Start+0x134>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
 8003e0e:	e781      	b.n	8003d14 <HAL_TIM_PWM_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e00c      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
    return HAL_ERROR;
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	e00a      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
 8003e20:	2001      	movs	r0, #1
 8003e22:	e008      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
 8003e24:	2001      	movs	r0, #1
 8003e26:	e006      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
 8003e28:	2001      	movs	r0, #1
 8003e2a:	e004      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	e002      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
 8003e30:	2001      	movs	r0, #1
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_PWM_Start+0x13e>
  return HAL_OK;
 8003e34:	2000      	movs	r0, #0
}
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40001800 	.word	0x40001800
 8003e44:	00010007 	.word	0x00010007

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d051      	beq.n	8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8003e50:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003e52:	2301      	movs	r3, #1
 8003e54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5e:	6802      	ldr	r2, [r0, #0]
 8003e60:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e62:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e64:	4d24      	ldr	r5, [pc, #144]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e66:	42aa      	cmp	r2, r5
 8003e68:	d003      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8003e6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e6e:	42aa      	cmp	r2, r5
 8003e70:	d103      	bne.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e76:	684d      	ldr	r5, [r1, #4]
 8003e78:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7e:	680d      	ldr	r5, [r1, #0]
 8003e80:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e82:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	6802      	ldr	r2, [r0, #0]
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003e8c:	bf18      	it	ne
 8003e8e:	429a      	cmpne	r2, r3
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	4d19      	ldr	r5, [pc, #100]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e98:	42aa      	cmp	r2, r5
 8003e9a:	bf08      	it	eq
 8003e9c:	f043 0301 	orreq.w	r3, r3, #1
 8003ea0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ea4:	42aa      	cmp	r2, r5
 8003ea6:	bf08      	it	eq
 8003ea8:	f043 0301 	orreq.w	r3, r3, #1
 8003eac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eb0:	42aa      	cmp	r2, r5
 8003eb2:	bf08      	it	eq
 8003eb4:	f043 0301 	orreq.w	r3, r3, #1
 8003eb8:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 8003ebc:	42aa      	cmp	r2, r5
 8003ebe:	bf08      	it	eq
 8003ec0:	f043 0301 	orreq.w	r3, r3, #1
 8003ec4:	f505 5570 	add.w	r5, r5, #15360	; 0x3c00
 8003ec8:	42aa      	cmp	r2, r5
 8003eca:	bf08      	it	eq
 8003ecc:	f043 0301 	orreq.w	r3, r3, #1
 8003ed0:	b913      	cbnz	r3, 8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d104      	bne.n	8003ee2 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003edc:	688b      	ldr	r3, [r1, #8]
 8003ede:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003eee:	4618      	mov	r0, r3
}
 8003ef0:	bc30      	pop	{r4, r5}
 8003ef2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ef4:	2002      	movs	r0, #2
}
 8003ef6:	4770      	bx	lr
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40001800 	.word	0x40001800

08003f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d03e      	beq.n	8003f8a <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8003f0c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f14:	68cb      	ldr	r3, [r1, #12]
 8003f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1a:	688a      	ldr	r2, [r1, #8]
 8003f1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f22:	684a      	ldr	r2, [r1, #4]
 8003f24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2a:	680a      	ldr	r2, [r1, #0]
 8003f2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f32:	690a      	ldr	r2, [r1, #16]
 8003f34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f3a:	694a      	ldr	r2, [r1, #20]
 8003f3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f42:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003f44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f46:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003f4a:	698a      	ldr	r2, [r1, #24]
 8003f4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f50:	6802      	ldr	r2, [r0, #0]
 8003f52:	4c0f      	ldr	r4, [pc, #60]	; (8003f90 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8003f54:	42a2      	cmp	r2, r4
 8003f56:	d003      	beq.n	8003f60 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>
 8003f58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f5c:	42a2      	cmp	r2, r4
 8003f5e:	d10c      	bne.n	8003f7a <HAL_TIMEx_ConfigBreakDeadTime+0x76>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f64:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003f66:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	69cc      	ldr	r4, [r1, #28]
 8003f70:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f72:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f76:	6a09      	ldr	r1, [r1, #32]
 8003f78:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f7a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003f82:	4618      	mov	r0, r3
}
 8003f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f88:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f8a:	2002      	movs	r0, #2
}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000

08003f94 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f94:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	e852 3f00 	ldrex	r3, [r2]
 8003f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	e842 3100 	strex	r1, r3, [r2]
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d1f6      	bne.n	8003f94 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	f102 0308 	add.w	r3, r2, #8
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	3208      	adds	r2, #8
 8003fb6:	e842 3100 	strex	r1, r3, [r2]
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d1f3      	bne.n	8003fa6 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d005      	beq.n	8003fd0 <UART_EndRxTransfer+0x3c>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fcc:	6643      	str	r3, [r0, #100]	; 0x64
}
 8003fce:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	e852 3f00 	ldrex	r3, [r2]
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	e842 3100 	strex	r1, r3, [r2]
 8003fde:	2900      	cmp	r1, #0
 8003fe0:	d1f6      	bne.n	8003fd0 <UART_EndRxTransfer+0x3c>
 8003fe2:	e7ef      	b.n	8003fc4 <UART_EndRxTransfer+0x30>

08003fe4 <HAL_UART_TxCpltCallback>:
}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_UART_ErrorCallback>:
}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ff2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ff6:	f7ff fff6 	bl	8003fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffa:	bd08      	pop	{r3, pc}

08003ffc <HAL_UARTEx_RxEventCallback>:
}
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_UART_IRQHandler>:
{
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004004:	6802      	ldr	r2, [r0, #0]
 8004006:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004008:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800400a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800400c:	f640 050f 	movw	r5, #2063	; 0x80f
 8004010:	422b      	tst	r3, r5
 8004012:	d10a      	bne.n	800402a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004014:	f013 0f20 	tst.w	r3, #32
 8004018:	d00e      	beq.n	8004038 <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800401a:	f010 0f20 	tst.w	r0, #32
 800401e:	d00b      	beq.n	8004038 <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 8004020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004022:	b1db      	cbz	r3, 800405c <HAL_UART_IRQHandler+0x5c>
        huart->RxISR(huart);
 8004024:	4620      	mov	r0, r4
 8004026:	4798      	blx	r3
 8004028:	e018      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800402a:	f011 0101 	ands.w	r1, r1, #1
 800402e:	d116      	bne.n	800405e <HAL_UART_IRQHandler+0x5e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004030:	4dae      	ldr	r5, [pc, #696]	; (80042ec <HAL_UART_IRQHandler+0x2ec>)
 8004032:	4228      	tst	r0, r5
 8004034:	f040 814f 	bne.w	80042d6 <HAL_UART_IRQHandler+0x2d6>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800403a:	2901      	cmp	r1, #1
 800403c:	f000 80a1 	beq.w	8004182 <HAL_UART_IRQHandler+0x182>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004040:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004044:	d003      	beq.n	800404e <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004046:	f010 0f80 	tst.w	r0, #128	; 0x80
 800404a:	f040 812c 	bne.w	80042a6 <HAL_UART_IRQHandler+0x2a6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800404e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004052:	d003      	beq.n	800405c <HAL_UART_IRQHandler+0x5c>
 8004054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004058:	f040 812c 	bne.w	80042b4 <HAL_UART_IRQHandler+0x2b4>
}
 800405c:	bd38      	pop	{r3, r4, r5, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800405e:	f013 0f01 	tst.w	r3, #1
 8004062:	d009      	beq.n	8004078 <HAL_UART_IRQHandler+0x78>
 8004064:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004068:	d006      	beq.n	8004078 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800406a:	2501      	movs	r5, #1
 800406c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800406e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004072:	432a      	orrs	r2, r5
 8004074:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004078:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800407c:	400a      	ands	r2, r1
 800407e:	d15c      	bne.n	800413a <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004080:	f013 0f04 	tst.w	r3, #4
 8004084:	d001      	beq.n	800408a <HAL_UART_IRQHandler+0x8a>
 8004086:	2900      	cmp	r1, #0
 8004088:	d162      	bne.n	8004150 <HAL_UART_IRQHandler+0x150>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800408a:	f013 0f08 	tst.w	r3, #8
 800408e:	d00b      	beq.n	80040a8 <HAL_UART_IRQHandler+0xa8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004090:	f010 0f20 	tst.w	r0, #32
 8004094:	d100      	bne.n	8004098 <HAL_UART_IRQHandler+0x98>
 8004096:	b139      	cbz	r1, 80040a8 <HAL_UART_IRQHandler+0xa8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	2108      	movs	r1, #8
 800409c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800409e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80040a2:	430a      	orrs	r2, r1
 80040a4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040a8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80040ac:	d00c      	beq.n	80040c8 <HAL_UART_IRQHandler+0xc8>
 80040ae:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80040b2:	d009      	beq.n	80040c8 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040ba:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040bc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040c8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	d0c5      	beq.n	800405c <HAL_UART_IRQHandler+0x5c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d0:	f013 0f20 	tst.w	r3, #32
 80040d4:	d006      	beq.n	80040e4 <HAL_UART_IRQHandler+0xe4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040d6:	f010 0f20 	tst.w	r0, #32
 80040da:	d003      	beq.n	80040e4 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 80040dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040de:	b10b      	cbz	r3, 80040e4 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 80040e0:	4620      	mov	r0, r4
 80040e2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80040e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e8:	6822      	ldr	r2, [r4, #0]
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d03d      	beq.n	8004174 <HAL_UART_IRQHandler+0x174>
        UART_EndRxTransfer(huart);
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff ff4b 	bl	8003f94 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004106:	d031      	beq.n	800416c <HAL_UART_IRQHandler+0x16c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004108:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	f102 0308 	add.w	r3, r2, #8
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	3208      	adds	r2, #8
 8004118:	e842 3100 	strex	r1, r3, [r2]
 800411c:	2900      	cmp	r1, #0
 800411e:	d1f3      	bne.n	8004108 <HAL_UART_IRQHandler+0x108>
          if (huart->hdmarx != NULL)
 8004120:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004122:	b1fb      	cbz	r3, 8004164 <HAL_UART_IRQHandler+0x164>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004124:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <HAL_UART_IRQHandler+0x2f0>)
 8004126:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004128:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800412a:	f7fd ff5d 	bl	8001fe8 <HAL_DMA_Abort_IT>
 800412e:	2800      	cmp	r0, #0
 8004130:	d094      	beq.n	800405c <HAL_UART_IRQHandler+0x5c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004132:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004134:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004136:	4798      	blx	r3
 8004138:	e790      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800413a:	6821      	ldr	r1, [r4, #0]
 800413c:	2502      	movs	r5, #2
 800413e:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004140:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8004144:	f041 0104 	orr.w	r1, r1, #4
 8004148:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800414c:	4611      	mov	r1, r2
 800414e:	e797      	b.n	8004080 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	2504      	movs	r5, #4
 8004154:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004156:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800415a:	f042 0202 	orr.w	r2, r2, #2
 800415e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8004162:	e792      	b.n	800408a <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8004164:	4620      	mov	r0, r4
 8004166:	f7ff ff3e 	bl	8003fe6 <HAL_UART_ErrorCallback>
 800416a:	e777      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
          HAL_UART_ErrorCallback(huart);
 800416c:	4620      	mov	r0, r4
 800416e:	f7ff ff3a 	bl	8003fe6 <HAL_UART_ErrorCallback>
 8004172:	e773      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
        HAL_UART_ErrorCallback(huart);
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff ff36 	bl	8003fe6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004180:	e76c      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004182:	f013 0f10 	tst.w	r3, #16
 8004186:	f43f af5b 	beq.w	8004040 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800418a:	f010 0f10 	tst.w	r0, #16
 800418e:	f43f af57 	beq.w	8004040 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004192:	2310      	movs	r3, #16
 8004194:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800419e:	d04c      	beq.n	800423a <HAL_UART_IRQHandler+0x23a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80041a2:	6813      	ldr	r3, [r2, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f43f af57 	beq.w	800405c <HAL_UART_IRQHandler+0x5c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ae:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80041b2:	4299      	cmp	r1, r3
 80041b4:	f67f af52 	bls.w	800405c <HAL_UART_IRQHandler+0x5c>
        huart->RxXferCount = nb_remaining_rx_data;
 80041b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041bc:	69d3      	ldr	r3, [r2, #28]
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d030      	beq.n	8004226 <HAL_UART_IRQHandler+0x226>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	e852 3f00 	ldrex	r3, [r2]
 80041ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	e842 3100 	strex	r1, r3, [r2]
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d1f6      	bne.n	80041c4 <HAL_UART_IRQHandler+0x1c4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	f102 0308 	add.w	r3, r2, #8
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	3208      	adds	r2, #8
 80041e6:	e842 3100 	strex	r1, r3, [r2]
 80041ea:	2900      	cmp	r1, #0
 80041ec:	d1f3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x1d6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	f102 0308 	add.w	r3, r2, #8
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	3208      	adds	r2, #8
 80041fe:	e842 3100 	strex	r1, r3, [r2]
 8004202:	2900      	cmp	r1, #0
 8004204:	d1f3      	bne.n	80041ee <HAL_UART_IRQHandler+0x1ee>
          huart->RxState = HAL_UART_STATE_READY;
 8004206:	2320      	movs	r3, #32
 8004208:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	2300      	movs	r3, #0
 800420c:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	e852 3f00 	ldrex	r3, [r2]
 8004214:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	e842 3100 	strex	r1, r3, [r2]
 800421c:	2900      	cmp	r1, #0
 800421e:	d1f6      	bne.n	800420e <HAL_UART_IRQHandler+0x20e>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004220:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004222:	f7fd fe97 	bl	8001f54 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004226:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800422a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800422e:	1ac9      	subs	r1, r1, r3
 8004230:	b289      	uxth	r1, r1
 8004232:	4620      	mov	r0, r4
 8004234:	f7ff fee2 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 8004238:	e710      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800423a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800423e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004242:	1ac9      	subs	r1, r1, r3
 8004244:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004246:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800424a:	b29b      	uxth	r3, r3
          && (nb_rx_data > 0U))
 800424c:	2900      	cmp	r1, #0
 800424e:	f43f af05 	beq.w	800405c <HAL_UART_IRQHandler+0x5c>
 8004252:	2b00      	cmp	r3, #0
 8004254:	f43f af02 	beq.w	800405c <HAL_UART_IRQHandler+0x5c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004258:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	e852 3f00 	ldrex	r3, [r2]
 800425e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	e842 3000 	strex	r0, r3, [r2]
 8004266:	2800      	cmp	r0, #0
 8004268:	d1f6      	bne.n	8004258 <HAL_UART_IRQHandler+0x258>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	f102 0308 	add.w	r3, r2, #8
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	3208      	adds	r2, #8
 800427a:	e842 3000 	strex	r0, r3, [r2]
 800427e:	2800      	cmp	r0, #0
 8004280:	d1f3      	bne.n	800426a <HAL_UART_IRQHandler+0x26a>
        huart->RxState = HAL_UART_STATE_READY;
 8004282:	2320      	movs	r3, #32
 8004284:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	2300      	movs	r3, #0
 8004288:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800428a:	6663      	str	r3, [r4, #100]	; 0x64
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	e852 3f00 	ldrex	r3, [r2]
 8004292:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	e842 3000 	strex	r0, r3, [r2]
 800429a:	2800      	cmp	r0, #0
 800429c:	d1f6      	bne.n	800428c <HAL_UART_IRQHandler+0x28c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800429e:	4620      	mov	r0, r4
 80042a0:	f7ff feac 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 80042a4:	e6da      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
    if (huart->TxISR != NULL)
 80042a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f43f aed7 	beq.w	800405c <HAL_UART_IRQHandler+0x5c>
      huart->TxISR(huart);
 80042ae:	4620      	mov	r0, r4
 80042b0:	4798      	blx	r3
 80042b2:	e6d3      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	e852 3f00 	ldrex	r3, [r2]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	e842 3100 	strex	r1, r3, [r2]
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d1f6      	bne.n	80042b4 <HAL_UART_IRQHandler+0x2b4>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c6:	2320      	movs	r3, #32
 80042c8:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7ff fe88 	bl	8003fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d4:	e6c2      	b.n	800405c <HAL_UART_IRQHandler+0x5c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042d6:	f013 0f01 	tst.w	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_IRQHandler+0x2e0>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042dc:	2100      	movs	r1, #0
 80042de:	e6d4      	b.n	800408a <HAL_UART_IRQHandler+0x8a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80042e4:	f47f aec1 	bne.w	800406a <HAL_UART_IRQHandler+0x6a>
 80042e8:	e6ca      	b.n	8004080 <HAL_UART_IRQHandler+0x80>
 80042ea:	bf00      	nop
 80042ec:	04000120 	.word	0x04000120
 80042f0:	08003fe9 	.word	0x08003fe9

080042f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042f4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80042f8:	2b22      	cmp	r3, #34	; 0x22
 80042fa:	d005      	beq.n	8004308 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042fc:	6802      	ldr	r2, [r0, #0]
 80042fe:	6993      	ldr	r3, [r2, #24]
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	6193      	str	r3, [r2, #24]
  }
}
 8004306:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004308:	6803      	ldr	r3, [r0, #0]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800430c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800430e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
 8004312:	400b      	ands	r3, r1
 8004314:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004316:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004318:	3301      	adds	r3, #1
 800431a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800431c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004320:	3b01      	subs	r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8004328:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e9      	bne.n	8004306 <UART_RxISR_8BIT+0x12>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	e852 3f00 	ldrex	r3, [r2]
 8004338:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	e842 3100 	strex	r1, r3, [r2]
 8004340:	2900      	cmp	r1, #0
 8004342:	d1f6      	bne.n	8004332 <UART_RxISR_8BIT+0x3e>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	f102 0308 	add.w	r3, r2, #8
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	3208      	adds	r2, #8
 8004354:	e842 3100 	strex	r1, r3, [r2]
 8004358:	2900      	cmp	r1, #0
 800435a:	d1f3      	bne.n	8004344 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800435c:	2320      	movs	r3, #32
 800435e:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004366:	2b01      	cmp	r3, #1
 8004368:	d116      	bne.n	8004398 <UART_RxISR_8BIT+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	2300      	movs	r3, #0
 800436c:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	e852 3f00 	ldrex	r3, [r2]
 8004374:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	e842 3100 	strex	r1, r3, [r2]
 800437c:	2900      	cmp	r1, #0
 800437e:	d1f6      	bne.n	800436e <UART_RxISR_8BIT+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004380:	6803      	ldr	r3, [r0, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	f012 0f10 	tst.w	r2, #16
 8004388:	d001      	beq.n	800438e <UART_RxISR_8BIT+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800438a:	2210      	movs	r2, #16
 800438c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8004392:	f7ff fe33 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 8004396:	e7b6      	b.n	8004306 <UART_RxISR_8BIT+0x12>
        HAL_UART_RxCpltCallback(huart);
 8004398:	f7fc ff50 	bl	800123c <HAL_UART_RxCpltCallback>
 800439c:	e7b3      	b.n	8004306 <UART_RxISR_8BIT+0x12>

0800439e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800439e:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80043a2:	2b22      	cmp	r3, #34	; 0x22
 80043a4:	d005      	beq.n	80043b2 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043a6:	6802      	ldr	r2, [r0, #0]
 80043a8:	6993      	ldr	r3, [r2, #24]
 80043aa:	f043 0308 	orr.w	r3, r3, #8
 80043ae:	6193      	str	r3, [r2, #24]
  }
}
 80043b0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b2:	6803      	ldr	r3, [r0, #0]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80043b8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80043bc:	400b      	ands	r3, r1
 80043be:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80043c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80043c2:	3302      	adds	r3, #2
 80043c4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80043c6:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80043d2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e9      	bne.n	80043b0 <UART_RxISR_16BIT+0x12>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	e852 3f00 	ldrex	r3, [r2]
 80043e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	e842 3100 	strex	r1, r3, [r2]
 80043ea:	2900      	cmp	r1, #0
 80043ec:	d1f6      	bne.n	80043dc <UART_RxISR_16BIT+0x3e>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	f102 0308 	add.w	r3, r2, #8
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	3208      	adds	r2, #8
 80043fe:	e842 3100 	strex	r1, r3, [r2]
 8004402:	2900      	cmp	r1, #0
 8004404:	d1f3      	bne.n	80043ee <UART_RxISR_16BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8004406:	2320      	movs	r3, #32
 8004408:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004410:	2b01      	cmp	r3, #1
 8004412:	d116      	bne.n	8004442 <UART_RxISR_16BIT+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004414:	2300      	movs	r3, #0
 8004416:	6603      	str	r3, [r0, #96]	; 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	e852 3f00 	ldrex	r3, [r2]
 800441e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	e842 3100 	strex	r1, r3, [r2]
 8004426:	2900      	cmp	r1, #0
 8004428:	d1f6      	bne.n	8004418 <UART_RxISR_16BIT+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800442a:	6803      	ldr	r3, [r0, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	f012 0f10 	tst.w	r2, #16
 8004432:	d001      	beq.n	8004438 <UART_RxISR_16BIT+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004434:	2210      	movs	r2, #16
 8004436:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004438:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800443c:	f7ff fdde 	bl	8003ffc <HAL_UARTEx_RxEventCallback>
 8004440:	e7b6      	b.n	80043b0 <UART_RxISR_16BIT+0x12>
        HAL_UART_RxCpltCallback(huart);
 8004442:	f7fc fefb 	bl	800123c <HAL_UART_RxCpltCallback>
 8004446:	e7b3      	b.n	80043b0 <UART_RxISR_16BIT+0x12>

08004448 <UART_SetConfig>:
{
 8004448:	b510      	push	{r4, lr}
 800444a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800444c:	6801      	ldr	r1, [r0, #0]
 800444e:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004450:	68a3      	ldr	r3, [r4, #8]
 8004452:	6922      	ldr	r2, [r4, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	6962      	ldr	r2, [r4, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	69e2      	ldr	r2, [r4, #28]
 800445c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800445e:	4ab4      	ldr	r2, [pc, #720]	; (8004730 <UART_SetConfig+0x2e8>)
 8004460:	4002      	ands	r2, r0
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6853      	ldr	r3, [r2, #4]
 800446a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446e:	68e1      	ldr	r1, [r4, #12]
 8004470:	430b      	orrs	r3, r1
 8004472:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004474:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004476:	6821      	ldr	r1, [r4, #0]
 8004478:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800447a:	6a20      	ldr	r0, [r4, #32]
 800447c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800447e:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	4aaa      	ldr	r2, [pc, #680]	; (8004734 <UART_SetConfig+0x2ec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d019      	beq.n	80044c2 <UART_SetConfig+0x7a>
 800448e:	4aaa      	ldr	r2, [pc, #680]	; (8004738 <UART_SetConfig+0x2f0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d024      	beq.n	80044de <UART_SetConfig+0x96>
 8004494:	4aa9      	ldr	r2, [pc, #676]	; (800473c <UART_SetConfig+0x2f4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d038      	beq.n	800450c <UART_SetConfig+0xc4>
 800449a:	4aa9      	ldr	r2, [pc, #676]	; (8004740 <UART_SetConfig+0x2f8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d058      	beq.n	8004552 <UART_SetConfig+0x10a>
 80044a0:	4aa8      	ldr	r2, [pc, #672]	; (8004744 <UART_SetConfig+0x2fc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d069      	beq.n	800457a <UART_SetConfig+0x132>
 80044a6:	4aa8      	ldr	r2, [pc, #672]	; (8004748 <UART_SetConfig+0x300>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f000 808b 	beq.w	80045c4 <UART_SetConfig+0x17c>
 80044ae:	4aa7      	ldr	r2, [pc, #668]	; (800474c <UART_SetConfig+0x304>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	f000 809e 	beq.w	80045f2 <UART_SetConfig+0x1aa>
 80044b6:	4aa6      	ldr	r2, [pc, #664]	; (8004750 <UART_SetConfig+0x308>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	f000 80b1 	beq.w	8004620 <UART_SetConfig+0x1d8>
        ret = HAL_ERROR;
 80044be:	2001      	movs	r0, #1
 80044c0:	e14f      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c2:	4ba4      	ldr	r3, [pc, #656]	; (8004754 <UART_SetConfig+0x30c>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	f200 8122 	bhi.w	8004716 <UART_SetConfig+0x2ce>
 80044d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044d6:	00bc      	.short	0x00bc
 80044d8:	014a0029 	.word	0x014a0029
 80044dc:	0034      	.short	0x0034
 80044de:	4b9d      	ldr	r3, [pc, #628]	; (8004754 <UART_SetConfig+0x30c>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	f200 8116 	bhi.w	800471a <UART_SetConfig+0x2d2>
 80044ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044f2:	00cb      	.short	0x00cb
 80044f4:	01140114 	.word	0x01140114
 80044f8:	001b0114 	.word	0x001b0114
 80044fc:	01140114 	.word	0x01140114
 8004500:	013c0114 	.word	0x013c0114
 8004504:	01140114 	.word	0x01140114
 8004508:	00260114 	.word	0x00260114
 800450c:	4b91      	ldr	r3, [pc, #580]	; (8004754 <UART_SetConfig+0x30c>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004516:	2b20      	cmp	r3, #32
 8004518:	f000 8127 	beq.w	800476a <UART_SetConfig+0x322>
 800451c:	d80d      	bhi.n	800453a <UART_SetConfig+0xf2>
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 812f 	beq.w	8004782 <UART_SetConfig+0x33a>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d106      	bne.n	8004536 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004528:	69e3      	ldr	r3, [r4, #28]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	d038      	beq.n	80045a2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8004530:	f7fe fc80 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
        break;
 8004534:	e0d5      	b.n	80046e2 <UART_SetConfig+0x29a>
        ret = HAL_ERROR;
 8004536:	2001      	movs	r0, #1
 8004538:	e113      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453a:	2b30      	cmp	r3, #48	; 0x30
 800453c:	d107      	bne.n	800454e <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453e:	69e3      	ldr	r3, [r4, #28]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	f000 80c8 	beq.w	80046d8 <UART_SetConfig+0x290>
        pclk = (uint32_t) LSE_VALUE;
 8004548:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800454c:	e0cb      	b.n	80046e6 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 800454e:	2001      	movs	r0, #1
 8004550:	e107      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004552:	4b80      	ldr	r3, [pc, #512]	; (8004754 <UART_SetConfig+0x30c>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	f000 8104 	beq.w	800476a <UART_SetConfig+0x322>
 8004562:	d806      	bhi.n	8004572 <UART_SetConfig+0x12a>
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 810c 	beq.w	8004782 <UART_SetConfig+0x33a>
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d0dc      	beq.n	8004528 <UART_SetConfig+0xe0>
        ret = HAL_ERROR;
 800456e:	2001      	movs	r0, #1
 8004570:	e0f7      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004572:	2bc0      	cmp	r3, #192	; 0xc0
 8004574:	d0e3      	beq.n	800453e <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8004576:	2001      	movs	r0, #1
 8004578:	e0f3      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <UART_SetConfig+0x30c>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004588:	f000 80f5 	beq.w	8004776 <UART_SetConfig+0x32e>
 800458c:	d80e      	bhi.n	80045ac <UART_SetConfig+0x164>
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80f7 	beq.w	8004782 <UART_SetConfig+0x33a>
 8004594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004598:	d106      	bne.n	80045a8 <UART_SetConfig+0x160>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459a:	69e3      	ldr	r3, [r4, #28]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	d1c6      	bne.n	8004530 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fc47 	bl	8002e34 <HAL_RCC_GetSysClockFreq>
        break;
 80045a6:	e076      	b.n	8004696 <UART_SetConfig+0x24e>
        ret = HAL_ERROR;
 80045a8:	2001      	movs	r0, #1
 80045aa:	e0da      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b0:	d106      	bne.n	80045c0 <UART_SetConfig+0x178>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b2:	69e0      	ldr	r0, [r4, #28]
 80045b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045b8:	d06f      	beq.n	800469a <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 80045ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80045be:	e092      	b.n	80046e6 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 80045c0:	2001      	movs	r0, #1
 80045c2:	e0ce      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c4:	4b63      	ldr	r3, [pc, #396]	; (8004754 <UART_SetConfig+0x30c>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	f000 80d0 	beq.w	8004776 <UART_SetConfig+0x32e>
 80045d6:	d807      	bhi.n	80045e8 <UART_SetConfig+0x1a0>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80ef 	beq.w	80047bc <UART_SetConfig+0x374>
 80045de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e2:	d0da      	beq.n	800459a <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
 80045e6:	e0bc      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ec:	d0e1      	beq.n	80045b2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80045ee:	2001      	movs	r0, #1
 80045f0:	e0b7      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f2:	4b58      	ldr	r3, [pc, #352]	; (8004754 <UART_SetConfig+0x30c>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004600:	f000 80b9 	beq.w	8004776 <UART_SetConfig+0x32e>
 8004604:	d807      	bhi.n	8004616 <UART_SetConfig+0x1ce>
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80bb 	beq.w	8004782 <UART_SetConfig+0x33a>
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d0c3      	beq.n	800459a <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e0a5      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800461a:	d0ca      	beq.n	80045b2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800461c:	2001      	movs	r0, #1
 800461e:	e0a0      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004620:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <UART_SetConfig+0x30c>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462e:	f000 80a2 	beq.w	8004776 <UART_SetConfig+0x32e>
 8004632:	d807      	bhi.n	8004644 <UART_SetConfig+0x1fc>
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a4 	beq.w	8004782 <UART_SetConfig+0x33a>
 800463a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463e:	d0ac      	beq.n	800459a <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8004640:	2001      	movs	r0, #1
 8004642:	e08e      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004644:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004648:	d0b3      	beq.n	80045b2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800464a:	2001      	movs	r0, #1
 800464c:	e089      	b.n	8004762 <UART_SetConfig+0x31a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800464e:	2301      	movs	r3, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	69e2      	ldr	r2, [r4, #28]
 8004652:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004656:	f040 8099 	bne.w	800478c <UART_SetConfig+0x344>
    switch (clocksource)
 800465a:	2b08      	cmp	r3, #8
 800465c:	d85f      	bhi.n	800471e <UART_SetConfig+0x2d6>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x21c>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004693 	.word	0x08004693
 8004668:	080046c7 	.word	0x080046c7
 800466c:	080046cd 	.word	0x080046cd
 8004670:	0800471f 	.word	0x0800471f
 8004674:	080045a3 	.word	0x080045a3
 8004678:	0800471f 	.word	0x0800471f
 800467c:	0800471f 	.word	0x0800471f
 8004680:	0800471f 	.word	0x0800471f
 8004684:	0800468d 	.word	0x0800468d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004688:	2300      	movs	r3, #0
 800468a:	e7e1      	b.n	8004650 <UART_SetConfig+0x208>
        pclk = (uint32_t) LSE_VALUE;
 800468c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004690:	e003      	b.n	800469a <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004692:	f7fe fced 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004696:	2800      	cmp	r0, #0
 8004698:	d043      	beq.n	8004722 <UART_SetConfig+0x2da>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	0853      	lsrs	r3, r2, #1
 800469e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80046a2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a6:	f1a3 0110 	sub.w	r1, r3, #16
 80046aa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80046ae:	4291      	cmp	r1, r2
 80046b0:	d839      	bhi.n	8004726 <UART_SetConfig+0x2de>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b2:	f023 020f 	bic.w	r2, r3, #15
 80046b6:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80046b8:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80046be:	4313      	orrs	r3, r2
 80046c0:	60cb      	str	r3, [r1, #12]
 80046c2:	2000      	movs	r0, #0
 80046c4:	e04d      	b.n	8004762 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c6:	f7fe fce3 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
        break;
 80046ca:	e7e4      	b.n	8004696 <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046cc:	4822      	ldr	r0, [pc, #136]	; (8004758 <UART_SetConfig+0x310>)
 80046ce:	e7e4      	b.n	800469a <UART_SetConfig+0x252>
 80046d0:	4821      	ldr	r0, [pc, #132]	; (8004758 <UART_SetConfig+0x310>)
 80046d2:	e7e2      	b.n	800469a <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4820      	ldr	r0, [pc, #128]	; (8004758 <UART_SetConfig+0x310>)
 80046d6:	e7e0      	b.n	800469a <UART_SetConfig+0x252>
        pclk = (uint32_t) LSE_VALUE;
 80046d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80046dc:	e7dd      	b.n	800469a <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046de:	f7fe fcc7 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d03a      	beq.n	800475c <UART_SetConfig+0x314>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80046ec:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	f1a0 0210 	sub.w	r2, r0, #16
 80046f4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d831      	bhi.n	8004760 <UART_SetConfig+0x318>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	b280      	uxth	r0, r0
 8004700:	60d8      	str	r0, [r3, #12]
 8004702:	2000      	movs	r0, #0
 8004704:	e02d      	b.n	8004762 <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004706:	f7fe fcc3 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
        break;
 800470a:	e7ea      	b.n	80046e2 <UART_SetConfig+0x29a>
        pclk = (uint32_t) LSE_VALUE;
 800470c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004710:	e7e9      	b.n	80046e6 <UART_SetConfig+0x29e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004712:	4811      	ldr	r0, [pc, #68]	; (8004758 <UART_SetConfig+0x310>)
 8004714:	e7e7      	b.n	80046e6 <UART_SetConfig+0x29e>
        ret = HAL_ERROR;
 8004716:	2001      	movs	r0, #1
 8004718:	e023      	b.n	8004762 <UART_SetConfig+0x31a>
 800471a:	2001      	movs	r0, #1
 800471c:	e021      	b.n	8004762 <UART_SetConfig+0x31a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471e:	2001      	movs	r0, #1
 8004720:	e01f      	b.n	8004762 <UART_SetConfig+0x31a>
 8004722:	2000      	movs	r0, #0
 8004724:	e01d      	b.n	8004762 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8004726:	2001      	movs	r0, #1
 8004728:	e01b      	b.n	8004762 <UART_SetConfig+0x31a>
 800472a:	2001      	movs	r0, #1
 800472c:	e019      	b.n	8004762 <UART_SetConfig+0x31a>
 800472e:	bf00      	nop
 8004730:	efff69f3 	.word	0xefff69f3
 8004734:	40011000 	.word	0x40011000
 8004738:	40004400 	.word	0x40004400
 800473c:	40004800 	.word	0x40004800
 8004740:	40004c00 	.word	0x40004c00
 8004744:	40005000 	.word	0x40005000
 8004748:	40011400 	.word	0x40011400
 800474c:	40007800 	.word	0x40007800
 8004750:	40007c00 	.word	0x40007c00
 8004754:	40023800 	.word	0x40023800
 8004758:	00f42400 	.word	0x00f42400
 800475c:	2000      	movs	r0, #0
 800475e:	e000      	b.n	8004762 <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8004760:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8004766:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8004768:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476a:	69e3      	ldr	r3, [r4, #28]
 800476c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004770:	d0ae      	beq.n	80046d0 <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 8004772:	4815      	ldr	r0, [pc, #84]	; (80047c8 <UART_SetConfig+0x380>)
 8004774:	e7b7      	b.n	80046e6 <UART_SetConfig+0x29e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004776:	69e3      	ldr	r3, [r4, #28]
 8004778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800477c:	d0aa      	beq.n	80046d4 <UART_SetConfig+0x28c>
 800477e:	4812      	ldr	r0, [pc, #72]	; (80047c8 <UART_SetConfig+0x380>)
 8004780:	e7b1      	b.n	80046e6 <UART_SetConfig+0x29e>
 8004782:	69e3      	ldr	r3, [r4, #28]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d083      	beq.n	8004692 <UART_SetConfig+0x24a>
 800478a:	2300      	movs	r3, #0
    switch (clocksource)
 800478c:	2b08      	cmp	r3, #8
 800478e:	d8cc      	bhi.n	800472a <UART_SetConfig+0x2e2>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0x350>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080046df 	.word	0x080046df
 800479c:	08004707 	.word	0x08004707
 80047a0:	08004713 	.word	0x08004713
 80047a4:	0800472b 	.word	0x0800472b
 80047a8:	08004531 	.word	0x08004531
 80047ac:	0800472b 	.word	0x0800472b
 80047b0:	0800472b 	.word	0x0800472b
 80047b4:	0800472b 	.word	0x0800472b
 80047b8:	0800470d 	.word	0x0800470d
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047bc:	69e3      	ldr	r3, [r4, #28]
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c2:	d080      	beq.n	80046c6 <UART_SetConfig+0x27e>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e7e1      	b.n	800478c <UART_SetConfig+0x344>
 80047c8:	00f42400 	.word	0x00f42400

080047cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047ce:	f013 0f01 	tst.w	r3, #1
 80047d2:	d006      	beq.n	80047e2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d4:	6802      	ldr	r2, [r0, #0]
 80047d6:	6853      	ldr	r3, [r2, #4]
 80047d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80047de:	430b      	orrs	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047e4:	f013 0f02 	tst.w	r3, #2
 80047e8:	d006      	beq.n	80047f8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ea:	6802      	ldr	r2, [r0, #0]
 80047ec:	6853      	ldr	r3, [r2, #4]
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047fa:	f013 0f04 	tst.w	r3, #4
 80047fe:	d006      	beq.n	800480e <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004800:	6802      	ldr	r2, [r0, #0]
 8004802:	6853      	ldr	r3, [r2, #4]
 8004804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004808:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800480a:	430b      	orrs	r3, r1
 800480c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004810:	f013 0f08 	tst.w	r3, #8
 8004814:	d006      	beq.n	8004824 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004816:	6802      	ldr	r2, [r0, #0]
 8004818:	6853      	ldr	r3, [r2, #4]
 800481a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800481e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004820:	430b      	orrs	r3, r1
 8004822:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004824:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004826:	f013 0f10 	tst.w	r3, #16
 800482a:	d006      	beq.n	800483a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800482c:	6802      	ldr	r2, [r0, #0]
 800482e:	6893      	ldr	r3, [r2, #8]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004836:	430b      	orrs	r3, r1
 8004838:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800483a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800483c:	f013 0f20 	tst.w	r3, #32
 8004840:	d006      	beq.n	8004850 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004842:	6802      	ldr	r2, [r0, #0]
 8004844:	6893      	ldr	r3, [r2, #8]
 8004846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800484c:	430b      	orrs	r3, r1
 800484e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004850:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004852:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004858:	6802      	ldr	r2, [r0, #0]
 800485a:	6853      	ldr	r3, [r2, #4]
 800485c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004860:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004862:	430b      	orrs	r3, r1
 8004864:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004866:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486c:	d00b      	beq.n	8004886 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004870:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004874:	d006      	beq.n	8004884 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	6802      	ldr	r2, [r0, #0]
 8004878:	6853      	ldr	r3, [r2, #4]
 800487a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800487e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004880:	430b      	orrs	r3, r1
 8004882:	6053      	str	r3, [r2, #4]
}
 8004884:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004886:	6802      	ldr	r2, [r0, #0]
 8004888:	6853      	ldr	r3, [r2, #4]
 800488a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800488e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004890:	430b      	orrs	r3, r1
 8004892:	6053      	str	r3, [r2, #4]
 8004894:	e7eb      	b.n	800486e <UART_AdvFeatureConfig+0xa2>

08004896 <UART_WaitOnFlagUntilTimeout>:
{
 8004896:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489a:	4680      	mov	r8, r0
 800489c:	460e      	mov	r6, r1
 800489e:	4615      	mov	r5, r2
 80048a0:	4699      	mov	r9, r3
 80048a2:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a4:	f8d8 2000 	ldr.w	r2, [r8]
 80048a8:	69d4      	ldr	r4, [r2, #28]
 80048aa:	ea36 0304 	bics.w	r3, r6, r4
 80048ae:	bf0c      	ite	eq
 80048b0:	2401      	moveq	r4, #1
 80048b2:	2400      	movne	r4, #0
 80048b4:	42ac      	cmp	r4, r5
 80048b6:	d15a      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80048bc:	d0f4      	beq.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048be:	f7fd fac9 	bl	8001e54 <HAL_GetTick>
 80048c2:	eba0 0009 	sub.w	r0, r0, r9
 80048c6:	42b8      	cmp	r0, r7
 80048c8:	d830      	bhi.n	800492c <UART_WaitOnFlagUntilTimeout+0x96>
 80048ca:	b37f      	cbz	r7, 800492c <UART_WaitOnFlagUntilTimeout+0x96>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048cc:	f8d8 3000 	ldr.w	r3, [r8]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f012 0f04 	tst.w	r2, #4
 80048d6:	d0e5      	beq.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80048de:	d0e1      	beq.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048e4:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048e6:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	e852 3f00 	ldrex	r3, [r2]
 80048ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	e842 3100 	strex	r1, r3, [r2]
 80048f6:	2900      	cmp	r1, #0
 80048f8:	d1f5      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x50>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fa:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	f102 0308 	add.w	r3, r2, #8
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	3208      	adds	r2, #8
 800490c:	e842 3100 	strex	r1, r3, [r2]
 8004910:	2900      	cmp	r1, #0
 8004912:	d1f2      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8004914:	2320      	movs	r3, #32
 8004916:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800491a:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491e:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8004922:	2300      	movs	r3, #0
 8004924:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
          return HAL_TIMEOUT;
 8004928:	2003      	movs	r0, #3
 800492a:	e021      	b.n	8004970 <UART_WaitOnFlagUntilTimeout+0xda>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	e852 3f00 	ldrex	r3, [r2]
 8004934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	e842 3100 	strex	r1, r3, [r2]
 800493c:	2900      	cmp	r1, #0
 800493e:	d1f5      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0x96>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004940:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	f102 0308 	add.w	r3, r2, #8
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	3208      	adds	r2, #8
 8004952:	e842 3100 	strex	r1, r3, [r2]
 8004956:	2900      	cmp	r1, #0
 8004958:	d1f2      	bne.n	8004940 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 800495a:	2320      	movs	r3, #32
 800495c:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004960:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
        return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
 800496c:	e000      	b.n	8004970 <UART_WaitOnFlagUntilTimeout+0xda>
  return HAL_OK;
 800496e:	2000      	movs	r0, #0
}
 8004970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004974 <HAL_UART_Transmit>:
{
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800497c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800497e:	2b20      	cmp	r3, #32
 8004980:	d15d      	bne.n	8004a3e <HAL_UART_Transmit+0xca>
 8004982:	4604      	mov	r4, r0
 8004984:	460d      	mov	r5, r1
 8004986:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004988:	2900      	cmp	r1, #0
 800498a:	d05c      	beq.n	8004a46 <HAL_UART_Transmit+0xd2>
 800498c:	2a00      	cmp	r2, #0
 800498e:	d05a      	beq.n	8004a46 <HAL_UART_Transmit+0xd2>
    __HAL_LOCK(huart);
 8004990:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004994:	2b01      	cmp	r3, #1
 8004996:	d058      	beq.n	8004a4a <HAL_UART_Transmit+0xd6>
 8004998:	2301      	movs	r3, #1
 800499a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a4:	2321      	movs	r3, #33	; 0x21
 80049a6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80049a8:	f7fd fa54 	bl	8001e54 <HAL_GetTick>
 80049ac:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 80049ae:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 80049b2:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b6:	68a3      	ldr	r3, [r4, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d00d      	beq.n	80049da <HAL_UART_Transmit+0x66>
      pdata16bits = NULL;
 80049be:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80049c2:	2300      	movs	r3, #0
 80049c4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80049c8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b35b      	cbz	r3, 8004a28 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d0:	f04f 0900 	mov.w	r9, #0
 80049d4:	f04f 0880 	mov.w	r8, #128	; 0x80
 80049d8:	e017      	b.n	8004a0a <HAL_UART_Transmit+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	b913      	cbnz	r3, 80049e4 <HAL_UART_Transmit+0x70>
      pdata16bits = (const uint16_t *) pData;
 80049de:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 80049e0:	2500      	movs	r5, #0
 80049e2:	e7ee      	b.n	80049c2 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 80049e4:	f04f 0a00 	mov.w	sl, #0
 80049e8:	e7eb      	b.n	80049c2 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	f83a 3b02 	ldrh.w	r3, [sl], #2
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80049f6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80049fa:	3a01      	subs	r2, #1
 80049fc:	b292      	uxth	r2, r2
 80049fe:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a02:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b173      	cbz	r3, 8004a28 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	9600      	str	r6, [sp, #0]
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	464a      	mov	r2, r9
 8004a10:	4641      	mov	r1, r8
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff ff3f 	bl	8004896 <UART_WaitOnFlagUntilTimeout>
 8004a18:	b9c8      	cbnz	r0, 8004a4e <HAL_UART_Transmit+0xda>
      if (pdata8bits == NULL)
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	d0e5      	beq.n	80049ea <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004a24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a26:	e7e6      	b.n	80049f6 <HAL_UART_Transmit+0x82>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a28:	9600      	str	r6, [sp, #0]
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2140      	movs	r1, #64	; 0x40
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff ff30 	bl	8004896 <UART_WaitOnFlagUntilTimeout>
 8004a36:	b960      	cbnz	r0, 8004a52 <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8004a3e:	2002      	movs	r0, #2
}
 8004a40:	b002      	add	sp, #8
 8004a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004a46:	2001      	movs	r0, #1
 8004a48:	e7fa      	b.n	8004a40 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004a4a:	2002      	movs	r0, #2
 8004a4c:	e7f8      	b.n	8004a40 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 8004a4e:	2003      	movs	r0, #3
 8004a50:	e7f6      	b.n	8004a40 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8004a52:	2003      	movs	r0, #3
 8004a54:	e7f4      	b.n	8004a40 <HAL_UART_Transmit+0xcc>

08004a56 <UART_CheckIdleState>:
{
 8004a56:	b510      	push	{r4, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004a62:	f7fd f9f7 	bl	8001e54 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f013 0f08 	tst.w	r3, #8
 8004a6e:	d108      	bne.n	8004a82 <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	2320      	movs	r3, #32
 8004a72:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	2000      	movs	r0, #0
 8004a78:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004a7a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ff00 	bl	8004896 <UART_WaitOnFlagUntilTimeout>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d0ea      	beq.n	8004a70 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004a9a:	2003      	movs	r0, #3
 8004a9c:	e7ef      	b.n	8004a7e <UART_CheckIdleState+0x28>

08004a9e <HAL_UART_Init>:
  if (huart == NULL)
 8004a9e:	b368      	cbz	r0, 8004afc <HAL_UART_Init+0x5e>
{
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004aa6:	b303      	cbz	r3, 8004aea <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8004aa8:	2324      	movs	r3, #36	; 0x24
 8004aaa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004aac:	6822      	ldr	r2, [r4, #0]
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fcc6 	bl	8004448 <UART_SetConfig>
 8004abc:	2801      	cmp	r0, #1
 8004abe:	d013      	beq.n	8004ae8 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac2:	b9bb      	cbnz	r3, 8004af4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	6853      	ldr	r3, [r2, #4]
 8004ac8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004acc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	6893      	ldr	r3, [r2, #8]
 8004ad2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004ad6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff ffb7 	bl	8004a56 <UART_CheckIdleState>
}
 8004ae8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004aea:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004aee:	f7fd f883 	bl	8001bf8 <HAL_UART_MspInit>
 8004af2:	e7d9      	b.n	8004aa8 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff fe69 	bl	80047cc <UART_AdvFeatureConfig>
 8004afa:	e7e3      	b.n	8004ac4 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8004afc:	2001      	movs	r0, #1
}
 8004afe:	4770      	bx	lr

08004b00 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 8004b00:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b02:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b06:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8004b0e:	6883      	ldr	r3, [r0, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d006      	beq.n	8004b24 <UART_Start_Receive_IT+0x24>
 8004b16:	b9a3      	cbnz	r3, 8004b42 <UART_Start_Receive_IT+0x42>
 8004b18:	6903      	ldr	r3, [r0, #16]
 8004b1a:	b973      	cbnz	r3, 8004b3a <UART_Start_Receive_IT+0x3a>
 8004b1c:	23ff      	movs	r3, #255	; 0xff
 8004b1e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004b22:	e014      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	b923      	cbnz	r3, 8004b32 <UART_Start_Receive_IT+0x32>
 8004b28:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004b2c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004b30:	e00d      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
 8004b32:	23ff      	movs	r3, #255	; 0xff
 8004b34:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004b38:	e009      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
 8004b3a:	237f      	movs	r3, #127	; 0x7f
 8004b3c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004b40:	e005      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
 8004b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b46:	d028      	beq.n	8004b9a <UART_Start_Receive_IT+0x9a>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b54:	2322      	movs	r3, #34	; 0x22
 8004b56:	67c3      	str	r3, [r0, #124]	; 0x7c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	f102 0308 	add.w	r3, r2, #8
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	3208      	adds	r2, #8
 8004b68:	e842 3100 	strex	r1, r3, [r2]
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	d1f3      	bne.n	8004b58 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	6883      	ldr	r3, [r0, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d01a      	beq.n	8004bae <UART_Start_Receive_IT+0xae>
    huart->RxISR = UART_RxISR_8BIT;
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <UART_Start_Receive_IT+0xe0>)
 8004b7a:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b82:	6903      	ldr	r3, [r0, #16]
 8004b84:	b9d3      	cbnz	r3, 8004bbc <UART_Start_Receive_IT+0xbc>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	e852 3f00 	ldrex	r3, [r2]
 8004b8c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	e842 3100 	strex	r1, r3, [r2]
 8004b94:	2900      	cmp	r1, #0
 8004b96:	d1f6      	bne.n	8004b86 <UART_Start_Receive_IT+0x86>
 8004b98:	e019      	b.n	8004bce <UART_Start_Receive_IT+0xce>
  UART_MASK_COMPUTATION(huart);
 8004b9a:	6903      	ldr	r3, [r0, #16]
 8004b9c:	b91b      	cbnz	r3, 8004ba6 <UART_Start_Receive_IT+0xa6>
 8004b9e:	237f      	movs	r3, #127	; 0x7f
 8004ba0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004ba4:	e7d3      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
 8004ba6:	233f      	movs	r3, #63	; 0x3f
 8004ba8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004bac:	e7cf      	b.n	8004b4e <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bae:	6903      	ldr	r3, [r0, #16]
 8004bb0:	b17b      	cbz	r3, 8004bd2 <UART_Start_Receive_IT+0xd2>
    huart->RxISR = UART_RxISR_8BIT;
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <UART_Start_Receive_IT+0xe0>)
 8004bb4:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004bbc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	e852 3f00 	ldrex	r3, [r2]
 8004bc2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	e842 3100 	strex	r1, r3, [r2]
 8004bca:	2900      	cmp	r1, #0
 8004bcc:	d1f6      	bne.n	8004bbc <UART_Start_Receive_IT+0xbc>
}
 8004bce:	2000      	movs	r0, #0
 8004bd0:	4770      	bx	lr
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <UART_Start_Receive_IT+0xe4>)
 8004bd4:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bdc:	e7d3      	b.n	8004b86 <UART_Start_Receive_IT+0x86>
 8004bde:	bf00      	nop
 8004be0:	080042f5 	.word	0x080042f5
 8004be4:	0800439f 	.word	0x0800439f

08004be8 <HAL_UART_Receive_IT>:
{
 8004be8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bea:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d11b      	bne.n	8004c28 <HAL_UART_Receive_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	b1e1      	cbz	r1, 8004c2c <HAL_UART_Receive_IT+0x44>
 8004bf2:	b1da      	cbz	r2, 8004c2c <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8004bf4:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d019      	beq.n	8004c30 <HAL_UART_Receive_IT+0x48>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	2300      	movs	r3, #0
 8004c04:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c06:	6803      	ldr	r3, [r0, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_Receive_IT+0x3a>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c10:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c12:	e854 3f00 	ldrex	r3, [r4]
 8004c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	e844 3500 	strex	r5, r3, [r4]
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	d1f6      	bne.n	8004c10 <HAL_UART_Receive_IT+0x28>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c22:	f7ff ff6d 	bl	8004b00 <UART_Start_Receive_IT>
 8004c26:	e000      	b.n	8004c2a <HAL_UART_Receive_IT+0x42>
    return HAL_BUSY;
 8004c28:	2002      	movs	r0, #2
}
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	e7fc      	b.n	8004c2a <HAL_UART_Receive_IT+0x42>
    __HAL_LOCK(huart);
 8004c30:	2002      	movs	r0, #2
 8004c32:	e7fa      	b.n	8004c2a <HAL_UART_Receive_IT+0x42>

08004c34 <__errno>:
 8004c34:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <__errno+0x8>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000000c 	.word	0x2000000c

08004c40 <__libc_init_array>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4d0d      	ldr	r5, [pc, #52]	; (8004c78 <__libc_init_array+0x38>)
 8004c44:	4c0d      	ldr	r4, [pc, #52]	; (8004c7c <__libc_init_array+0x3c>)
 8004c46:	1b64      	subs	r4, r4, r5
 8004c48:	10a4      	asrs	r4, r4, #2
 8004c4a:	2600      	movs	r6, #0
 8004c4c:	42a6      	cmp	r6, r4
 8004c4e:	d109      	bne.n	8004c64 <__libc_init_array+0x24>
 8004c50:	4d0b      	ldr	r5, [pc, #44]	; (8004c80 <__libc_init_array+0x40>)
 8004c52:	4c0c      	ldr	r4, [pc, #48]	; (8004c84 <__libc_init_array+0x44>)
 8004c54:	f003 f802 	bl	8007c5c <_init>
 8004c58:	1b64      	subs	r4, r4, r5
 8004c5a:	10a4      	asrs	r4, r4, #2
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	42a6      	cmp	r6, r4
 8004c60:	d105      	bne.n	8004c6e <__libc_init_array+0x2e>
 8004c62:	bd70      	pop	{r4, r5, r6, pc}
 8004c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c68:	4798      	blx	r3
 8004c6a:	3601      	adds	r6, #1
 8004c6c:	e7ee      	b.n	8004c4c <__libc_init_array+0xc>
 8004c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c72:	4798      	blx	r3
 8004c74:	3601      	adds	r6, #1
 8004c76:	e7f2      	b.n	8004c5e <__libc_init_array+0x1e>
 8004c78:	0800809c 	.word	0x0800809c
 8004c7c:	0800809c 	.word	0x0800809c
 8004c80:	0800809c 	.word	0x0800809c
 8004c84:	080080a0 	.word	0x080080a0

08004c88 <memset>:
 8004c88:	4402      	add	r2, r0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <memset+0xa>
 8004c90:	4770      	bx	lr
 8004c92:	f803 1b01 	strb.w	r1, [r3], #1
 8004c96:	e7f9      	b.n	8004c8c <memset+0x4>

08004c98 <__cvt>:
 8004c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	ec55 4b10 	vmov	r4, r5, d0
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	bfbb      	ittet	lt
 8004caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cae:	461d      	movlt	r5, r3
 8004cb0:	2300      	movge	r3, #0
 8004cb2:	232d      	movlt	r3, #45	; 0x2d
 8004cb4:	700b      	strb	r3, [r1, #0]
 8004cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cbc:	4691      	mov	r9, r2
 8004cbe:	f023 0820 	bic.w	r8, r3, #32
 8004cc2:	bfbc      	itt	lt
 8004cc4:	4622      	movlt	r2, r4
 8004cc6:	4614      	movlt	r4, r2
 8004cc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ccc:	d005      	beq.n	8004cda <__cvt+0x42>
 8004cce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cd2:	d100      	bne.n	8004cd6 <__cvt+0x3e>
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	e000      	b.n	8004cdc <__cvt+0x44>
 8004cda:	2103      	movs	r1, #3
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	ab02      	add	r3, sp, #8
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	ec45 4b10 	vmov	d0, r4, r5
 8004ce8:	4653      	mov	r3, sl
 8004cea:	4632      	mov	r2, r6
 8004cec:	f000 fcec 	bl	80056c8 <_dtoa_r>
 8004cf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	d102      	bne.n	8004cfe <__cvt+0x66>
 8004cf8:	f019 0f01 	tst.w	r9, #1
 8004cfc:	d022      	beq.n	8004d44 <__cvt+0xac>
 8004cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d02:	eb07 0906 	add.w	r9, r7, r6
 8004d06:	d110      	bne.n	8004d2a <__cvt+0x92>
 8004d08:	783b      	ldrb	r3, [r7, #0]
 8004d0a:	2b30      	cmp	r3, #48	; 0x30
 8004d0c:	d10a      	bne.n	8004d24 <__cvt+0x8c>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2300      	movs	r3, #0
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fb fef7 	bl	8000b08 <__aeabi_dcmpeq>
 8004d1a:	b918      	cbnz	r0, 8004d24 <__cvt+0x8c>
 8004d1c:	f1c6 0601 	rsb	r6, r6, #1
 8004d20:	f8ca 6000 	str.w	r6, [sl]
 8004d24:	f8da 3000 	ldr.w	r3, [sl]
 8004d28:	4499      	add	r9, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	f7fb fee9 	bl	8000b08 <__aeabi_dcmpeq>
 8004d36:	b108      	cbz	r0, 8004d3c <__cvt+0xa4>
 8004d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d3c:	2230      	movs	r2, #48	; 0x30
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	454b      	cmp	r3, r9
 8004d42:	d307      	bcc.n	8004d54 <__cvt+0xbc>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d48:	1bdb      	subs	r3, r3, r7
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	b004      	add	sp, #16
 8004d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d54:	1c59      	adds	r1, r3, #1
 8004d56:	9103      	str	r1, [sp, #12]
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e7f0      	b.n	8004d3e <__cvt+0xa6>

08004d5c <__exponent>:
 8004d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2900      	cmp	r1, #0
 8004d62:	bfb8      	it	lt
 8004d64:	4249      	neglt	r1, r1
 8004d66:	f803 2b02 	strb.w	r2, [r3], #2
 8004d6a:	bfb4      	ite	lt
 8004d6c:	222d      	movlt	r2, #45	; 0x2d
 8004d6e:	222b      	movge	r2, #43	; 0x2b
 8004d70:	2909      	cmp	r1, #9
 8004d72:	7042      	strb	r2, [r0, #1]
 8004d74:	dd2a      	ble.n	8004dcc <__exponent+0x70>
 8004d76:	f10d 0407 	add.w	r4, sp, #7
 8004d7a:	46a4      	mov	ip, r4
 8004d7c:	270a      	movs	r7, #10
 8004d7e:	46a6      	mov	lr, r4
 8004d80:	460a      	mov	r2, r1
 8004d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d86:	fb07 1516 	mls	r5, r7, r6, r1
 8004d8a:	3530      	adds	r5, #48	; 0x30
 8004d8c:	2a63      	cmp	r2, #99	; 0x63
 8004d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d96:	4631      	mov	r1, r6
 8004d98:	dcf1      	bgt.n	8004d7e <__exponent+0x22>
 8004d9a:	3130      	adds	r1, #48	; 0x30
 8004d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8004da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004da4:	1c44      	adds	r4, r0, #1
 8004da6:	4629      	mov	r1, r5
 8004da8:	4561      	cmp	r1, ip
 8004daa:	d30a      	bcc.n	8004dc2 <__exponent+0x66>
 8004dac:	f10d 0209 	add.w	r2, sp, #9
 8004db0:	eba2 020e 	sub.w	r2, r2, lr
 8004db4:	4565      	cmp	r5, ip
 8004db6:	bf88      	it	hi
 8004db8:	2200      	movhi	r2, #0
 8004dba:	4413      	add	r3, r2
 8004dbc:	1a18      	subs	r0, r3, r0
 8004dbe:	b003      	add	sp, #12
 8004dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004dca:	e7ed      	b.n	8004da8 <__exponent+0x4c>
 8004dcc:	2330      	movs	r3, #48	; 0x30
 8004dce:	3130      	adds	r1, #48	; 0x30
 8004dd0:	7083      	strb	r3, [r0, #2]
 8004dd2:	70c1      	strb	r1, [r0, #3]
 8004dd4:	1d03      	adds	r3, r0, #4
 8004dd6:	e7f1      	b.n	8004dbc <__exponent+0x60>

08004dd8 <_printf_float>:
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	ed2d 8b02 	vpush	{d8}
 8004de0:	b08d      	sub	sp, #52	; 0x34
 8004de2:	460c      	mov	r4, r1
 8004de4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004de8:	4616      	mov	r6, r2
 8004dea:	461f      	mov	r7, r3
 8004dec:	4605      	mov	r5, r0
 8004dee:	f001 fa57 	bl	80062a0 <_localeconv_r>
 8004df2:	f8d0 a000 	ldr.w	sl, [r0]
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb fa0a 	bl	8000210 <strlen>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	9305      	str	r3, [sp, #20]
 8004e04:	f8d8 3000 	ldr.w	r3, [r8]
 8004e08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e0c:	3307      	adds	r3, #7
 8004e0e:	f023 0307 	bic.w	r3, r3, #7
 8004e12:	f103 0208 	add.w	r2, r3, #8
 8004e16:	f8c8 2000 	str.w	r2, [r8]
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e2a:	9307      	str	r3, [sp, #28]
 8004e2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e30:	ee08 0a10 	vmov	s16, r0
 8004e34:	4b9f      	ldr	r3, [pc, #636]	; (80050b4 <_printf_float+0x2dc>)
 8004e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	f7fb fe95 	bl	8000b6c <__aeabi_dcmpun>
 8004e42:	bb88      	cbnz	r0, 8004ea8 <_printf_float+0xd0>
 8004e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e48:	4b9a      	ldr	r3, [pc, #616]	; (80050b4 <_printf_float+0x2dc>)
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	f7fb fe6f 	bl	8000b30 <__aeabi_dcmple>
 8004e52:	bb48      	cbnz	r0, 8004ea8 <_printf_float+0xd0>
 8004e54:	2200      	movs	r2, #0
 8004e56:	2300      	movs	r3, #0
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fe5e 	bl	8000b1c <__aeabi_dcmplt>
 8004e60:	b110      	cbz	r0, 8004e68 <_printf_float+0x90>
 8004e62:	232d      	movs	r3, #45	; 0x2d
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e68:	4b93      	ldr	r3, [pc, #588]	; (80050b8 <_printf_float+0x2e0>)
 8004e6a:	4894      	ldr	r0, [pc, #592]	; (80050bc <_printf_float+0x2e4>)
 8004e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e70:	bf94      	ite	ls
 8004e72:	4698      	movls	r8, r3
 8004e74:	4680      	movhi	r8, r0
 8004e76:	2303      	movs	r3, #3
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	9b05      	ldr	r3, [sp, #20]
 8004e7c:	f023 0204 	bic.w	r2, r3, #4
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	f04f 0900 	mov.w	r9, #0
 8004e86:	9700      	str	r7, [sp, #0]
 8004e88:	4633      	mov	r3, r6
 8004e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f9d8 	bl	8005244 <_printf_common>
 8004e94:	3001      	adds	r0, #1
 8004e96:	f040 8090 	bne.w	8004fba <_printf_float+0x1e2>
 8004e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9e:	b00d      	add	sp, #52	; 0x34
 8004ea0:	ecbd 8b02 	vpop	{d8}
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fe5c 	bl	8000b6c <__aeabi_dcmpun>
 8004eb4:	b140      	cbz	r0, 8004ec8 <_printf_float+0xf0>
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfbc      	itt	lt
 8004ebc:	232d      	movlt	r3, #45	; 0x2d
 8004ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ec2:	487f      	ldr	r0, [pc, #508]	; (80050c0 <_printf_float+0x2e8>)
 8004ec4:	4b7f      	ldr	r3, [pc, #508]	; (80050c4 <_printf_float+0x2ec>)
 8004ec6:	e7d1      	b.n	8004e6c <_printf_float+0x94>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ece:	9206      	str	r2, [sp, #24]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	d13f      	bne.n	8004f54 <_printf_float+0x17c>
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	9b05      	ldr	r3, [sp, #20]
 8004eda:	6861      	ldr	r1, [r4, #4]
 8004edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8004ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004eea:	ab09      	add	r3, sp, #36	; 0x24
 8004eec:	ec49 8b10 	vmov	d0, r8, r9
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f7ff fecd 	bl	8004c98 <__cvt>
 8004efe:	9b06      	ldr	r3, [sp, #24]
 8004f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f02:	2b47      	cmp	r3, #71	; 0x47
 8004f04:	4680      	mov	r8, r0
 8004f06:	d108      	bne.n	8004f1a <_printf_float+0x142>
 8004f08:	1cc8      	adds	r0, r1, #3
 8004f0a:	db02      	blt.n	8004f12 <_printf_float+0x13a>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	4299      	cmp	r1, r3
 8004f10:	dd41      	ble.n	8004f96 <_printf_float+0x1be>
 8004f12:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f16:	fa5f fb8b 	uxtb.w	fp, fp
 8004f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f1e:	d820      	bhi.n	8004f62 <_printf_float+0x18a>
 8004f20:	3901      	subs	r1, #1
 8004f22:	465a      	mov	r2, fp
 8004f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f28:	9109      	str	r1, [sp, #36]	; 0x24
 8004f2a:	f7ff ff17 	bl	8004d5c <__exponent>
 8004f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f30:	1813      	adds	r3, r2, r0
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	4681      	mov	r9, r0
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	dc02      	bgt.n	8004f40 <_printf_float+0x168>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	07d2      	lsls	r2, r2, #31
 8004f3e:	d501      	bpl.n	8004f44 <_printf_float+0x16c>
 8004f40:	3301      	adds	r3, #1
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d09c      	beq.n	8004e86 <_printf_float+0xae>
 8004f4c:	232d      	movs	r3, #45	; 0x2d
 8004f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f52:	e798      	b.n	8004e86 <_printf_float+0xae>
 8004f54:	9a06      	ldr	r2, [sp, #24]
 8004f56:	2a47      	cmp	r2, #71	; 0x47
 8004f58:	d1be      	bne.n	8004ed8 <_printf_float+0x100>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1bc      	bne.n	8004ed8 <_printf_float+0x100>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7b9      	b.n	8004ed6 <_printf_float+0xfe>
 8004f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f66:	d118      	bne.n	8004f9a <_printf_float+0x1c2>
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	dd0b      	ble.n	8004f86 <_printf_float+0x1ae>
 8004f6e:	6121      	str	r1, [r4, #16]
 8004f70:	b913      	cbnz	r3, 8004f78 <_printf_float+0x1a0>
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	07d0      	lsls	r0, r2, #31
 8004f76:	d502      	bpl.n	8004f7e <_printf_float+0x1a6>
 8004f78:	3301      	adds	r3, #1
 8004f7a:	440b      	add	r3, r1
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f80:	f04f 0900 	mov.w	r9, #0
 8004f84:	e7de      	b.n	8004f44 <_printf_float+0x16c>
 8004f86:	b913      	cbnz	r3, 8004f8e <_printf_float+0x1b6>
 8004f88:	6822      	ldr	r2, [r4, #0]
 8004f8a:	07d2      	lsls	r2, r2, #31
 8004f8c:	d501      	bpl.n	8004f92 <_printf_float+0x1ba>
 8004f8e:	3302      	adds	r3, #2
 8004f90:	e7f4      	b.n	8004f7c <_printf_float+0x1a4>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e7f2      	b.n	8004f7c <_printf_float+0x1a4>
 8004f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	db05      	blt.n	8004fac <_printf_float+0x1d4>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	6121      	str	r1, [r4, #16]
 8004fa4:	07d8      	lsls	r0, r3, #31
 8004fa6:	d5ea      	bpl.n	8004f7e <_printf_float+0x1a6>
 8004fa8:	1c4b      	adds	r3, r1, #1
 8004faa:	e7e7      	b.n	8004f7c <_printf_float+0x1a4>
 8004fac:	2900      	cmp	r1, #0
 8004fae:	bfd4      	ite	le
 8004fb0:	f1c1 0202 	rsble	r2, r1, #2
 8004fb4:	2201      	movgt	r2, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	e7e0      	b.n	8004f7c <_printf_float+0x1a4>
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	055a      	lsls	r2, r3, #21
 8004fbe:	d407      	bmi.n	8004fd0 <_printf_float+0x1f8>
 8004fc0:	6923      	ldr	r3, [r4, #16]
 8004fc2:	4642      	mov	r2, r8
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d12c      	bne.n	8005028 <_printf_float+0x250>
 8004fce:	e764      	b.n	8004e9a <_printf_float+0xc2>
 8004fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fd4:	f240 80e0 	bls.w	8005198 <_printf_float+0x3c0>
 8004fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f7fb fd92 	bl	8000b08 <__aeabi_dcmpeq>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d034      	beq.n	8005052 <_printf_float+0x27a>
 8004fe8:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <_printf_float+0x2f0>)
 8004fea:	2301      	movs	r3, #1
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f af51 	beq.w	8004e9a <_printf_float+0xc2>
 8004ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	db02      	blt.n	8005006 <_printf_float+0x22e>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	07d8      	lsls	r0, r3, #31
 8005004:	d510      	bpl.n	8005028 <_printf_float+0x250>
 8005006:	ee18 3a10 	vmov	r3, s16
 800500a:	4652      	mov	r2, sl
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af41 	beq.w	8004e9a <_printf_float+0xc2>
 8005018:	f04f 0800 	mov.w	r8, #0
 800501c:	f104 091a 	add.w	r9, r4, #26
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	4543      	cmp	r3, r8
 8005026:	dc09      	bgt.n	800503c <_printf_float+0x264>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	079b      	lsls	r3, r3, #30
 800502c:	f100 8105 	bmi.w	800523a <_printf_float+0x462>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e730      	b.n	8004e9e <_printf_float+0xc6>
 800503c:	2301      	movs	r3, #1
 800503e:	464a      	mov	r2, r9
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f43f af27 	beq.w	8004e9a <_printf_float+0xc2>
 800504c:	f108 0801 	add.w	r8, r8, #1
 8005050:	e7e6      	b.n	8005020 <_printf_float+0x248>
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	dc39      	bgt.n	80050cc <_printf_float+0x2f4>
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <_printf_float+0x2f0>)
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f af19 	beq.w	8004e9a <_printf_float+0xc2>
 8005068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506c:	4313      	orrs	r3, r2
 800506e:	d102      	bne.n	8005076 <_printf_float+0x29e>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07d9      	lsls	r1, r3, #31
 8005074:	d5d8      	bpl.n	8005028 <_printf_float+0x250>
 8005076:	ee18 3a10 	vmov	r3, s16
 800507a:	4652      	mov	r2, sl
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af09 	beq.w	8004e9a <_printf_float+0xc2>
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	f104 0a1a 	add.w	sl, r4, #26
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	425b      	negs	r3, r3
 8005094:	454b      	cmp	r3, r9
 8005096:	dc01      	bgt.n	800509c <_printf_float+0x2c4>
 8005098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509a:	e792      	b.n	8004fc2 <_printf_float+0x1ea>
 800509c:	2301      	movs	r3, #1
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f aef7 	beq.w	8004e9a <_printf_float+0xc2>
 80050ac:	f109 0901 	add.w	r9, r9, #1
 80050b0:	e7ee      	b.n	8005090 <_printf_float+0x2b8>
 80050b2:	bf00      	nop
 80050b4:	7fefffff 	.word	0x7fefffff
 80050b8:	08007cb8 	.word	0x08007cb8
 80050bc:	08007cbc 	.word	0x08007cbc
 80050c0:	08007cc4 	.word	0x08007cc4
 80050c4:	08007cc0 	.word	0x08007cc0
 80050c8:	08007cc8 	.word	0x08007cc8
 80050cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bfa8      	it	ge
 80050d4:	461a      	movge	r2, r3
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	4691      	mov	r9, r2
 80050da:	dc37      	bgt.n	800514c <_printf_float+0x374>
 80050dc:	f04f 0b00 	mov.w	fp, #0
 80050e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e4:	f104 021a 	add.w	r2, r4, #26
 80050e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050ea:	9305      	str	r3, [sp, #20]
 80050ec:	eba3 0309 	sub.w	r3, r3, r9
 80050f0:	455b      	cmp	r3, fp
 80050f2:	dc33      	bgt.n	800515c <_printf_float+0x384>
 80050f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f8:	429a      	cmp	r2, r3
 80050fa:	db3b      	blt.n	8005174 <_printf_float+0x39c>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d438      	bmi.n	8005174 <_printf_float+0x39c>
 8005102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005104:	9b05      	ldr	r3, [sp, #20]
 8005106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	eba2 0901 	sub.w	r9, r2, r1
 800510e:	4599      	cmp	r9, r3
 8005110:	bfa8      	it	ge
 8005112:	4699      	movge	r9, r3
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc35      	bgt.n	8005186 <_printf_float+0x3ae>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005122:	f104 0a1a 	add.w	sl, r4, #26
 8005126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	4543      	cmp	r3, r8
 8005132:	f77f af79 	ble.w	8005028 <_printf_float+0x250>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aeaa 	beq.w	8004e9a <_printf_float+0xc2>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7ec      	b.n	8005126 <_printf_float+0x34e>
 800514c:	4613      	mov	r3, r2
 800514e:	4631      	mov	r1, r6
 8005150:	4642      	mov	r2, r8
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	d1c0      	bne.n	80050dc <_printf_float+0x304>
 800515a:	e69e      	b.n	8004e9a <_printf_float+0xc2>
 800515c:	2301      	movs	r3, #1
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	9205      	str	r2, [sp, #20]
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f ae97 	beq.w	8004e9a <_printf_float+0xc2>
 800516c:	9a05      	ldr	r2, [sp, #20]
 800516e:	f10b 0b01 	add.w	fp, fp, #1
 8005172:	e7b9      	b.n	80050e8 <_printf_float+0x310>
 8005174:	ee18 3a10 	vmov	r3, s16
 8005178:	4652      	mov	r2, sl
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	d1be      	bne.n	8005102 <_printf_float+0x32a>
 8005184:	e689      	b.n	8004e9a <_printf_float+0xc2>
 8005186:	9a05      	ldr	r2, [sp, #20]
 8005188:	464b      	mov	r3, r9
 800518a:	4442      	add	r2, r8
 800518c:	4631      	mov	r1, r6
 800518e:	4628      	mov	r0, r5
 8005190:	47b8      	blx	r7
 8005192:	3001      	adds	r0, #1
 8005194:	d1c1      	bne.n	800511a <_printf_float+0x342>
 8005196:	e680      	b.n	8004e9a <_printf_float+0xc2>
 8005198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800519a:	2a01      	cmp	r2, #1
 800519c:	dc01      	bgt.n	80051a2 <_printf_float+0x3ca>
 800519e:	07db      	lsls	r3, r3, #31
 80051a0:	d538      	bpl.n	8005214 <_printf_float+0x43c>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae74 	beq.w	8004e9a <_printf_float+0xc2>
 80051b2:	ee18 3a10 	vmov	r3, s16
 80051b6:	4652      	mov	r2, sl
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f ae6b 	beq.w	8004e9a <_printf_float+0xc2>
 80051c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051c8:	2200      	movs	r2, #0
 80051ca:	2300      	movs	r3, #0
 80051cc:	f7fb fc9c 	bl	8000b08 <__aeabi_dcmpeq>
 80051d0:	b9d8      	cbnz	r0, 800520a <_printf_float+0x432>
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	f108 0201 	add.w	r2, r8, #1
 80051d8:	3b01      	subs	r3, #1
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	d10e      	bne.n	8005202 <_printf_float+0x42a>
 80051e4:	e659      	b.n	8004e9a <_printf_float+0xc2>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4652      	mov	r2, sl
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b8      	blx	r7
 80051f0:	3001      	adds	r0, #1
 80051f2:	f43f ae52 	beq.w	8004e9a <_printf_float+0xc2>
 80051f6:	f108 0801 	add.w	r8, r8, #1
 80051fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4543      	cmp	r3, r8
 8005200:	dcf1      	bgt.n	80051e6 <_printf_float+0x40e>
 8005202:	464b      	mov	r3, r9
 8005204:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005208:	e6dc      	b.n	8004fc4 <_printf_float+0x1ec>
 800520a:	f04f 0800 	mov.w	r8, #0
 800520e:	f104 0a1a 	add.w	sl, r4, #26
 8005212:	e7f2      	b.n	80051fa <_printf_float+0x422>
 8005214:	2301      	movs	r3, #1
 8005216:	4642      	mov	r2, r8
 8005218:	e7df      	b.n	80051da <_printf_float+0x402>
 800521a:	2301      	movs	r3, #1
 800521c:	464a      	mov	r2, r9
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f ae38 	beq.w	8004e9a <_printf_float+0xc2>
 800522a:	f108 0801 	add.w	r8, r8, #1
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	4543      	cmp	r3, r8
 8005236:	dcf0      	bgt.n	800521a <_printf_float+0x442>
 8005238:	e6fa      	b.n	8005030 <_printf_float+0x258>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	f104 0919 	add.w	r9, r4, #25
 8005242:	e7f4      	b.n	800522e <_printf_float+0x456>

08005244 <_printf_common>:
 8005244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005248:	4616      	mov	r6, r2
 800524a:	4699      	mov	r9, r3
 800524c:	688a      	ldr	r2, [r1, #8]
 800524e:	690b      	ldr	r3, [r1, #16]
 8005250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005254:	4293      	cmp	r3, r2
 8005256:	bfb8      	it	lt
 8005258:	4613      	movlt	r3, r2
 800525a:	6033      	str	r3, [r6, #0]
 800525c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005260:	4607      	mov	r7, r0
 8005262:	460c      	mov	r4, r1
 8005264:	b10a      	cbz	r2, 800526a <_printf_common+0x26>
 8005266:	3301      	adds	r3, #1
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	0699      	lsls	r1, r3, #26
 800526e:	bf42      	ittt	mi
 8005270:	6833      	ldrmi	r3, [r6, #0]
 8005272:	3302      	addmi	r3, #2
 8005274:	6033      	strmi	r3, [r6, #0]
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	f015 0506 	ands.w	r5, r5, #6
 800527c:	d106      	bne.n	800528c <_printf_common+0x48>
 800527e:	f104 0a19 	add.w	sl, r4, #25
 8005282:	68e3      	ldr	r3, [r4, #12]
 8005284:	6832      	ldr	r2, [r6, #0]
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	42ab      	cmp	r3, r5
 800528a:	dc26      	bgt.n	80052da <_printf_common+0x96>
 800528c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005290:	1e13      	subs	r3, r2, #0
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	bf18      	it	ne
 8005296:	2301      	movne	r3, #1
 8005298:	0692      	lsls	r2, r2, #26
 800529a:	d42b      	bmi.n	80052f4 <_printf_common+0xb0>
 800529c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a0:	4649      	mov	r1, r9
 80052a2:	4638      	mov	r0, r7
 80052a4:	47c0      	blx	r8
 80052a6:	3001      	adds	r0, #1
 80052a8:	d01e      	beq.n	80052e8 <_printf_common+0xa4>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	68e5      	ldr	r5, [r4, #12]
 80052ae:	6832      	ldr	r2, [r6, #0]
 80052b0:	f003 0306 	and.w	r3, r3, #6
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	bf08      	it	eq
 80052b8:	1aad      	subeq	r5, r5, r2
 80052ba:	68a3      	ldr	r3, [r4, #8]
 80052bc:	6922      	ldr	r2, [r4, #16]
 80052be:	bf0c      	ite	eq
 80052c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c4:	2500      	movne	r5, #0
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bfc4      	itt	gt
 80052ca:	1a9b      	subgt	r3, r3, r2
 80052cc:	18ed      	addgt	r5, r5, r3
 80052ce:	2600      	movs	r6, #0
 80052d0:	341a      	adds	r4, #26
 80052d2:	42b5      	cmp	r5, r6
 80052d4:	d11a      	bne.n	800530c <_printf_common+0xc8>
 80052d6:	2000      	movs	r0, #0
 80052d8:	e008      	b.n	80052ec <_printf_common+0xa8>
 80052da:	2301      	movs	r3, #1
 80052dc:	4652      	mov	r2, sl
 80052de:	4649      	mov	r1, r9
 80052e0:	4638      	mov	r0, r7
 80052e2:	47c0      	blx	r8
 80052e4:	3001      	adds	r0, #1
 80052e6:	d103      	bne.n	80052f0 <_printf_common+0xac>
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	3501      	adds	r5, #1
 80052f2:	e7c6      	b.n	8005282 <_printf_common+0x3e>
 80052f4:	18e1      	adds	r1, r4, r3
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	2030      	movs	r0, #48	; 0x30
 80052fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052fe:	4422      	add	r2, r4
 8005300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005308:	3302      	adds	r3, #2
 800530a:	e7c7      	b.n	800529c <_printf_common+0x58>
 800530c:	2301      	movs	r3, #1
 800530e:	4622      	mov	r2, r4
 8005310:	4649      	mov	r1, r9
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	3001      	adds	r0, #1
 8005318:	d0e6      	beq.n	80052e8 <_printf_common+0xa4>
 800531a:	3601      	adds	r6, #1
 800531c:	e7d9      	b.n	80052d2 <_printf_common+0x8e>
	...

08005320 <_printf_i>:
 8005320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	4691      	mov	r9, r2
 8005328:	7e27      	ldrb	r7, [r4, #24]
 800532a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800532c:	2f78      	cmp	r7, #120	; 0x78
 800532e:	4680      	mov	r8, r0
 8005330:	469a      	mov	sl, r3
 8005332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005336:	d807      	bhi.n	8005348 <_printf_i+0x28>
 8005338:	2f62      	cmp	r7, #98	; 0x62
 800533a:	d80a      	bhi.n	8005352 <_printf_i+0x32>
 800533c:	2f00      	cmp	r7, #0
 800533e:	f000 80d8 	beq.w	80054f2 <_printf_i+0x1d2>
 8005342:	2f58      	cmp	r7, #88	; 0x58
 8005344:	f000 80a3 	beq.w	800548e <_printf_i+0x16e>
 8005348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800534c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005350:	e03a      	b.n	80053c8 <_printf_i+0xa8>
 8005352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005356:	2b15      	cmp	r3, #21
 8005358:	d8f6      	bhi.n	8005348 <_printf_i+0x28>
 800535a:	a001      	add	r0, pc, #4	; (adr r0, 8005360 <_printf_i+0x40>)
 800535c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005360:	080053b9 	.word	0x080053b9
 8005364:	080053cd 	.word	0x080053cd
 8005368:	08005349 	.word	0x08005349
 800536c:	08005349 	.word	0x08005349
 8005370:	08005349 	.word	0x08005349
 8005374:	08005349 	.word	0x08005349
 8005378:	080053cd 	.word	0x080053cd
 800537c:	08005349 	.word	0x08005349
 8005380:	08005349 	.word	0x08005349
 8005384:	08005349 	.word	0x08005349
 8005388:	08005349 	.word	0x08005349
 800538c:	080054d9 	.word	0x080054d9
 8005390:	080053fd 	.word	0x080053fd
 8005394:	080054bb 	.word	0x080054bb
 8005398:	08005349 	.word	0x08005349
 800539c:	08005349 	.word	0x08005349
 80053a0:	080054fb 	.word	0x080054fb
 80053a4:	08005349 	.word	0x08005349
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005349 	.word	0x08005349
 80053b0:	08005349 	.word	0x08005349
 80053b4:	080054c3 	.word	0x080054c3
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	1d1a      	adds	r2, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	600a      	str	r2, [r1, #0]
 80053c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a3      	b.n	8005514 <_printf_i+0x1f4>
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	6808      	ldr	r0, [r1, #0]
 80053d0:	062e      	lsls	r6, r5, #24
 80053d2:	f100 0304 	add.w	r3, r0, #4
 80053d6:	d50a      	bpl.n	80053ee <_printf_i+0xce>
 80053d8:	6805      	ldr	r5, [r0, #0]
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	2d00      	cmp	r5, #0
 80053de:	da03      	bge.n	80053e8 <_printf_i+0xc8>
 80053e0:	232d      	movs	r3, #45	; 0x2d
 80053e2:	426d      	negs	r5, r5
 80053e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e8:	485e      	ldr	r0, [pc, #376]	; (8005564 <_printf_i+0x244>)
 80053ea:	230a      	movs	r3, #10
 80053ec:	e019      	b.n	8005422 <_printf_i+0x102>
 80053ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053f2:	6805      	ldr	r5, [r0, #0]
 80053f4:	600b      	str	r3, [r1, #0]
 80053f6:	bf18      	it	ne
 80053f8:	b22d      	sxthne	r5, r5
 80053fa:	e7ef      	b.n	80053dc <_printf_i+0xbc>
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	1d18      	adds	r0, r3, #4
 8005402:	6008      	str	r0, [r1, #0]
 8005404:	0628      	lsls	r0, r5, #24
 8005406:	d501      	bpl.n	800540c <_printf_i+0xec>
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0xf2>
 800540c:	0669      	lsls	r1, r5, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0xe8>
 8005410:	881d      	ldrh	r5, [r3, #0]
 8005412:	4854      	ldr	r0, [pc, #336]	; (8005564 <_printf_i+0x244>)
 8005414:	2f6f      	cmp	r7, #111	; 0x6f
 8005416:	bf0c      	ite	eq
 8005418:	2308      	moveq	r3, #8
 800541a:	230a      	movne	r3, #10
 800541c:	2100      	movs	r1, #0
 800541e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005422:	6866      	ldr	r6, [r4, #4]
 8005424:	60a6      	str	r6, [r4, #8]
 8005426:	2e00      	cmp	r6, #0
 8005428:	bfa2      	ittt	ge
 800542a:	6821      	ldrge	r1, [r4, #0]
 800542c:	f021 0104 	bicge.w	r1, r1, #4
 8005430:	6021      	strge	r1, [r4, #0]
 8005432:	b90d      	cbnz	r5, 8005438 <_printf_i+0x118>
 8005434:	2e00      	cmp	r6, #0
 8005436:	d04d      	beq.n	80054d4 <_printf_i+0x1b4>
 8005438:	4616      	mov	r6, r2
 800543a:	fbb5 f1f3 	udiv	r1, r5, r3
 800543e:	fb03 5711 	mls	r7, r3, r1, r5
 8005442:	5dc7      	ldrb	r7, [r0, r7]
 8005444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005448:	462f      	mov	r7, r5
 800544a:	42bb      	cmp	r3, r7
 800544c:	460d      	mov	r5, r1
 800544e:	d9f4      	bls.n	800543a <_printf_i+0x11a>
 8005450:	2b08      	cmp	r3, #8
 8005452:	d10b      	bne.n	800546c <_printf_i+0x14c>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	07df      	lsls	r7, r3, #31
 8005458:	d508      	bpl.n	800546c <_printf_i+0x14c>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	6861      	ldr	r1, [r4, #4]
 800545e:	4299      	cmp	r1, r3
 8005460:	bfde      	ittt	le
 8005462:	2330      	movle	r3, #48	; 0x30
 8005464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800546c:	1b92      	subs	r2, r2, r6
 800546e:	6122      	str	r2, [r4, #16]
 8005470:	f8cd a000 	str.w	sl, [sp]
 8005474:	464b      	mov	r3, r9
 8005476:	aa03      	add	r2, sp, #12
 8005478:	4621      	mov	r1, r4
 800547a:	4640      	mov	r0, r8
 800547c:	f7ff fee2 	bl	8005244 <_printf_common>
 8005480:	3001      	adds	r0, #1
 8005482:	d14c      	bne.n	800551e <_printf_i+0x1fe>
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	b004      	add	sp, #16
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	4835      	ldr	r0, [pc, #212]	; (8005564 <_printf_i+0x244>)
 8005490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	680e      	ldr	r6, [r1, #0]
 8005498:	061f      	lsls	r7, r3, #24
 800549a:	f856 5b04 	ldr.w	r5, [r6], #4
 800549e:	600e      	str	r6, [r1, #0]
 80054a0:	d514      	bpl.n	80054cc <_printf_i+0x1ac>
 80054a2:	07d9      	lsls	r1, r3, #31
 80054a4:	bf44      	itt	mi
 80054a6:	f043 0320 	orrmi.w	r3, r3, #32
 80054aa:	6023      	strmi	r3, [r4, #0]
 80054ac:	b91d      	cbnz	r5, 80054b6 <_printf_i+0x196>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f023 0320 	bic.w	r3, r3, #32
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	2310      	movs	r3, #16
 80054b8:	e7b0      	b.n	800541c <_printf_i+0xfc>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f043 0320 	orr.w	r3, r3, #32
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	2378      	movs	r3, #120	; 0x78
 80054c4:	4828      	ldr	r0, [pc, #160]	; (8005568 <_printf_i+0x248>)
 80054c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ca:	e7e3      	b.n	8005494 <_printf_i+0x174>
 80054cc:	065e      	lsls	r6, r3, #25
 80054ce:	bf48      	it	mi
 80054d0:	b2ad      	uxthmi	r5, r5
 80054d2:	e7e6      	b.n	80054a2 <_printf_i+0x182>
 80054d4:	4616      	mov	r6, r2
 80054d6:	e7bb      	b.n	8005450 <_printf_i+0x130>
 80054d8:	680b      	ldr	r3, [r1, #0]
 80054da:	6826      	ldr	r6, [r4, #0]
 80054dc:	6960      	ldr	r0, [r4, #20]
 80054de:	1d1d      	adds	r5, r3, #4
 80054e0:	600d      	str	r5, [r1, #0]
 80054e2:	0635      	lsls	r5, r6, #24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0x1cc>
 80054e8:	6018      	str	r0, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0x1d2>
 80054ec:	0671      	lsls	r1, r6, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0x1c8>
 80054f0:	8018      	strh	r0, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	4616      	mov	r6, r2
 80054f8:	e7ba      	b.n	8005470 <_printf_i+0x150>
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	600a      	str	r2, [r1, #0]
 8005500:	681e      	ldr	r6, [r3, #0]
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	2100      	movs	r1, #0
 8005506:	4630      	mov	r0, r6
 8005508:	f7fa fe8a 	bl	8000220 <memchr>
 800550c:	b108      	cbz	r0, 8005512 <_printf_i+0x1f2>
 800550e:	1b80      	subs	r0, r0, r6
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	e7a8      	b.n	8005470 <_printf_i+0x150>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	4632      	mov	r2, r6
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d0ab      	beq.n	8005484 <_printf_i+0x164>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d413      	bmi.n	800555a <_printf_i+0x23a>
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	4298      	cmp	r0, r3
 8005538:	bfb8      	it	lt
 800553a:	4618      	movlt	r0, r3
 800553c:	e7a4      	b.n	8005488 <_printf_i+0x168>
 800553e:	2301      	movs	r3, #1
 8005540:	4632      	mov	r2, r6
 8005542:	4649      	mov	r1, r9
 8005544:	4640      	mov	r0, r8
 8005546:	47d0      	blx	sl
 8005548:	3001      	adds	r0, #1
 800554a:	d09b      	beq.n	8005484 <_printf_i+0x164>
 800554c:	3501      	adds	r5, #1
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	9903      	ldr	r1, [sp, #12]
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	42ab      	cmp	r3, r5
 8005556:	dcf2      	bgt.n	800553e <_printf_i+0x21e>
 8005558:	e7eb      	b.n	8005532 <_printf_i+0x212>
 800555a:	2500      	movs	r5, #0
 800555c:	f104 0619 	add.w	r6, r4, #25
 8005560:	e7f5      	b.n	800554e <_printf_i+0x22e>
 8005562:	bf00      	nop
 8005564:	08007cca 	.word	0x08007cca
 8005568:	08007cdb 	.word	0x08007cdb

0800556c <siprintf>:
 800556c:	b40e      	push	{r1, r2, r3}
 800556e:	b500      	push	{lr}
 8005570:	b09c      	sub	sp, #112	; 0x70
 8005572:	ab1d      	add	r3, sp, #116	; 0x74
 8005574:	9002      	str	r0, [sp, #8]
 8005576:	9006      	str	r0, [sp, #24]
 8005578:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800557c:	4809      	ldr	r0, [pc, #36]	; (80055a4 <siprintf+0x38>)
 800557e:	9107      	str	r1, [sp, #28]
 8005580:	9104      	str	r1, [sp, #16]
 8005582:	4909      	ldr	r1, [pc, #36]	; (80055a8 <siprintf+0x3c>)
 8005584:	f853 2b04 	ldr.w	r2, [r3], #4
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	a902      	add	r1, sp, #8
 8005590:	f001 fb34 	bl	8006bfc <_svfiprintf_r>
 8005594:	9b02      	ldr	r3, [sp, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	b01c      	add	sp, #112	; 0x70
 800559c:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a0:	b003      	add	sp, #12
 80055a2:	4770      	bx	lr
 80055a4:	2000000c 	.word	0x2000000c
 80055a8:	ffff0208 	.word	0xffff0208

080055ac <quorem>:
 80055ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b0:	6903      	ldr	r3, [r0, #16]
 80055b2:	690c      	ldr	r4, [r1, #16]
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	4607      	mov	r7, r0
 80055b8:	f2c0 8081 	blt.w	80056be <quorem+0x112>
 80055bc:	3c01      	subs	r4, #1
 80055be:	f101 0814 	add.w	r8, r1, #20
 80055c2:	f100 0514 	add.w	r5, r0, #20
 80055c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055d4:	3301      	adds	r3, #1
 80055d6:	429a      	cmp	r2, r3
 80055d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80055e4:	d331      	bcc.n	800564a <quorem+0x9e>
 80055e6:	f04f 0e00 	mov.w	lr, #0
 80055ea:	4640      	mov	r0, r8
 80055ec:	46ac      	mov	ip, r5
 80055ee:	46f2      	mov	sl, lr
 80055f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80055f4:	b293      	uxth	r3, r2
 80055f6:	fb06 e303 	mla	r3, r6, r3, lr
 80055fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ebaa 0303 	sub.w	r3, sl, r3
 8005604:	0c12      	lsrs	r2, r2, #16
 8005606:	f8dc a000 	ldr.w	sl, [ip]
 800560a:	fb06 e202 	mla	r2, r6, r2, lr
 800560e:	fa13 f38a 	uxtah	r3, r3, sl
 8005612:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005616:	fa1f fa82 	uxth.w	sl, r2
 800561a:	f8dc 2000 	ldr.w	r2, [ip]
 800561e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005622:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800562c:	4581      	cmp	r9, r0
 800562e:	f84c 3b04 	str.w	r3, [ip], #4
 8005632:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005636:	d2db      	bcs.n	80055f0 <quorem+0x44>
 8005638:	f855 300b 	ldr.w	r3, [r5, fp]
 800563c:	b92b      	cbnz	r3, 800564a <quorem+0x9e>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	3b04      	subs	r3, #4
 8005642:	429d      	cmp	r5, r3
 8005644:	461a      	mov	r2, r3
 8005646:	d32e      	bcc.n	80056a6 <quorem+0xfa>
 8005648:	613c      	str	r4, [r7, #16]
 800564a:	4638      	mov	r0, r7
 800564c:	f001 f8c0 	bl	80067d0 <__mcmp>
 8005650:	2800      	cmp	r0, #0
 8005652:	db24      	blt.n	800569e <quorem+0xf2>
 8005654:	3601      	adds	r6, #1
 8005656:	4628      	mov	r0, r5
 8005658:	f04f 0c00 	mov.w	ip, #0
 800565c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005660:	f8d0 e000 	ldr.w	lr, [r0]
 8005664:	b293      	uxth	r3, r2
 8005666:	ebac 0303 	sub.w	r3, ip, r3
 800566a:	0c12      	lsrs	r2, r2, #16
 800566c:	fa13 f38e 	uxtah	r3, r3, lr
 8005670:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005678:	b29b      	uxth	r3, r3
 800567a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800567e:	45c1      	cmp	r9, r8
 8005680:	f840 3b04 	str.w	r3, [r0], #4
 8005684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005688:	d2e8      	bcs.n	800565c <quorem+0xb0>
 800568a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800568e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005692:	b922      	cbnz	r2, 800569e <quorem+0xf2>
 8005694:	3b04      	subs	r3, #4
 8005696:	429d      	cmp	r5, r3
 8005698:	461a      	mov	r2, r3
 800569a:	d30a      	bcc.n	80056b2 <quorem+0x106>
 800569c:	613c      	str	r4, [r7, #16]
 800569e:	4630      	mov	r0, r6
 80056a0:	b003      	add	sp, #12
 80056a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d1cc      	bne.n	8005648 <quorem+0x9c>
 80056ae:	3c01      	subs	r4, #1
 80056b0:	e7c7      	b.n	8005642 <quorem+0x96>
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	d1f0      	bne.n	800569c <quorem+0xf0>
 80056ba:	3c01      	subs	r4, #1
 80056bc:	e7eb      	b.n	8005696 <quorem+0xea>
 80056be:	2000      	movs	r0, #0
 80056c0:	e7ee      	b.n	80056a0 <quorem+0xf4>
 80056c2:	0000      	movs	r0, r0
 80056c4:	0000      	movs	r0, r0
	...

080056c8 <_dtoa_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	ed2d 8b02 	vpush	{d8}
 80056d0:	ec57 6b10 	vmov	r6, r7, d0
 80056d4:	b095      	sub	sp, #84	; 0x54
 80056d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056dc:	9105      	str	r1, [sp, #20]
 80056de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80056e2:	4604      	mov	r4, r0
 80056e4:	9209      	str	r2, [sp, #36]	; 0x24
 80056e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80056e8:	b975      	cbnz	r5, 8005708 <_dtoa_r+0x40>
 80056ea:	2010      	movs	r0, #16
 80056ec:	f000 fddc 	bl	80062a8 <malloc>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6260      	str	r0, [r4, #36]	; 0x24
 80056f4:	b920      	cbnz	r0, 8005700 <_dtoa_r+0x38>
 80056f6:	4bb2      	ldr	r3, [pc, #712]	; (80059c0 <_dtoa_r+0x2f8>)
 80056f8:	21ea      	movs	r1, #234	; 0xea
 80056fa:	48b2      	ldr	r0, [pc, #712]	; (80059c4 <_dtoa_r+0x2fc>)
 80056fc:	f001 fb8e 	bl	8006e1c <__assert_func>
 8005700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005704:	6005      	str	r5, [r0, #0]
 8005706:	60c5      	str	r5, [r0, #12]
 8005708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	b151      	cbz	r1, 8005724 <_dtoa_r+0x5c>
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	604a      	str	r2, [r1, #4]
 8005712:	2301      	movs	r3, #1
 8005714:	4093      	lsls	r3, r2
 8005716:	608b      	str	r3, [r1, #8]
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fe1b 	bl	8006354 <_Bfree>
 800571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	1e3b      	subs	r3, r7, #0
 8005726:	bfb9      	ittee	lt
 8005728:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800572c:	9303      	strlt	r3, [sp, #12]
 800572e:	2300      	movge	r3, #0
 8005730:	f8c8 3000 	strge.w	r3, [r8]
 8005734:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005738:	4ba3      	ldr	r3, [pc, #652]	; (80059c8 <_dtoa_r+0x300>)
 800573a:	bfbc      	itt	lt
 800573c:	2201      	movlt	r2, #1
 800573e:	f8c8 2000 	strlt.w	r2, [r8]
 8005742:	ea33 0309 	bics.w	r3, r3, r9
 8005746:	d11b      	bne.n	8005780 <_dtoa_r+0xb8>
 8005748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800574a:	f242 730f 	movw	r3, #9999	; 0x270f
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005754:	4333      	orrs	r3, r6
 8005756:	f000 857a 	beq.w	800624e <_dtoa_r+0xb86>
 800575a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800575c:	b963      	cbnz	r3, 8005778 <_dtoa_r+0xb0>
 800575e:	4b9b      	ldr	r3, [pc, #620]	; (80059cc <_dtoa_r+0x304>)
 8005760:	e024      	b.n	80057ac <_dtoa_r+0xe4>
 8005762:	4b9b      	ldr	r3, [pc, #620]	; (80059d0 <_dtoa_r+0x308>)
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	9800      	ldr	r0, [sp, #0]
 800576e:	b015      	add	sp, #84	; 0x54
 8005770:	ecbd 8b02 	vpop	{d8}
 8005774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005778:	4b94      	ldr	r3, [pc, #592]	; (80059cc <_dtoa_r+0x304>)
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	3303      	adds	r3, #3
 800577e:	e7f3      	b.n	8005768 <_dtoa_r+0xa0>
 8005780:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	ec51 0b17 	vmov	r0, r1, d7
 800578a:	2300      	movs	r3, #0
 800578c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005790:	f7fb f9ba 	bl	8000b08 <__aeabi_dcmpeq>
 8005794:	4680      	mov	r8, r0
 8005796:	b158      	cbz	r0, 80057b0 <_dtoa_r+0xe8>
 8005798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800579a:	2301      	movs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8551 	beq.w	8006248 <_dtoa_r+0xb80>
 80057a6:	488b      	ldr	r0, [pc, #556]	; (80059d4 <_dtoa_r+0x30c>)
 80057a8:	6018      	str	r0, [r3, #0]
 80057aa:	1e43      	subs	r3, r0, #1
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	e7dd      	b.n	800576c <_dtoa_r+0xa4>
 80057b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80057b4:	aa12      	add	r2, sp, #72	; 0x48
 80057b6:	a913      	add	r1, sp, #76	; 0x4c
 80057b8:	4620      	mov	r0, r4
 80057ba:	f001 f8ad 	bl	8006918 <__d2b>
 80057be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80057c2:	4683      	mov	fp, r0
 80057c4:	2d00      	cmp	r5, #0
 80057c6:	d07c      	beq.n	80058c2 <_dtoa_r+0x1fa>
 80057c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80057ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80057d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057e2:	4b7d      	ldr	r3, [pc, #500]	; (80059d8 <_dtoa_r+0x310>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	4630      	mov	r0, r6
 80057e8:	4639      	mov	r1, r7
 80057ea:	f7fa fd6d 	bl	80002c8 <__aeabi_dsub>
 80057ee:	a36e      	add	r3, pc, #440	; (adr r3, 80059a8 <_dtoa_r+0x2e0>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fa ff20 	bl	8000638 <__aeabi_dmul>
 80057f8:	a36d      	add	r3, pc, #436	; (adr r3, 80059b0 <_dtoa_r+0x2e8>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa fd65 	bl	80002cc <__adddf3>
 8005802:	4606      	mov	r6, r0
 8005804:	4628      	mov	r0, r5
 8005806:	460f      	mov	r7, r1
 8005808:	f7fa feac 	bl	8000564 <__aeabi_i2d>
 800580c:	a36a      	add	r3, pc, #424	; (adr r3, 80059b8 <_dtoa_r+0x2f0>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa ff11 	bl	8000638 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4630      	mov	r0, r6
 800581c:	4639      	mov	r1, r7
 800581e:	f7fa fd55 	bl	80002cc <__adddf3>
 8005822:	4606      	mov	r6, r0
 8005824:	460f      	mov	r7, r1
 8005826:	f7fb f9b7 	bl	8000b98 <__aeabi_d2iz>
 800582a:	2200      	movs	r2, #0
 800582c:	4682      	mov	sl, r0
 800582e:	2300      	movs	r3, #0
 8005830:	4630      	mov	r0, r6
 8005832:	4639      	mov	r1, r7
 8005834:	f7fb f972 	bl	8000b1c <__aeabi_dcmplt>
 8005838:	b148      	cbz	r0, 800584e <_dtoa_r+0x186>
 800583a:	4650      	mov	r0, sl
 800583c:	f7fa fe92 	bl	8000564 <__aeabi_i2d>
 8005840:	4632      	mov	r2, r6
 8005842:	463b      	mov	r3, r7
 8005844:	f7fb f960 	bl	8000b08 <__aeabi_dcmpeq>
 8005848:	b908      	cbnz	r0, 800584e <_dtoa_r+0x186>
 800584a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800584e:	f1ba 0f16 	cmp.w	sl, #22
 8005852:	d854      	bhi.n	80058fe <_dtoa_r+0x236>
 8005854:	4b61      	ldr	r3, [pc, #388]	; (80059dc <_dtoa_r+0x314>)
 8005856:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005862:	f7fb f95b 	bl	8000b1c <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	d04b      	beq.n	8005902 <_dtoa_r+0x23a>
 800586a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800586e:	2300      	movs	r3, #0
 8005870:	930e      	str	r3, [sp, #56]	; 0x38
 8005872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005874:	1b5d      	subs	r5, r3, r5
 8005876:	1e6b      	subs	r3, r5, #1
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	bf43      	ittte	mi
 800587c:	2300      	movmi	r3, #0
 800587e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005882:	9304      	strmi	r3, [sp, #16]
 8005884:	f04f 0800 	movpl.w	r8, #0
 8005888:	f1ba 0f00 	cmp.w	sl, #0
 800588c:	db3b      	blt.n	8005906 <_dtoa_r+0x23e>
 800588e:	9b04      	ldr	r3, [sp, #16]
 8005890:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005894:	4453      	add	r3, sl
 8005896:	9304      	str	r3, [sp, #16]
 8005898:	2300      	movs	r3, #0
 800589a:	9306      	str	r3, [sp, #24]
 800589c:	9b05      	ldr	r3, [sp, #20]
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d869      	bhi.n	8005976 <_dtoa_r+0x2ae>
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	bfc4      	itt	gt
 80058a6:	3b04      	subgt	r3, #4
 80058a8:	9305      	strgt	r3, [sp, #20]
 80058aa:	9b05      	ldr	r3, [sp, #20]
 80058ac:	f1a3 0302 	sub.w	r3, r3, #2
 80058b0:	bfcc      	ite	gt
 80058b2:	2500      	movgt	r5, #0
 80058b4:	2501      	movle	r5, #1
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d869      	bhi.n	800598e <_dtoa_r+0x2c6>
 80058ba:	e8df f003 	tbb	[pc, r3]
 80058be:	4e2c      	.short	0x4e2c
 80058c0:	5a4c      	.short	0x5a4c
 80058c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80058c6:	441d      	add	r5, r3
 80058c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	bfc1      	itttt	gt
 80058d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80058d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80058dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80058e0:	bfda      	itte	le
 80058e2:	f1c3 0320 	rsble	r3, r3, #32
 80058e6:	fa06 f003 	lslle.w	r0, r6, r3
 80058ea:	4318      	orrgt	r0, r3
 80058ec:	f7fa fe2a 	bl	8000544 <__aeabi_ui2d>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4606      	mov	r6, r0
 80058f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80058f8:	3d01      	subs	r5, #1
 80058fa:	9310      	str	r3, [sp, #64]	; 0x40
 80058fc:	e771      	b.n	80057e2 <_dtoa_r+0x11a>
 80058fe:	2301      	movs	r3, #1
 8005900:	e7b6      	b.n	8005870 <_dtoa_r+0x1a8>
 8005902:	900e      	str	r0, [sp, #56]	; 0x38
 8005904:	e7b5      	b.n	8005872 <_dtoa_r+0x1aa>
 8005906:	f1ca 0300 	rsb	r3, sl, #0
 800590a:	9306      	str	r3, [sp, #24]
 800590c:	2300      	movs	r3, #0
 800590e:	eba8 080a 	sub.w	r8, r8, sl
 8005912:	930d      	str	r3, [sp, #52]	; 0x34
 8005914:	e7c2      	b.n	800589c <_dtoa_r+0x1d4>
 8005916:	2300      	movs	r3, #0
 8005918:	9308      	str	r3, [sp, #32]
 800591a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	dc39      	bgt.n	8005994 <_dtoa_r+0x2cc>
 8005920:	f04f 0901 	mov.w	r9, #1
 8005924:	f8cd 9004 	str.w	r9, [sp, #4]
 8005928:	464b      	mov	r3, r9
 800592a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800592e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005930:	2200      	movs	r2, #0
 8005932:	6042      	str	r2, [r0, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	f102 0614 	add.w	r6, r2, #20
 800593a:	429e      	cmp	r6, r3
 800593c:	6841      	ldr	r1, [r0, #4]
 800593e:	d92f      	bls.n	80059a0 <_dtoa_r+0x2d8>
 8005940:	4620      	mov	r0, r4
 8005942:	f000 fcc7 	bl	80062d4 <_Balloc>
 8005946:	9000      	str	r0, [sp, #0]
 8005948:	2800      	cmp	r0, #0
 800594a:	d14b      	bne.n	80059e4 <_dtoa_r+0x31c>
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <_dtoa_r+0x318>)
 800594e:	4602      	mov	r2, r0
 8005950:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005954:	e6d1      	b.n	80056fa <_dtoa_r+0x32>
 8005956:	2301      	movs	r3, #1
 8005958:	e7de      	b.n	8005918 <_dtoa_r+0x250>
 800595a:	2300      	movs	r3, #0
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005960:	eb0a 0903 	add.w	r9, sl, r3
 8005964:	f109 0301 	add.w	r3, r9, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	bfb8      	it	lt
 800596e:	2301      	movlt	r3, #1
 8005970:	e7dd      	b.n	800592e <_dtoa_r+0x266>
 8005972:	2301      	movs	r3, #1
 8005974:	e7f2      	b.n	800595c <_dtoa_r+0x294>
 8005976:	2501      	movs	r5, #1
 8005978:	2300      	movs	r3, #0
 800597a:	9305      	str	r3, [sp, #20]
 800597c:	9508      	str	r5, [sp, #32]
 800597e:	f04f 39ff 	mov.w	r9, #4294967295
 8005982:	2200      	movs	r2, #0
 8005984:	f8cd 9004 	str.w	r9, [sp, #4]
 8005988:	2312      	movs	r3, #18
 800598a:	9209      	str	r2, [sp, #36]	; 0x24
 800598c:	e7cf      	b.n	800592e <_dtoa_r+0x266>
 800598e:	2301      	movs	r3, #1
 8005990:	9308      	str	r3, [sp, #32]
 8005992:	e7f4      	b.n	800597e <_dtoa_r+0x2b6>
 8005994:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005998:	f8cd 9004 	str.w	r9, [sp, #4]
 800599c:	464b      	mov	r3, r9
 800599e:	e7c6      	b.n	800592e <_dtoa_r+0x266>
 80059a0:	3101      	adds	r1, #1
 80059a2:	6041      	str	r1, [r0, #4]
 80059a4:	0052      	lsls	r2, r2, #1
 80059a6:	e7c6      	b.n	8005936 <_dtoa_r+0x26e>
 80059a8:	636f4361 	.word	0x636f4361
 80059ac:	3fd287a7 	.word	0x3fd287a7
 80059b0:	8b60c8b3 	.word	0x8b60c8b3
 80059b4:	3fc68a28 	.word	0x3fc68a28
 80059b8:	509f79fb 	.word	0x509f79fb
 80059bc:	3fd34413 	.word	0x3fd34413
 80059c0:	08007cf9 	.word	0x08007cf9
 80059c4:	08007d10 	.word	0x08007d10
 80059c8:	7ff00000 	.word	0x7ff00000
 80059cc:	08007cf5 	.word	0x08007cf5
 80059d0:	08007cec 	.word	0x08007cec
 80059d4:	08007cc9 	.word	0x08007cc9
 80059d8:	3ff80000 	.word	0x3ff80000
 80059dc:	08007e08 	.word	0x08007e08
 80059e0:	08007d6f 	.word	0x08007d6f
 80059e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e6:	9a00      	ldr	r2, [sp, #0]
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	9b01      	ldr	r3, [sp, #4]
 80059ec:	2b0e      	cmp	r3, #14
 80059ee:	f200 80ad 	bhi.w	8005b4c <_dtoa_r+0x484>
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	f000 80aa 	beq.w	8005b4c <_dtoa_r+0x484>
 80059f8:	f1ba 0f00 	cmp.w	sl, #0
 80059fc:	dd36      	ble.n	8005a6c <_dtoa_r+0x3a4>
 80059fe:	4ac3      	ldr	r2, [pc, #780]	; (8005d0c <_dtoa_r+0x644>)
 8005a00:	f00a 030f 	and.w	r3, sl, #15
 8005a04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a08:	ed93 7b00 	vldr	d7, [r3]
 8005a0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a14:	eeb0 8a47 	vmov.f32	s16, s14
 8005a18:	eef0 8a67 	vmov.f32	s17, s15
 8005a1c:	d016      	beq.n	8005a4c <_dtoa_r+0x384>
 8005a1e:	4bbc      	ldr	r3, [pc, #752]	; (8005d10 <_dtoa_r+0x648>)
 8005a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a28:	f7fa ff30 	bl	800088c <__aeabi_ddiv>
 8005a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a30:	f007 070f 	and.w	r7, r7, #15
 8005a34:	2503      	movs	r5, #3
 8005a36:	4eb6      	ldr	r6, [pc, #728]	; (8005d10 <_dtoa_r+0x648>)
 8005a38:	b957      	cbnz	r7, 8005a50 <_dtoa_r+0x388>
 8005a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a3e:	ec53 2b18 	vmov	r2, r3, d8
 8005a42:	f7fa ff23 	bl	800088c <__aeabi_ddiv>
 8005a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a4a:	e029      	b.n	8005aa0 <_dtoa_r+0x3d8>
 8005a4c:	2502      	movs	r5, #2
 8005a4e:	e7f2      	b.n	8005a36 <_dtoa_r+0x36e>
 8005a50:	07f9      	lsls	r1, r7, #31
 8005a52:	d508      	bpl.n	8005a66 <_dtoa_r+0x39e>
 8005a54:	ec51 0b18 	vmov	r0, r1, d8
 8005a58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a5c:	f7fa fdec 	bl	8000638 <__aeabi_dmul>
 8005a60:	ec41 0b18 	vmov	d8, r0, r1
 8005a64:	3501      	adds	r5, #1
 8005a66:	107f      	asrs	r7, r7, #1
 8005a68:	3608      	adds	r6, #8
 8005a6a:	e7e5      	b.n	8005a38 <_dtoa_r+0x370>
 8005a6c:	f000 80a6 	beq.w	8005bbc <_dtoa_r+0x4f4>
 8005a70:	f1ca 0600 	rsb	r6, sl, #0
 8005a74:	4ba5      	ldr	r3, [pc, #660]	; (8005d0c <_dtoa_r+0x644>)
 8005a76:	4fa6      	ldr	r7, [pc, #664]	; (8005d10 <_dtoa_r+0x648>)
 8005a78:	f006 020f 	and.w	r2, r6, #15
 8005a7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a88:	f7fa fdd6 	bl	8000638 <__aeabi_dmul>
 8005a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a90:	1136      	asrs	r6, r6, #4
 8005a92:	2300      	movs	r3, #0
 8005a94:	2502      	movs	r5, #2
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	f040 8085 	bne.w	8005ba6 <_dtoa_r+0x4de>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1d2      	bne.n	8005a46 <_dtoa_r+0x37e>
 8005aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 808c 	beq.w	8005bc0 <_dtoa_r+0x4f8>
 8005aa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aac:	4b99      	ldr	r3, [pc, #612]	; (8005d14 <_dtoa_r+0x64c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	4639      	mov	r1, r7
 8005ab4:	f7fb f832 	bl	8000b1c <__aeabi_dcmplt>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f000 8081 	beq.w	8005bc0 <_dtoa_r+0x4f8>
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d07d      	beq.n	8005bc0 <_dtoa_r+0x4f8>
 8005ac4:	f1b9 0f00 	cmp.w	r9, #0
 8005ac8:	dd3c      	ble.n	8005b44 <_dtoa_r+0x47c>
 8005aca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ace:	9307      	str	r3, [sp, #28]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4b91      	ldr	r3, [pc, #580]	; (8005d18 <_dtoa_r+0x650>)
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f7fa fdae 	bl	8000638 <__aeabi_dmul>
 8005adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ae6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005aea:	4628      	mov	r0, r5
 8005aec:	f7fa fd3a 	bl	8000564 <__aeabi_i2d>
 8005af0:	4632      	mov	r2, r6
 8005af2:	463b      	mov	r3, r7
 8005af4:	f7fa fda0 	bl	8000638 <__aeabi_dmul>
 8005af8:	4b88      	ldr	r3, [pc, #544]	; (8005d1c <_dtoa_r+0x654>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	f7fa fbe6 	bl	80002cc <__adddf3>
 8005b00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b08:	9303      	str	r3, [sp, #12]
 8005b0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d15c      	bne.n	8005bca <_dtoa_r+0x502>
 8005b10:	4b83      	ldr	r3, [pc, #524]	; (8005d20 <_dtoa_r+0x658>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	4630      	mov	r0, r6
 8005b16:	4639      	mov	r1, r7
 8005b18:	f7fa fbd6 	bl	80002c8 <__aeabi_dsub>
 8005b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b20:	4606      	mov	r6, r0
 8005b22:	460f      	mov	r7, r1
 8005b24:	f7fb f818 	bl	8000b58 <__aeabi_dcmpgt>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	f040 8296 	bne.w	800605a <_dtoa_r+0x992>
 8005b2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b32:	4630      	mov	r0, r6
 8005b34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b38:	4639      	mov	r1, r7
 8005b3a:	f7fa ffef 	bl	8000b1c <__aeabi_dcmplt>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	f040 8288 	bne.w	8006054 <_dtoa_r+0x98c>
 8005b44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f2c0 8158 	blt.w	8005e04 <_dtoa_r+0x73c>
 8005b54:	f1ba 0f0e 	cmp.w	sl, #14
 8005b58:	f300 8154 	bgt.w	8005e04 <_dtoa_r+0x73c>
 8005b5c:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <_dtoa_r+0x644>)
 8005b5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f280 80e3 	bge.w	8005d34 <_dtoa_r+0x66c>
 8005b6e:	9b01      	ldr	r3, [sp, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f300 80df 	bgt.w	8005d34 <_dtoa_r+0x66c>
 8005b76:	f040 826d 	bne.w	8006054 <_dtoa_r+0x98c>
 8005b7a:	4b69      	ldr	r3, [pc, #420]	; (8005d20 <_dtoa_r+0x658>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4640      	mov	r0, r8
 8005b80:	4649      	mov	r1, r9
 8005b82:	f7fa fd59 	bl	8000638 <__aeabi_dmul>
 8005b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b8a:	f7fa ffdb 	bl	8000b44 <__aeabi_dcmpge>
 8005b8e:	9e01      	ldr	r6, [sp, #4]
 8005b90:	4637      	mov	r7, r6
 8005b92:	2800      	cmp	r0, #0
 8005b94:	f040 8243 	bne.w	800601e <_dtoa_r+0x956>
 8005b98:	9d00      	ldr	r5, [sp, #0]
 8005b9a:	2331      	movs	r3, #49	; 0x31
 8005b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba0:	f10a 0a01 	add.w	sl, sl, #1
 8005ba4:	e23f      	b.n	8006026 <_dtoa_r+0x95e>
 8005ba6:	07f2      	lsls	r2, r6, #31
 8005ba8:	d505      	bpl.n	8005bb6 <_dtoa_r+0x4ee>
 8005baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bae:	f7fa fd43 	bl	8000638 <__aeabi_dmul>
 8005bb2:	3501      	adds	r5, #1
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	1076      	asrs	r6, r6, #1
 8005bb8:	3708      	adds	r7, #8
 8005bba:	e76c      	b.n	8005a96 <_dtoa_r+0x3ce>
 8005bbc:	2502      	movs	r5, #2
 8005bbe:	e76f      	b.n	8005aa0 <_dtoa_r+0x3d8>
 8005bc0:	9b01      	ldr	r3, [sp, #4]
 8005bc2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005bc8:	e78d      	b.n	8005ae6 <_dtoa_r+0x41e>
 8005bca:	9900      	ldr	r1, [sp, #0]
 8005bcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bd0:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <_dtoa_r+0x644>)
 8005bd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	9102      	str	r1, [sp, #8]
 8005bda:	9908      	ldr	r1, [sp, #32]
 8005bdc:	eeb0 8a47 	vmov.f32	s16, s14
 8005be0:	eef0 8a67 	vmov.f32	s17, s15
 8005be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bec:	2900      	cmp	r1, #0
 8005bee:	d045      	beq.n	8005c7c <_dtoa_r+0x5b4>
 8005bf0:	494c      	ldr	r1, [pc, #304]	; (8005d24 <_dtoa_r+0x65c>)
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f7fa fe4a 	bl	800088c <__aeabi_ddiv>
 8005bf8:	ec53 2b18 	vmov	r2, r3, d8
 8005bfc:	f7fa fb64 	bl	80002c8 <__aeabi_dsub>
 8005c00:	9d00      	ldr	r5, [sp, #0]
 8005c02:	ec41 0b18 	vmov	d8, r0, r1
 8005c06:	4639      	mov	r1, r7
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7fa ffc5 	bl	8000b98 <__aeabi_d2iz>
 8005c0e:	900c      	str	r0, [sp, #48]	; 0x30
 8005c10:	f7fa fca8 	bl	8000564 <__aeabi_i2d>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa fb54 	bl	80002c8 <__aeabi_dsub>
 8005c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c22:	3330      	adds	r3, #48	; 0x30
 8005c24:	f805 3b01 	strb.w	r3, [r5], #1
 8005c28:	ec53 2b18 	vmov	r2, r3, d8
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	460f      	mov	r7, r1
 8005c30:	f7fa ff74 	bl	8000b1c <__aeabi_dcmplt>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d165      	bne.n	8005d04 <_dtoa_r+0x63c>
 8005c38:	4632      	mov	r2, r6
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	4935      	ldr	r1, [pc, #212]	; (8005d14 <_dtoa_r+0x64c>)
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f7fa fb42 	bl	80002c8 <__aeabi_dsub>
 8005c44:	ec53 2b18 	vmov	r2, r3, d8
 8005c48:	f7fa ff68 	bl	8000b1c <__aeabi_dcmplt>
 8005c4c:	2800      	cmp	r0, #0
 8005c4e:	f040 80b9 	bne.w	8005dc4 <_dtoa_r+0x6fc>
 8005c52:	9b02      	ldr	r3, [sp, #8]
 8005c54:	429d      	cmp	r5, r3
 8005c56:	f43f af75 	beq.w	8005b44 <_dtoa_r+0x47c>
 8005c5a:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <_dtoa_r+0x650>)
 8005c5c:	ec51 0b18 	vmov	r0, r1, d8
 8005c60:	2200      	movs	r2, #0
 8005c62:	f7fa fce9 	bl	8000638 <__aeabi_dmul>
 8005c66:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <_dtoa_r+0x650>)
 8005c68:	ec41 0b18 	vmov	d8, r0, r1
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	4639      	mov	r1, r7
 8005c72:	f7fa fce1 	bl	8000638 <__aeabi_dmul>
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	e7c4      	b.n	8005c06 <_dtoa_r+0x53e>
 8005c7c:	ec51 0b17 	vmov	r0, r1, d7
 8005c80:	f7fa fcda 	bl	8000638 <__aeabi_dmul>
 8005c84:	9b02      	ldr	r3, [sp, #8]
 8005c86:	9d00      	ldr	r5, [sp, #0]
 8005c88:	930c      	str	r3, [sp, #48]	; 0x30
 8005c8a:	ec41 0b18 	vmov	d8, r0, r1
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7fa ff81 	bl	8000b98 <__aeabi_d2iz>
 8005c96:	9011      	str	r0, [sp, #68]	; 0x44
 8005c98:	f7fa fc64 	bl	8000564 <__aeabi_i2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa fb10 	bl	80002c8 <__aeabi_dsub>
 8005ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005caa:	3330      	adds	r3, #48	; 0x30
 8005cac:	f805 3b01 	strb.w	r3, [r5], #1
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	429d      	cmp	r5, r3
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	d134      	bne.n	8005d28 <_dtoa_r+0x660>
 8005cbe:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <_dtoa_r+0x65c>)
 8005cc0:	ec51 0b18 	vmov	r0, r1, d8
 8005cc4:	f7fa fb02 	bl	80002cc <__adddf3>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4630      	mov	r0, r6
 8005cce:	4639      	mov	r1, r7
 8005cd0:	f7fa ff42 	bl	8000b58 <__aeabi_dcmpgt>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d175      	bne.n	8005dc4 <_dtoa_r+0x6fc>
 8005cd8:	ec53 2b18 	vmov	r2, r3, d8
 8005cdc:	4911      	ldr	r1, [pc, #68]	; (8005d24 <_dtoa_r+0x65c>)
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f7fa faf2 	bl	80002c8 <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f7fa ff16 	bl	8000b1c <__aeabi_dcmplt>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f43f af27 	beq.w	8005b44 <_dtoa_r+0x47c>
 8005cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf8:	1e6b      	subs	r3, r5, #1
 8005cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8005cfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d0f8      	beq.n	8005cf6 <_dtoa_r+0x62e>
 8005d04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d08:	e04a      	b.n	8005da0 <_dtoa_r+0x6d8>
 8005d0a:	bf00      	nop
 8005d0c:	08007e08 	.word	0x08007e08
 8005d10:	08007de0 	.word	0x08007de0
 8005d14:	3ff00000 	.word	0x3ff00000
 8005d18:	40240000 	.word	0x40240000
 8005d1c:	401c0000 	.word	0x401c0000
 8005d20:	40140000 	.word	0x40140000
 8005d24:	3fe00000 	.word	0x3fe00000
 8005d28:	4baf      	ldr	r3, [pc, #700]	; (8005fe8 <_dtoa_r+0x920>)
 8005d2a:	f7fa fc85 	bl	8000638 <__aeabi_dmul>
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	e7ac      	b.n	8005c8e <_dtoa_r+0x5c6>
 8005d34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d38:	9d00      	ldr	r5, [sp, #0]
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	4630      	mov	r0, r6
 8005d40:	4639      	mov	r1, r7
 8005d42:	f7fa fda3 	bl	800088c <__aeabi_ddiv>
 8005d46:	f7fa ff27 	bl	8000b98 <__aeabi_d2iz>
 8005d4a:	9002      	str	r0, [sp, #8]
 8005d4c:	f7fa fc0a 	bl	8000564 <__aeabi_i2d>
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	f7fa fc70 	bl	8000638 <__aeabi_dmul>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fab2 	bl	80002c8 <__aeabi_dsub>
 8005d64:	9e02      	ldr	r6, [sp, #8]
 8005d66:	9f01      	ldr	r7, [sp, #4]
 8005d68:	3630      	adds	r6, #48	; 0x30
 8005d6a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d6e:	9e00      	ldr	r6, [sp, #0]
 8005d70:	1bae      	subs	r6, r5, r6
 8005d72:	42b7      	cmp	r7, r6
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	d137      	bne.n	8005dea <_dtoa_r+0x722>
 8005d7a:	f7fa faa7 	bl	80002cc <__adddf3>
 8005d7e:	4642      	mov	r2, r8
 8005d80:	464b      	mov	r3, r9
 8005d82:	4606      	mov	r6, r0
 8005d84:	460f      	mov	r7, r1
 8005d86:	f7fa fee7 	bl	8000b58 <__aeabi_dcmpgt>
 8005d8a:	b9c8      	cbnz	r0, 8005dc0 <_dtoa_r+0x6f8>
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	4630      	mov	r0, r6
 8005d92:	4639      	mov	r1, r7
 8005d94:	f7fa feb8 	bl	8000b08 <__aeabi_dcmpeq>
 8005d98:	b110      	cbz	r0, 8005da0 <_dtoa_r+0x6d8>
 8005d9a:	9b02      	ldr	r3, [sp, #8]
 8005d9c:	07d9      	lsls	r1, r3, #31
 8005d9e:	d40f      	bmi.n	8005dc0 <_dtoa_r+0x6f8>
 8005da0:	4620      	mov	r0, r4
 8005da2:	4659      	mov	r1, fp
 8005da4:	f000 fad6 	bl	8006354 <_Bfree>
 8005da8:	2300      	movs	r3, #0
 8005daa:	702b      	strb	r3, [r5, #0]
 8005dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dae:	f10a 0001 	add.w	r0, sl, #1
 8005db2:	6018      	str	r0, [r3, #0]
 8005db4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f43f acd8 	beq.w	800576c <_dtoa_r+0xa4>
 8005dbc:	601d      	str	r5, [r3, #0]
 8005dbe:	e4d5      	b.n	800576c <_dtoa_r+0xa4>
 8005dc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	461d      	mov	r5, r3
 8005dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dcc:	2a39      	cmp	r2, #57	; 0x39
 8005dce:	d108      	bne.n	8005de2 <_dtoa_r+0x71a>
 8005dd0:	9a00      	ldr	r2, [sp, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d1f7      	bne.n	8005dc6 <_dtoa_r+0x6fe>
 8005dd6:	9a07      	ldr	r2, [sp, #28]
 8005dd8:	9900      	ldr	r1, [sp, #0]
 8005dda:	3201      	adds	r2, #1
 8005ddc:	9207      	str	r2, [sp, #28]
 8005dde:	2230      	movs	r2, #48	; 0x30
 8005de0:	700a      	strb	r2, [r1, #0]
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	3201      	adds	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e78c      	b.n	8005d04 <_dtoa_r+0x63c>
 8005dea:	4b7f      	ldr	r3, [pc, #508]	; (8005fe8 <_dtoa_r+0x920>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	f7fa fc23 	bl	8000638 <__aeabi_dmul>
 8005df2:	2200      	movs	r2, #0
 8005df4:	2300      	movs	r3, #0
 8005df6:	4606      	mov	r6, r0
 8005df8:	460f      	mov	r7, r1
 8005dfa:	f7fa fe85 	bl	8000b08 <__aeabi_dcmpeq>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d09b      	beq.n	8005d3a <_dtoa_r+0x672>
 8005e02:	e7cd      	b.n	8005da0 <_dtoa_r+0x6d8>
 8005e04:	9a08      	ldr	r2, [sp, #32]
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	f000 80c4 	beq.w	8005f94 <_dtoa_r+0x8cc>
 8005e0c:	9a05      	ldr	r2, [sp, #20]
 8005e0e:	2a01      	cmp	r2, #1
 8005e10:	f300 80a8 	bgt.w	8005f64 <_dtoa_r+0x89c>
 8005e14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	f000 80a0 	beq.w	8005f5c <_dtoa_r+0x894>
 8005e1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e20:	9e06      	ldr	r6, [sp, #24]
 8005e22:	4645      	mov	r5, r8
 8005e24:	9a04      	ldr	r2, [sp, #16]
 8005e26:	2101      	movs	r1, #1
 8005e28:	441a      	add	r2, r3
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4498      	add	r8, r3
 8005e2e:	9204      	str	r2, [sp, #16]
 8005e30:	f000 fb4c 	bl	80064cc <__i2b>
 8005e34:	4607      	mov	r7, r0
 8005e36:	2d00      	cmp	r5, #0
 8005e38:	dd0b      	ble.n	8005e52 <_dtoa_r+0x78a>
 8005e3a:	9b04      	ldr	r3, [sp, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd08      	ble.n	8005e52 <_dtoa_r+0x78a>
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	9a04      	ldr	r2, [sp, #16]
 8005e44:	bfa8      	it	ge
 8005e46:	462b      	movge	r3, r5
 8005e48:	eba8 0803 	sub.w	r8, r8, r3
 8005e4c:	1aed      	subs	r5, r5, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	b1fb      	cbz	r3, 8005e96 <_dtoa_r+0x7ce>
 8005e56:	9b08      	ldr	r3, [sp, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 809f 	beq.w	8005f9c <_dtoa_r+0x8d4>
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	dd11      	ble.n	8005e86 <_dtoa_r+0x7be>
 8005e62:	4639      	mov	r1, r7
 8005e64:	4632      	mov	r2, r6
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 fbec 	bl	8006644 <__pow5mult>
 8005e6c:	465a      	mov	r2, fp
 8005e6e:	4601      	mov	r1, r0
 8005e70:	4607      	mov	r7, r0
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fb40 	bl	80064f8 <__multiply>
 8005e78:	4659      	mov	r1, fp
 8005e7a:	9007      	str	r0, [sp, #28]
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f000 fa69 	bl	8006354 <_Bfree>
 8005e82:	9b07      	ldr	r3, [sp, #28]
 8005e84:	469b      	mov	fp, r3
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	1b9a      	subs	r2, r3, r6
 8005e8a:	d004      	beq.n	8005e96 <_dtoa_r+0x7ce>
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fbd8 	bl	8006644 <__pow5mult>
 8005e94:	4683      	mov	fp, r0
 8005e96:	2101      	movs	r1, #1
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fb17 	bl	80064cc <__i2b>
 8005e9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	dd7c      	ble.n	8005fa0 <_dtoa_r+0x8d8>
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4601      	mov	r1, r0
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 fbca 	bl	8006644 <__pow5mult>
 8005eb0:	9b05      	ldr	r3, [sp, #20]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	dd76      	ble.n	8005fa6 <_dtoa_r+0x8de>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9306      	str	r3, [sp, #24]
 8005ebc:	6933      	ldr	r3, [r6, #16]
 8005ebe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ec2:	6918      	ldr	r0, [r3, #16]
 8005ec4:	f000 fab2 	bl	800642c <__hi0bits>
 8005ec8:	f1c0 0020 	rsb	r0, r0, #32
 8005ecc:	9b04      	ldr	r3, [sp, #16]
 8005ece:	4418      	add	r0, r3
 8005ed0:	f010 001f 	ands.w	r0, r0, #31
 8005ed4:	f000 8086 	beq.w	8005fe4 <_dtoa_r+0x91c>
 8005ed8:	f1c0 0320 	rsb	r3, r0, #32
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	dd7f      	ble.n	8005fe0 <_dtoa_r+0x918>
 8005ee0:	f1c0 001c 	rsb	r0, r0, #28
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	4403      	add	r3, r0
 8005ee8:	4480      	add	r8, r0
 8005eea:	4405      	add	r5, r0
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	f1b8 0f00 	cmp.w	r8, #0
 8005ef2:	dd05      	ble.n	8005f00 <_dtoa_r+0x838>
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	4642      	mov	r2, r8
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fbfd 	bl	80066f8 <__lshift>
 8005efe:	4683      	mov	fp, r0
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd05      	ble.n	8005f12 <_dtoa_r+0x84a>
 8005f06:	4631      	mov	r1, r6
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fbf4 	bl	80066f8 <__lshift>
 8005f10:	4606      	mov	r6, r0
 8005f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d069      	beq.n	8005fec <_dtoa_r+0x924>
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	f000 fc58 	bl	80067d0 <__mcmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	da63      	bge.n	8005fec <_dtoa_r+0x924>
 8005f24:	2300      	movs	r3, #0
 8005f26:	4659      	mov	r1, fp
 8005f28:	220a      	movs	r2, #10
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 fa34 	bl	8006398 <__multadd>
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f36:	4683      	mov	fp, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 818f 	beq.w	800625c <_dtoa_r+0xb94>
 8005f3e:	4639      	mov	r1, r7
 8005f40:	2300      	movs	r3, #0
 8005f42:	220a      	movs	r2, #10
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fa27 	bl	8006398 <__multadd>
 8005f4a:	f1b9 0f00 	cmp.w	r9, #0
 8005f4e:	4607      	mov	r7, r0
 8005f50:	f300 808e 	bgt.w	8006070 <_dtoa_r+0x9a8>
 8005f54:	9b05      	ldr	r3, [sp, #20]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	dc50      	bgt.n	8005ffc <_dtoa_r+0x934>
 8005f5a:	e089      	b.n	8006070 <_dtoa_r+0x9a8>
 8005f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f62:	e75d      	b.n	8005e20 <_dtoa_r+0x758>
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	1e5e      	subs	r6, r3, #1
 8005f68:	9b06      	ldr	r3, [sp, #24]
 8005f6a:	42b3      	cmp	r3, r6
 8005f6c:	bfbf      	itttt	lt
 8005f6e:	9b06      	ldrlt	r3, [sp, #24]
 8005f70:	9606      	strlt	r6, [sp, #24]
 8005f72:	1af2      	sublt	r2, r6, r3
 8005f74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005f76:	bfb6      	itet	lt
 8005f78:	189b      	addlt	r3, r3, r2
 8005f7a:	1b9e      	subge	r6, r3, r6
 8005f7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	bfb8      	it	lt
 8005f82:	2600      	movlt	r6, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bfb5      	itete	lt
 8005f88:	eba8 0503 	sublt.w	r5, r8, r3
 8005f8c:	9b01      	ldrge	r3, [sp, #4]
 8005f8e:	2300      	movlt	r3, #0
 8005f90:	4645      	movge	r5, r8
 8005f92:	e747      	b.n	8005e24 <_dtoa_r+0x75c>
 8005f94:	9e06      	ldr	r6, [sp, #24]
 8005f96:	9f08      	ldr	r7, [sp, #32]
 8005f98:	4645      	mov	r5, r8
 8005f9a:	e74c      	b.n	8005e36 <_dtoa_r+0x76e>
 8005f9c:	9a06      	ldr	r2, [sp, #24]
 8005f9e:	e775      	b.n	8005e8c <_dtoa_r+0x7c4>
 8005fa0:	9b05      	ldr	r3, [sp, #20]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	dc18      	bgt.n	8005fd8 <_dtoa_r+0x910>
 8005fa6:	9b02      	ldr	r3, [sp, #8]
 8005fa8:	b9b3      	cbnz	r3, 8005fd8 <_dtoa_r+0x910>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb0:	b9a3      	cbnz	r3, 8005fdc <_dtoa_r+0x914>
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	051b      	lsls	r3, r3, #20
 8005fbc:	b12b      	cbz	r3, 8005fca <_dtoa_r+0x902>
 8005fbe:	9b04      	ldr	r3, [sp, #16]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	f108 0801 	add.w	r8, r8, #1
 8005fc8:	2301      	movs	r3, #1
 8005fca:	9306      	str	r3, [sp, #24]
 8005fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f47f af74 	bne.w	8005ebc <_dtoa_r+0x7f4>
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	e779      	b.n	8005ecc <_dtoa_r+0x804>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e7f6      	b.n	8005fca <_dtoa_r+0x902>
 8005fdc:	9b02      	ldr	r3, [sp, #8]
 8005fde:	e7f4      	b.n	8005fca <_dtoa_r+0x902>
 8005fe0:	d085      	beq.n	8005eee <_dtoa_r+0x826>
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	301c      	adds	r0, #28
 8005fe6:	e77d      	b.n	8005ee4 <_dtoa_r+0x81c>
 8005fe8:	40240000 	.word	0x40240000
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc38      	bgt.n	8006064 <_dtoa_r+0x99c>
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	dd35      	ble.n	8006064 <_dtoa_r+0x99c>
 8005ff8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005ffc:	f1b9 0f00 	cmp.w	r9, #0
 8006000:	d10d      	bne.n	800601e <_dtoa_r+0x956>
 8006002:	4631      	mov	r1, r6
 8006004:	464b      	mov	r3, r9
 8006006:	2205      	movs	r2, #5
 8006008:	4620      	mov	r0, r4
 800600a:	f000 f9c5 	bl	8006398 <__multadd>
 800600e:	4601      	mov	r1, r0
 8006010:	4606      	mov	r6, r0
 8006012:	4658      	mov	r0, fp
 8006014:	f000 fbdc 	bl	80067d0 <__mcmp>
 8006018:	2800      	cmp	r0, #0
 800601a:	f73f adbd 	bgt.w	8005b98 <_dtoa_r+0x4d0>
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	9d00      	ldr	r5, [sp, #0]
 8006022:	ea6f 0a03 	mvn.w	sl, r3
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	4631      	mov	r1, r6
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f991 	bl	8006354 <_Bfree>
 8006032:	2f00      	cmp	r7, #0
 8006034:	f43f aeb4 	beq.w	8005da0 <_dtoa_r+0x6d8>
 8006038:	f1b8 0f00 	cmp.w	r8, #0
 800603c:	d005      	beq.n	800604a <_dtoa_r+0x982>
 800603e:	45b8      	cmp	r8, r7
 8006040:	d003      	beq.n	800604a <_dtoa_r+0x982>
 8006042:	4641      	mov	r1, r8
 8006044:	4620      	mov	r0, r4
 8006046:	f000 f985 	bl	8006354 <_Bfree>
 800604a:	4639      	mov	r1, r7
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f981 	bl	8006354 <_Bfree>
 8006052:	e6a5      	b.n	8005da0 <_dtoa_r+0x6d8>
 8006054:	2600      	movs	r6, #0
 8006056:	4637      	mov	r7, r6
 8006058:	e7e1      	b.n	800601e <_dtoa_r+0x956>
 800605a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800605c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006060:	4637      	mov	r7, r6
 8006062:	e599      	b.n	8005b98 <_dtoa_r+0x4d0>
 8006064:	9b08      	ldr	r3, [sp, #32]
 8006066:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80fd 	beq.w	800626a <_dtoa_r+0xba2>
 8006070:	2d00      	cmp	r5, #0
 8006072:	dd05      	ble.n	8006080 <_dtoa_r+0x9b8>
 8006074:	4639      	mov	r1, r7
 8006076:	462a      	mov	r2, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fb3d 	bl	80066f8 <__lshift>
 800607e:	4607      	mov	r7, r0
 8006080:	9b06      	ldr	r3, [sp, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d05c      	beq.n	8006140 <_dtoa_r+0xa78>
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f923 	bl	80062d4 <_Balloc>
 800608e:	4605      	mov	r5, r0
 8006090:	b928      	cbnz	r0, 800609e <_dtoa_r+0x9d6>
 8006092:	4b80      	ldr	r3, [pc, #512]	; (8006294 <_dtoa_r+0xbcc>)
 8006094:	4602      	mov	r2, r0
 8006096:	f240 21ea 	movw	r1, #746	; 0x2ea
 800609a:	f7ff bb2e 	b.w	80056fa <_dtoa_r+0x32>
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	3202      	adds	r2, #2
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	f107 010c 	add.w	r1, r7, #12
 80060a8:	300c      	adds	r0, #12
 80060aa:	f000 f905 	bl	80062b8 <memcpy>
 80060ae:	2201      	movs	r2, #1
 80060b0:	4629      	mov	r1, r5
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb20 	bl	80066f8 <__lshift>
 80060b8:	9b00      	ldr	r3, [sp, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	9b00      	ldr	r3, [sp, #0]
 80060c0:	444b      	add	r3, r9
 80060c2:	9307      	str	r3, [sp, #28]
 80060c4:	9b02      	ldr	r3, [sp, #8]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	46b8      	mov	r8, r7
 80060cc:	9306      	str	r3, [sp, #24]
 80060ce:	4607      	mov	r7, r0
 80060d0:	9b01      	ldr	r3, [sp, #4]
 80060d2:	4631      	mov	r1, r6
 80060d4:	3b01      	subs	r3, #1
 80060d6:	4658      	mov	r0, fp
 80060d8:	9302      	str	r3, [sp, #8]
 80060da:	f7ff fa67 	bl	80055ac <quorem>
 80060de:	4603      	mov	r3, r0
 80060e0:	3330      	adds	r3, #48	; 0x30
 80060e2:	9004      	str	r0, [sp, #16]
 80060e4:	4641      	mov	r1, r8
 80060e6:	4658      	mov	r0, fp
 80060e8:	9308      	str	r3, [sp, #32]
 80060ea:	f000 fb71 	bl	80067d0 <__mcmp>
 80060ee:	463a      	mov	r2, r7
 80060f0:	4681      	mov	r9, r0
 80060f2:	4631      	mov	r1, r6
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fb87 	bl	8006808 <__mdiff>
 80060fa:	68c2      	ldr	r2, [r0, #12]
 80060fc:	9b08      	ldr	r3, [sp, #32]
 80060fe:	4605      	mov	r5, r0
 8006100:	bb02      	cbnz	r2, 8006144 <_dtoa_r+0xa7c>
 8006102:	4601      	mov	r1, r0
 8006104:	4658      	mov	r0, fp
 8006106:	f000 fb63 	bl	80067d0 <__mcmp>
 800610a:	9b08      	ldr	r3, [sp, #32]
 800610c:	4602      	mov	r2, r0
 800610e:	4629      	mov	r1, r5
 8006110:	4620      	mov	r0, r4
 8006112:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006116:	f000 f91d 	bl	8006354 <_Bfree>
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800611e:	9d01      	ldr	r5, [sp, #4]
 8006120:	ea43 0102 	orr.w	r1, r3, r2
 8006124:	9b06      	ldr	r3, [sp, #24]
 8006126:	430b      	orrs	r3, r1
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	d10d      	bne.n	8006148 <_dtoa_r+0xa80>
 800612c:	2b39      	cmp	r3, #57	; 0x39
 800612e:	d029      	beq.n	8006184 <_dtoa_r+0xabc>
 8006130:	f1b9 0f00 	cmp.w	r9, #0
 8006134:	dd01      	ble.n	800613a <_dtoa_r+0xa72>
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	3331      	adds	r3, #49	; 0x31
 800613a:	9a02      	ldr	r2, [sp, #8]
 800613c:	7013      	strb	r3, [r2, #0]
 800613e:	e774      	b.n	800602a <_dtoa_r+0x962>
 8006140:	4638      	mov	r0, r7
 8006142:	e7b9      	b.n	80060b8 <_dtoa_r+0x9f0>
 8006144:	2201      	movs	r2, #1
 8006146:	e7e2      	b.n	800610e <_dtoa_r+0xa46>
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	db06      	blt.n	800615c <_dtoa_r+0xa94>
 800614e:	9905      	ldr	r1, [sp, #20]
 8006150:	ea41 0909 	orr.w	r9, r1, r9
 8006154:	9906      	ldr	r1, [sp, #24]
 8006156:	ea59 0101 	orrs.w	r1, r9, r1
 800615a:	d120      	bne.n	800619e <_dtoa_r+0xad6>
 800615c:	2a00      	cmp	r2, #0
 800615e:	ddec      	ble.n	800613a <_dtoa_r+0xa72>
 8006160:	4659      	mov	r1, fp
 8006162:	2201      	movs	r2, #1
 8006164:	4620      	mov	r0, r4
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f000 fac6 	bl	80066f8 <__lshift>
 800616c:	4631      	mov	r1, r6
 800616e:	4683      	mov	fp, r0
 8006170:	f000 fb2e 	bl	80067d0 <__mcmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	dc02      	bgt.n	8006180 <_dtoa_r+0xab8>
 800617a:	d1de      	bne.n	800613a <_dtoa_r+0xa72>
 800617c:	07da      	lsls	r2, r3, #31
 800617e:	d5dc      	bpl.n	800613a <_dtoa_r+0xa72>
 8006180:	2b39      	cmp	r3, #57	; 0x39
 8006182:	d1d8      	bne.n	8006136 <_dtoa_r+0xa6e>
 8006184:	9a02      	ldr	r2, [sp, #8]
 8006186:	2339      	movs	r3, #57	; 0x39
 8006188:	7013      	strb	r3, [r2, #0]
 800618a:	462b      	mov	r3, r5
 800618c:	461d      	mov	r5, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006194:	2a39      	cmp	r2, #57	; 0x39
 8006196:	d050      	beq.n	800623a <_dtoa_r+0xb72>
 8006198:	3201      	adds	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e745      	b.n	800602a <_dtoa_r+0x962>
 800619e:	2a00      	cmp	r2, #0
 80061a0:	dd03      	ble.n	80061aa <_dtoa_r+0xae2>
 80061a2:	2b39      	cmp	r3, #57	; 0x39
 80061a4:	d0ee      	beq.n	8006184 <_dtoa_r+0xabc>
 80061a6:	3301      	adds	r3, #1
 80061a8:	e7c7      	b.n	800613a <_dtoa_r+0xa72>
 80061aa:	9a01      	ldr	r2, [sp, #4]
 80061ac:	9907      	ldr	r1, [sp, #28]
 80061ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061b2:	428a      	cmp	r2, r1
 80061b4:	d02a      	beq.n	800620c <_dtoa_r+0xb44>
 80061b6:	4659      	mov	r1, fp
 80061b8:	2300      	movs	r3, #0
 80061ba:	220a      	movs	r2, #10
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f8eb 	bl	8006398 <__multadd>
 80061c2:	45b8      	cmp	r8, r7
 80061c4:	4683      	mov	fp, r0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	f04f 020a 	mov.w	r2, #10
 80061ce:	4641      	mov	r1, r8
 80061d0:	4620      	mov	r0, r4
 80061d2:	d107      	bne.n	80061e4 <_dtoa_r+0xb1c>
 80061d4:	f000 f8e0 	bl	8006398 <__multadd>
 80061d8:	4680      	mov	r8, r0
 80061da:	4607      	mov	r7, r0
 80061dc:	9b01      	ldr	r3, [sp, #4]
 80061de:	3301      	adds	r3, #1
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	e775      	b.n	80060d0 <_dtoa_r+0xa08>
 80061e4:	f000 f8d8 	bl	8006398 <__multadd>
 80061e8:	4639      	mov	r1, r7
 80061ea:	4680      	mov	r8, r0
 80061ec:	2300      	movs	r3, #0
 80061ee:	220a      	movs	r2, #10
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f8d1 	bl	8006398 <__multadd>
 80061f6:	4607      	mov	r7, r0
 80061f8:	e7f0      	b.n	80061dc <_dtoa_r+0xb14>
 80061fa:	f1b9 0f00 	cmp.w	r9, #0
 80061fe:	9a00      	ldr	r2, [sp, #0]
 8006200:	bfcc      	ite	gt
 8006202:	464d      	movgt	r5, r9
 8006204:	2501      	movle	r5, #1
 8006206:	4415      	add	r5, r2
 8006208:	f04f 0800 	mov.w	r8, #0
 800620c:	4659      	mov	r1, fp
 800620e:	2201      	movs	r2, #1
 8006210:	4620      	mov	r0, r4
 8006212:	9301      	str	r3, [sp, #4]
 8006214:	f000 fa70 	bl	80066f8 <__lshift>
 8006218:	4631      	mov	r1, r6
 800621a:	4683      	mov	fp, r0
 800621c:	f000 fad8 	bl	80067d0 <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	dcb2      	bgt.n	800618a <_dtoa_r+0xac2>
 8006224:	d102      	bne.n	800622c <_dtoa_r+0xb64>
 8006226:	9b01      	ldr	r3, [sp, #4]
 8006228:	07db      	lsls	r3, r3, #31
 800622a:	d4ae      	bmi.n	800618a <_dtoa_r+0xac2>
 800622c:	462b      	mov	r3, r5
 800622e:	461d      	mov	r5, r3
 8006230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006234:	2a30      	cmp	r2, #48	; 0x30
 8006236:	d0fa      	beq.n	800622e <_dtoa_r+0xb66>
 8006238:	e6f7      	b.n	800602a <_dtoa_r+0x962>
 800623a:	9a00      	ldr	r2, [sp, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d1a5      	bne.n	800618c <_dtoa_r+0xac4>
 8006240:	f10a 0a01 	add.w	sl, sl, #1
 8006244:	2331      	movs	r3, #49	; 0x31
 8006246:	e779      	b.n	800613c <_dtoa_r+0xa74>
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <_dtoa_r+0xbd0>)
 800624a:	f7ff baaf 	b.w	80057ac <_dtoa_r+0xe4>
 800624e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f aa86 	bne.w	8005762 <_dtoa_r+0x9a>
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <_dtoa_r+0xbd4>)
 8006258:	f7ff baa8 	b.w	80057ac <_dtoa_r+0xe4>
 800625c:	f1b9 0f00 	cmp.w	r9, #0
 8006260:	dc03      	bgt.n	800626a <_dtoa_r+0xba2>
 8006262:	9b05      	ldr	r3, [sp, #20]
 8006264:	2b02      	cmp	r3, #2
 8006266:	f73f aec9 	bgt.w	8005ffc <_dtoa_r+0x934>
 800626a:	9d00      	ldr	r5, [sp, #0]
 800626c:	4631      	mov	r1, r6
 800626e:	4658      	mov	r0, fp
 8006270:	f7ff f99c 	bl	80055ac <quorem>
 8006274:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006278:	f805 3b01 	strb.w	r3, [r5], #1
 800627c:	9a00      	ldr	r2, [sp, #0]
 800627e:	1aaa      	subs	r2, r5, r2
 8006280:	4591      	cmp	r9, r2
 8006282:	ddba      	ble.n	80061fa <_dtoa_r+0xb32>
 8006284:	4659      	mov	r1, fp
 8006286:	2300      	movs	r3, #0
 8006288:	220a      	movs	r2, #10
 800628a:	4620      	mov	r0, r4
 800628c:	f000 f884 	bl	8006398 <__multadd>
 8006290:	4683      	mov	fp, r0
 8006292:	e7eb      	b.n	800626c <_dtoa_r+0xba4>
 8006294:	08007d6f 	.word	0x08007d6f
 8006298:	08007cc8 	.word	0x08007cc8
 800629c:	08007cec 	.word	0x08007cec

080062a0 <_localeconv_r>:
 80062a0:	4800      	ldr	r0, [pc, #0]	; (80062a4 <_localeconv_r+0x4>)
 80062a2:	4770      	bx	lr
 80062a4:	20000160 	.word	0x20000160

080062a8 <malloc>:
 80062a8:	4b02      	ldr	r3, [pc, #8]	; (80062b4 <malloc+0xc>)
 80062aa:	4601      	mov	r1, r0
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f000 bbef 	b.w	8006a90 <_malloc_r>
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <_Balloc>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062d8:	4604      	mov	r4, r0
 80062da:	460d      	mov	r5, r1
 80062dc:	b976      	cbnz	r6, 80062fc <_Balloc+0x28>
 80062de:	2010      	movs	r0, #16
 80062e0:	f7ff ffe2 	bl	80062a8 <malloc>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6260      	str	r0, [r4, #36]	; 0x24
 80062e8:	b920      	cbnz	r0, 80062f4 <_Balloc+0x20>
 80062ea:	4b18      	ldr	r3, [pc, #96]	; (800634c <_Balloc+0x78>)
 80062ec:	4818      	ldr	r0, [pc, #96]	; (8006350 <_Balloc+0x7c>)
 80062ee:	2166      	movs	r1, #102	; 0x66
 80062f0:	f000 fd94 	bl	8006e1c <__assert_func>
 80062f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062f8:	6006      	str	r6, [r0, #0]
 80062fa:	60c6      	str	r6, [r0, #12]
 80062fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062fe:	68f3      	ldr	r3, [r6, #12]
 8006300:	b183      	cbz	r3, 8006324 <_Balloc+0x50>
 8006302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800630a:	b9b8      	cbnz	r0, 800633c <_Balloc+0x68>
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f605 	lsl.w	r6, r1, r5
 8006312:	1d72      	adds	r2, r6, #5
 8006314:	0092      	lsls	r2, r2, #2
 8006316:	4620      	mov	r0, r4
 8006318:	f000 fb5a 	bl	80069d0 <_calloc_r>
 800631c:	b160      	cbz	r0, 8006338 <_Balloc+0x64>
 800631e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006322:	e00e      	b.n	8006342 <_Balloc+0x6e>
 8006324:	2221      	movs	r2, #33	; 0x21
 8006326:	2104      	movs	r1, #4
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fb51 	bl	80069d0 <_calloc_r>
 800632e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006330:	60f0      	str	r0, [r6, #12]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e4      	bne.n	8006302 <_Balloc+0x2e>
 8006338:	2000      	movs	r0, #0
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	6802      	ldr	r2, [r0, #0]
 800633e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006342:	2300      	movs	r3, #0
 8006344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006348:	e7f7      	b.n	800633a <_Balloc+0x66>
 800634a:	bf00      	nop
 800634c:	08007cf9 	.word	0x08007cf9
 8006350:	08007d80 	.word	0x08007d80

08006354 <_Bfree>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b976      	cbnz	r6, 800637c <_Bfree+0x28>
 800635e:	2010      	movs	r0, #16
 8006360:	f7ff ffa2 	bl	80062a8 <malloc>
 8006364:	4602      	mov	r2, r0
 8006366:	6268      	str	r0, [r5, #36]	; 0x24
 8006368:	b920      	cbnz	r0, 8006374 <_Bfree+0x20>
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <_Bfree+0x3c>)
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <_Bfree+0x40>)
 800636e:	218a      	movs	r1, #138	; 0x8a
 8006370:	f000 fd54 	bl	8006e1c <__assert_func>
 8006374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006378:	6006      	str	r6, [r0, #0]
 800637a:	60c6      	str	r6, [r0, #12]
 800637c:	b13c      	cbz	r4, 800638e <_Bfree+0x3a>
 800637e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006380:	6862      	ldr	r2, [r4, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006388:	6021      	str	r1, [r4, #0]
 800638a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	08007cf9 	.word	0x08007cf9
 8006394:	08007d80 	.word	0x08007d80

08006398 <__multadd>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	690e      	ldr	r6, [r1, #16]
 800639e:	4607      	mov	r7, r0
 80063a0:	4698      	mov	r8, r3
 80063a2:	460c      	mov	r4, r1
 80063a4:	f101 0014 	add.w	r0, r1, #20
 80063a8:	2300      	movs	r3, #0
 80063aa:	6805      	ldr	r5, [r0, #0]
 80063ac:	b2a9      	uxth	r1, r5
 80063ae:	fb02 8101 	mla	r1, r2, r1, r8
 80063b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80063b6:	0c2d      	lsrs	r5, r5, #16
 80063b8:	fb02 c505 	mla	r5, r2, r5, ip
 80063bc:	b289      	uxth	r1, r1
 80063be:	3301      	adds	r3, #1
 80063c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80063c4:	429e      	cmp	r6, r3
 80063c6:	f840 1b04 	str.w	r1, [r0], #4
 80063ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80063ce:	dcec      	bgt.n	80063aa <__multadd+0x12>
 80063d0:	f1b8 0f00 	cmp.w	r8, #0
 80063d4:	d022      	beq.n	800641c <__multadd+0x84>
 80063d6:	68a3      	ldr	r3, [r4, #8]
 80063d8:	42b3      	cmp	r3, r6
 80063da:	dc19      	bgt.n	8006410 <__multadd+0x78>
 80063dc:	6861      	ldr	r1, [r4, #4]
 80063de:	4638      	mov	r0, r7
 80063e0:	3101      	adds	r1, #1
 80063e2:	f7ff ff77 	bl	80062d4 <_Balloc>
 80063e6:	4605      	mov	r5, r0
 80063e8:	b928      	cbnz	r0, 80063f6 <__multadd+0x5e>
 80063ea:	4602      	mov	r2, r0
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <__multadd+0x8c>)
 80063ee:	480e      	ldr	r0, [pc, #56]	; (8006428 <__multadd+0x90>)
 80063f0:	21b5      	movs	r1, #181	; 0xb5
 80063f2:	f000 fd13 	bl	8006e1c <__assert_func>
 80063f6:	6922      	ldr	r2, [r4, #16]
 80063f8:	3202      	adds	r2, #2
 80063fa:	f104 010c 	add.w	r1, r4, #12
 80063fe:	0092      	lsls	r2, r2, #2
 8006400:	300c      	adds	r0, #12
 8006402:	f7ff ff59 	bl	80062b8 <memcpy>
 8006406:	4621      	mov	r1, r4
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff ffa3 	bl	8006354 <_Bfree>
 800640e:	462c      	mov	r4, r5
 8006410:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006414:	3601      	adds	r6, #1
 8006416:	f8c3 8014 	str.w	r8, [r3, #20]
 800641a:	6126      	str	r6, [r4, #16]
 800641c:	4620      	mov	r0, r4
 800641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006422:	bf00      	nop
 8006424:	08007d6f 	.word	0x08007d6f
 8006428:	08007d80 	.word	0x08007d80

0800642c <__hi0bits>:
 800642c:	0c03      	lsrs	r3, r0, #16
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	b9d3      	cbnz	r3, 8006468 <__hi0bits+0x3c>
 8006432:	0400      	lsls	r0, r0, #16
 8006434:	2310      	movs	r3, #16
 8006436:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800643a:	bf04      	itt	eq
 800643c:	0200      	lsleq	r0, r0, #8
 800643e:	3308      	addeq	r3, #8
 8006440:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006444:	bf04      	itt	eq
 8006446:	0100      	lsleq	r0, r0, #4
 8006448:	3304      	addeq	r3, #4
 800644a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800644e:	bf04      	itt	eq
 8006450:	0080      	lsleq	r0, r0, #2
 8006452:	3302      	addeq	r3, #2
 8006454:	2800      	cmp	r0, #0
 8006456:	db05      	blt.n	8006464 <__hi0bits+0x38>
 8006458:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800645c:	f103 0301 	add.w	r3, r3, #1
 8006460:	bf08      	it	eq
 8006462:	2320      	moveq	r3, #32
 8006464:	4618      	mov	r0, r3
 8006466:	4770      	bx	lr
 8006468:	2300      	movs	r3, #0
 800646a:	e7e4      	b.n	8006436 <__hi0bits+0xa>

0800646c <__lo0bits>:
 800646c:	6803      	ldr	r3, [r0, #0]
 800646e:	f013 0207 	ands.w	r2, r3, #7
 8006472:	4601      	mov	r1, r0
 8006474:	d00b      	beq.n	800648e <__lo0bits+0x22>
 8006476:	07da      	lsls	r2, r3, #31
 8006478:	d424      	bmi.n	80064c4 <__lo0bits+0x58>
 800647a:	0798      	lsls	r0, r3, #30
 800647c:	bf49      	itett	mi
 800647e:	085b      	lsrmi	r3, r3, #1
 8006480:	089b      	lsrpl	r3, r3, #2
 8006482:	2001      	movmi	r0, #1
 8006484:	600b      	strmi	r3, [r1, #0]
 8006486:	bf5c      	itt	pl
 8006488:	600b      	strpl	r3, [r1, #0]
 800648a:	2002      	movpl	r0, #2
 800648c:	4770      	bx	lr
 800648e:	b298      	uxth	r0, r3
 8006490:	b9b0      	cbnz	r0, 80064c0 <__lo0bits+0x54>
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	2010      	movs	r0, #16
 8006496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800649a:	bf04      	itt	eq
 800649c:	0a1b      	lsreq	r3, r3, #8
 800649e:	3008      	addeq	r0, #8
 80064a0:	071a      	lsls	r2, r3, #28
 80064a2:	bf04      	itt	eq
 80064a4:	091b      	lsreq	r3, r3, #4
 80064a6:	3004      	addeq	r0, #4
 80064a8:	079a      	lsls	r2, r3, #30
 80064aa:	bf04      	itt	eq
 80064ac:	089b      	lsreq	r3, r3, #2
 80064ae:	3002      	addeq	r0, #2
 80064b0:	07da      	lsls	r2, r3, #31
 80064b2:	d403      	bmi.n	80064bc <__lo0bits+0x50>
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	f100 0001 	add.w	r0, r0, #1
 80064ba:	d005      	beq.n	80064c8 <__lo0bits+0x5c>
 80064bc:	600b      	str	r3, [r1, #0]
 80064be:	4770      	bx	lr
 80064c0:	4610      	mov	r0, r2
 80064c2:	e7e8      	b.n	8006496 <__lo0bits+0x2a>
 80064c4:	2000      	movs	r0, #0
 80064c6:	4770      	bx	lr
 80064c8:	2020      	movs	r0, #32
 80064ca:	4770      	bx	lr

080064cc <__i2b>:
 80064cc:	b510      	push	{r4, lr}
 80064ce:	460c      	mov	r4, r1
 80064d0:	2101      	movs	r1, #1
 80064d2:	f7ff feff 	bl	80062d4 <_Balloc>
 80064d6:	4602      	mov	r2, r0
 80064d8:	b928      	cbnz	r0, 80064e6 <__i2b+0x1a>
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <__i2b+0x24>)
 80064dc:	4805      	ldr	r0, [pc, #20]	; (80064f4 <__i2b+0x28>)
 80064de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80064e2:	f000 fc9b 	bl	8006e1c <__assert_func>
 80064e6:	2301      	movs	r3, #1
 80064e8:	6144      	str	r4, [r0, #20]
 80064ea:	6103      	str	r3, [r0, #16]
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	bf00      	nop
 80064f0:	08007d6f 	.word	0x08007d6f
 80064f4:	08007d80 	.word	0x08007d80

080064f8 <__multiply>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	4614      	mov	r4, r2
 80064fe:	690a      	ldr	r2, [r1, #16]
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	429a      	cmp	r2, r3
 8006504:	bfb8      	it	lt
 8006506:	460b      	movlt	r3, r1
 8006508:	460d      	mov	r5, r1
 800650a:	bfbc      	itt	lt
 800650c:	4625      	movlt	r5, r4
 800650e:	461c      	movlt	r4, r3
 8006510:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006514:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006518:	68ab      	ldr	r3, [r5, #8]
 800651a:	6869      	ldr	r1, [r5, #4]
 800651c:	eb0a 0709 	add.w	r7, sl, r9
 8006520:	42bb      	cmp	r3, r7
 8006522:	b085      	sub	sp, #20
 8006524:	bfb8      	it	lt
 8006526:	3101      	addlt	r1, #1
 8006528:	f7ff fed4 	bl	80062d4 <_Balloc>
 800652c:	b930      	cbnz	r0, 800653c <__multiply+0x44>
 800652e:	4602      	mov	r2, r0
 8006530:	4b42      	ldr	r3, [pc, #264]	; (800663c <__multiply+0x144>)
 8006532:	4843      	ldr	r0, [pc, #268]	; (8006640 <__multiply+0x148>)
 8006534:	f240 115d 	movw	r1, #349	; 0x15d
 8006538:	f000 fc70 	bl	8006e1c <__assert_func>
 800653c:	f100 0614 	add.w	r6, r0, #20
 8006540:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006544:	4633      	mov	r3, r6
 8006546:	2200      	movs	r2, #0
 8006548:	4543      	cmp	r3, r8
 800654a:	d31e      	bcc.n	800658a <__multiply+0x92>
 800654c:	f105 0c14 	add.w	ip, r5, #20
 8006550:	f104 0314 	add.w	r3, r4, #20
 8006554:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006558:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800655c:	9202      	str	r2, [sp, #8]
 800655e:	ebac 0205 	sub.w	r2, ip, r5
 8006562:	3a15      	subs	r2, #21
 8006564:	f022 0203 	bic.w	r2, r2, #3
 8006568:	3204      	adds	r2, #4
 800656a:	f105 0115 	add.w	r1, r5, #21
 800656e:	458c      	cmp	ip, r1
 8006570:	bf38      	it	cc
 8006572:	2204      	movcc	r2, #4
 8006574:	9201      	str	r2, [sp, #4]
 8006576:	9a02      	ldr	r2, [sp, #8]
 8006578:	9303      	str	r3, [sp, #12]
 800657a:	429a      	cmp	r2, r3
 800657c:	d808      	bhi.n	8006590 <__multiply+0x98>
 800657e:	2f00      	cmp	r7, #0
 8006580:	dc55      	bgt.n	800662e <__multiply+0x136>
 8006582:	6107      	str	r7, [r0, #16]
 8006584:	b005      	add	sp, #20
 8006586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658a:	f843 2b04 	str.w	r2, [r3], #4
 800658e:	e7db      	b.n	8006548 <__multiply+0x50>
 8006590:	f8b3 a000 	ldrh.w	sl, [r3]
 8006594:	f1ba 0f00 	cmp.w	sl, #0
 8006598:	d020      	beq.n	80065dc <__multiply+0xe4>
 800659a:	f105 0e14 	add.w	lr, r5, #20
 800659e:	46b1      	mov	r9, r6
 80065a0:	2200      	movs	r2, #0
 80065a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80065a6:	f8d9 b000 	ldr.w	fp, [r9]
 80065aa:	b2a1      	uxth	r1, r4
 80065ac:	fa1f fb8b 	uxth.w	fp, fp
 80065b0:	fb0a b101 	mla	r1, sl, r1, fp
 80065b4:	4411      	add	r1, r2
 80065b6:	f8d9 2000 	ldr.w	r2, [r9]
 80065ba:	0c24      	lsrs	r4, r4, #16
 80065bc:	0c12      	lsrs	r2, r2, #16
 80065be:	fb0a 2404 	mla	r4, sl, r4, r2
 80065c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80065c6:	b289      	uxth	r1, r1
 80065c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065cc:	45f4      	cmp	ip, lr
 80065ce:	f849 1b04 	str.w	r1, [r9], #4
 80065d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80065d6:	d8e4      	bhi.n	80065a2 <__multiply+0xaa>
 80065d8:	9901      	ldr	r1, [sp, #4]
 80065da:	5072      	str	r2, [r6, r1]
 80065dc:	9a03      	ldr	r2, [sp, #12]
 80065de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80065e2:	3304      	adds	r3, #4
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	d01f      	beq.n	800662a <__multiply+0x132>
 80065ea:	6834      	ldr	r4, [r6, #0]
 80065ec:	f105 0114 	add.w	r1, r5, #20
 80065f0:	46b6      	mov	lr, r6
 80065f2:	f04f 0a00 	mov.w	sl, #0
 80065f6:	880a      	ldrh	r2, [r1, #0]
 80065f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80065fc:	fb09 b202 	mla	r2, r9, r2, fp
 8006600:	4492      	add	sl, r2
 8006602:	b2a4      	uxth	r4, r4
 8006604:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006608:	f84e 4b04 	str.w	r4, [lr], #4
 800660c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006610:	f8be 2000 	ldrh.w	r2, [lr]
 8006614:	0c24      	lsrs	r4, r4, #16
 8006616:	fb09 2404 	mla	r4, r9, r4, r2
 800661a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800661e:	458c      	cmp	ip, r1
 8006620:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006624:	d8e7      	bhi.n	80065f6 <__multiply+0xfe>
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	50b4      	str	r4, [r6, r2]
 800662a:	3604      	adds	r6, #4
 800662c:	e7a3      	b.n	8006576 <__multiply+0x7e>
 800662e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1a5      	bne.n	8006582 <__multiply+0x8a>
 8006636:	3f01      	subs	r7, #1
 8006638:	e7a1      	b.n	800657e <__multiply+0x86>
 800663a:	bf00      	nop
 800663c:	08007d6f 	.word	0x08007d6f
 8006640:	08007d80 	.word	0x08007d80

08006644 <__pow5mult>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	4615      	mov	r5, r2
 800664a:	f012 0203 	ands.w	r2, r2, #3
 800664e:	4606      	mov	r6, r0
 8006650:	460f      	mov	r7, r1
 8006652:	d007      	beq.n	8006664 <__pow5mult+0x20>
 8006654:	4c25      	ldr	r4, [pc, #148]	; (80066ec <__pow5mult+0xa8>)
 8006656:	3a01      	subs	r2, #1
 8006658:	2300      	movs	r3, #0
 800665a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800665e:	f7ff fe9b 	bl	8006398 <__multadd>
 8006662:	4607      	mov	r7, r0
 8006664:	10ad      	asrs	r5, r5, #2
 8006666:	d03d      	beq.n	80066e4 <__pow5mult+0xa0>
 8006668:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800666a:	b97c      	cbnz	r4, 800668c <__pow5mult+0x48>
 800666c:	2010      	movs	r0, #16
 800666e:	f7ff fe1b 	bl	80062a8 <malloc>
 8006672:	4602      	mov	r2, r0
 8006674:	6270      	str	r0, [r6, #36]	; 0x24
 8006676:	b928      	cbnz	r0, 8006684 <__pow5mult+0x40>
 8006678:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <__pow5mult+0xac>)
 800667a:	481e      	ldr	r0, [pc, #120]	; (80066f4 <__pow5mult+0xb0>)
 800667c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006680:	f000 fbcc 	bl	8006e1c <__assert_func>
 8006684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006688:	6004      	str	r4, [r0, #0]
 800668a:	60c4      	str	r4, [r0, #12]
 800668c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006694:	b94c      	cbnz	r4, 80066aa <__pow5mult+0x66>
 8006696:	f240 2171 	movw	r1, #625	; 0x271
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff ff16 	bl	80064cc <__i2b>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80066a6:	4604      	mov	r4, r0
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	f04f 0900 	mov.w	r9, #0
 80066ae:	07eb      	lsls	r3, r5, #31
 80066b0:	d50a      	bpl.n	80066c8 <__pow5mult+0x84>
 80066b2:	4639      	mov	r1, r7
 80066b4:	4622      	mov	r2, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f7ff ff1e 	bl	80064f8 <__multiply>
 80066bc:	4639      	mov	r1, r7
 80066be:	4680      	mov	r8, r0
 80066c0:	4630      	mov	r0, r6
 80066c2:	f7ff fe47 	bl	8006354 <_Bfree>
 80066c6:	4647      	mov	r7, r8
 80066c8:	106d      	asrs	r5, r5, #1
 80066ca:	d00b      	beq.n	80066e4 <__pow5mult+0xa0>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	b938      	cbnz	r0, 80066e0 <__pow5mult+0x9c>
 80066d0:	4622      	mov	r2, r4
 80066d2:	4621      	mov	r1, r4
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff ff0f 	bl	80064f8 <__multiply>
 80066da:	6020      	str	r0, [r4, #0]
 80066dc:	f8c0 9000 	str.w	r9, [r0]
 80066e0:	4604      	mov	r4, r0
 80066e2:	e7e4      	b.n	80066ae <__pow5mult+0x6a>
 80066e4:	4638      	mov	r0, r7
 80066e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ea:	bf00      	nop
 80066ec:	08007ed0 	.word	0x08007ed0
 80066f0:	08007cf9 	.word	0x08007cf9
 80066f4:	08007d80 	.word	0x08007d80

080066f8 <__lshift>:
 80066f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	460c      	mov	r4, r1
 80066fe:	6849      	ldr	r1, [r1, #4]
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006706:	68a3      	ldr	r3, [r4, #8]
 8006708:	4607      	mov	r7, r0
 800670a:	4691      	mov	r9, r2
 800670c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006710:	f108 0601 	add.w	r6, r8, #1
 8006714:	42b3      	cmp	r3, r6
 8006716:	db0b      	blt.n	8006730 <__lshift+0x38>
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff fddb 	bl	80062d4 <_Balloc>
 800671e:	4605      	mov	r5, r0
 8006720:	b948      	cbnz	r0, 8006736 <__lshift+0x3e>
 8006722:	4602      	mov	r2, r0
 8006724:	4b28      	ldr	r3, [pc, #160]	; (80067c8 <__lshift+0xd0>)
 8006726:	4829      	ldr	r0, [pc, #164]	; (80067cc <__lshift+0xd4>)
 8006728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800672c:	f000 fb76 	bl	8006e1c <__assert_func>
 8006730:	3101      	adds	r1, #1
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	e7ee      	b.n	8006714 <__lshift+0x1c>
 8006736:	2300      	movs	r3, #0
 8006738:	f100 0114 	add.w	r1, r0, #20
 800673c:	f100 0210 	add.w	r2, r0, #16
 8006740:	4618      	mov	r0, r3
 8006742:	4553      	cmp	r3, sl
 8006744:	db33      	blt.n	80067ae <__lshift+0xb6>
 8006746:	6920      	ldr	r0, [r4, #16]
 8006748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800674c:	f104 0314 	add.w	r3, r4, #20
 8006750:	f019 091f 	ands.w	r9, r9, #31
 8006754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800675c:	d02b      	beq.n	80067b6 <__lshift+0xbe>
 800675e:	f1c9 0e20 	rsb	lr, r9, #32
 8006762:	468a      	mov	sl, r1
 8006764:	2200      	movs	r2, #0
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	fa00 f009 	lsl.w	r0, r0, r9
 800676c:	4302      	orrs	r2, r0
 800676e:	f84a 2b04 	str.w	r2, [sl], #4
 8006772:	f853 2b04 	ldr.w	r2, [r3], #4
 8006776:	459c      	cmp	ip, r3
 8006778:	fa22 f20e 	lsr.w	r2, r2, lr
 800677c:	d8f3      	bhi.n	8006766 <__lshift+0x6e>
 800677e:	ebac 0304 	sub.w	r3, ip, r4
 8006782:	3b15      	subs	r3, #21
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	3304      	adds	r3, #4
 800678a:	f104 0015 	add.w	r0, r4, #21
 800678e:	4584      	cmp	ip, r0
 8006790:	bf38      	it	cc
 8006792:	2304      	movcc	r3, #4
 8006794:	50ca      	str	r2, [r1, r3]
 8006796:	b10a      	cbz	r2, 800679c <__lshift+0xa4>
 8006798:	f108 0602 	add.w	r6, r8, #2
 800679c:	3e01      	subs	r6, #1
 800679e:	4638      	mov	r0, r7
 80067a0:	612e      	str	r6, [r5, #16]
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7ff fdd6 	bl	8006354 <_Bfree>
 80067a8:	4628      	mov	r0, r5
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80067b2:	3301      	adds	r3, #1
 80067b4:	e7c5      	b.n	8006742 <__lshift+0x4a>
 80067b6:	3904      	subs	r1, #4
 80067b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80067c0:	459c      	cmp	ip, r3
 80067c2:	d8f9      	bhi.n	80067b8 <__lshift+0xc0>
 80067c4:	e7ea      	b.n	800679c <__lshift+0xa4>
 80067c6:	bf00      	nop
 80067c8:	08007d6f 	.word	0x08007d6f
 80067cc:	08007d80 	.word	0x08007d80

080067d0 <__mcmp>:
 80067d0:	b530      	push	{r4, r5, lr}
 80067d2:	6902      	ldr	r2, [r0, #16]
 80067d4:	690c      	ldr	r4, [r1, #16]
 80067d6:	1b12      	subs	r2, r2, r4
 80067d8:	d10e      	bne.n	80067f8 <__mcmp+0x28>
 80067da:	f100 0314 	add.w	r3, r0, #20
 80067de:	3114      	adds	r1, #20
 80067e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80067e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80067ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	d003      	beq.n	80067fc <__mcmp+0x2c>
 80067f4:	d305      	bcc.n	8006802 <__mcmp+0x32>
 80067f6:	2201      	movs	r2, #1
 80067f8:	4610      	mov	r0, r2
 80067fa:	bd30      	pop	{r4, r5, pc}
 80067fc:	4283      	cmp	r3, r0
 80067fe:	d3f3      	bcc.n	80067e8 <__mcmp+0x18>
 8006800:	e7fa      	b.n	80067f8 <__mcmp+0x28>
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	e7f7      	b.n	80067f8 <__mcmp+0x28>

08006808 <__mdiff>:
 8006808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	4606      	mov	r6, r0
 8006810:	4611      	mov	r1, r2
 8006812:	4620      	mov	r0, r4
 8006814:	4617      	mov	r7, r2
 8006816:	f7ff ffdb 	bl	80067d0 <__mcmp>
 800681a:	1e05      	subs	r5, r0, #0
 800681c:	d110      	bne.n	8006840 <__mdiff+0x38>
 800681e:	4629      	mov	r1, r5
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff fd57 	bl	80062d4 <_Balloc>
 8006826:	b930      	cbnz	r0, 8006836 <__mdiff+0x2e>
 8006828:	4b39      	ldr	r3, [pc, #228]	; (8006910 <__mdiff+0x108>)
 800682a:	4602      	mov	r2, r0
 800682c:	f240 2132 	movw	r1, #562	; 0x232
 8006830:	4838      	ldr	r0, [pc, #224]	; (8006914 <__mdiff+0x10c>)
 8006832:	f000 faf3 	bl	8006e1c <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800683c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	bfa4      	itt	ge
 8006842:	463b      	movge	r3, r7
 8006844:	4627      	movge	r7, r4
 8006846:	4630      	mov	r0, r6
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	bfa6      	itte	ge
 800684c:	461c      	movge	r4, r3
 800684e:	2500      	movge	r5, #0
 8006850:	2501      	movlt	r5, #1
 8006852:	f7ff fd3f 	bl	80062d4 <_Balloc>
 8006856:	b920      	cbnz	r0, 8006862 <__mdiff+0x5a>
 8006858:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <__mdiff+0x108>)
 800685a:	4602      	mov	r2, r0
 800685c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006860:	e7e6      	b.n	8006830 <__mdiff+0x28>
 8006862:	693e      	ldr	r6, [r7, #16]
 8006864:	60c5      	str	r5, [r0, #12]
 8006866:	6925      	ldr	r5, [r4, #16]
 8006868:	f107 0114 	add.w	r1, r7, #20
 800686c:	f104 0914 	add.w	r9, r4, #20
 8006870:	f100 0e14 	add.w	lr, r0, #20
 8006874:	f107 0210 	add.w	r2, r7, #16
 8006878:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800687c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006880:	46f2      	mov	sl, lr
 8006882:	2700      	movs	r7, #0
 8006884:	f859 3b04 	ldr.w	r3, [r9], #4
 8006888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800688c:	fa1f f883 	uxth.w	r8, r3
 8006890:	fa17 f78b 	uxtah	r7, r7, fp
 8006894:	0c1b      	lsrs	r3, r3, #16
 8006896:	eba7 0808 	sub.w	r8, r7, r8
 800689a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800689e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80068a2:	fa1f f888 	uxth.w	r8, r8
 80068a6:	141f      	asrs	r7, r3, #16
 80068a8:	454d      	cmp	r5, r9
 80068aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80068ae:	f84a 3b04 	str.w	r3, [sl], #4
 80068b2:	d8e7      	bhi.n	8006884 <__mdiff+0x7c>
 80068b4:	1b2b      	subs	r3, r5, r4
 80068b6:	3b15      	subs	r3, #21
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	3304      	adds	r3, #4
 80068be:	3415      	adds	r4, #21
 80068c0:	42a5      	cmp	r5, r4
 80068c2:	bf38      	it	cc
 80068c4:	2304      	movcc	r3, #4
 80068c6:	4419      	add	r1, r3
 80068c8:	4473      	add	r3, lr
 80068ca:	469e      	mov	lr, r3
 80068cc:	460d      	mov	r5, r1
 80068ce:	4565      	cmp	r5, ip
 80068d0:	d30e      	bcc.n	80068f0 <__mdiff+0xe8>
 80068d2:	f10c 0203 	add.w	r2, ip, #3
 80068d6:	1a52      	subs	r2, r2, r1
 80068d8:	f022 0203 	bic.w	r2, r2, #3
 80068dc:	3903      	subs	r1, #3
 80068de:	458c      	cmp	ip, r1
 80068e0:	bf38      	it	cc
 80068e2:	2200      	movcc	r2, #0
 80068e4:	441a      	add	r2, r3
 80068e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80068ea:	b17b      	cbz	r3, 800690c <__mdiff+0x104>
 80068ec:	6106      	str	r6, [r0, #16]
 80068ee:	e7a5      	b.n	800683c <__mdiff+0x34>
 80068f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80068f4:	fa17 f488 	uxtah	r4, r7, r8
 80068f8:	1422      	asrs	r2, r4, #16
 80068fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80068fe:	b2a4      	uxth	r4, r4
 8006900:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006904:	f84e 4b04 	str.w	r4, [lr], #4
 8006908:	1417      	asrs	r7, r2, #16
 800690a:	e7e0      	b.n	80068ce <__mdiff+0xc6>
 800690c:	3e01      	subs	r6, #1
 800690e:	e7ea      	b.n	80068e6 <__mdiff+0xde>
 8006910:	08007d6f 	.word	0x08007d6f
 8006914:	08007d80 	.word	0x08007d80

08006918 <__d2b>:
 8006918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4689      	mov	r9, r1
 800691e:	2101      	movs	r1, #1
 8006920:	ec57 6b10 	vmov	r6, r7, d0
 8006924:	4690      	mov	r8, r2
 8006926:	f7ff fcd5 	bl	80062d4 <_Balloc>
 800692a:	4604      	mov	r4, r0
 800692c:	b930      	cbnz	r0, 800693c <__d2b+0x24>
 800692e:	4602      	mov	r2, r0
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <__d2b+0xb0>)
 8006932:	4826      	ldr	r0, [pc, #152]	; (80069cc <__d2b+0xb4>)
 8006934:	f240 310a 	movw	r1, #778	; 0x30a
 8006938:	f000 fa70 	bl	8006e1c <__assert_func>
 800693c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006944:	bb35      	cbnz	r5, 8006994 <__d2b+0x7c>
 8006946:	2e00      	cmp	r6, #0
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	d028      	beq.n	800699e <__d2b+0x86>
 800694c:	4668      	mov	r0, sp
 800694e:	9600      	str	r6, [sp, #0]
 8006950:	f7ff fd8c 	bl	800646c <__lo0bits>
 8006954:	9900      	ldr	r1, [sp, #0]
 8006956:	b300      	cbz	r0, 800699a <__d2b+0x82>
 8006958:	9a01      	ldr	r2, [sp, #4]
 800695a:	f1c0 0320 	rsb	r3, r0, #32
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	430b      	orrs	r3, r1
 8006964:	40c2      	lsrs	r2, r0
 8006966:	6163      	str	r3, [r4, #20]
 8006968:	9201      	str	r2, [sp, #4]
 800696a:	9b01      	ldr	r3, [sp, #4]
 800696c:	61a3      	str	r3, [r4, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2202      	movne	r2, #2
 8006974:	2201      	moveq	r2, #1
 8006976:	6122      	str	r2, [r4, #16]
 8006978:	b1d5      	cbz	r5, 80069b0 <__d2b+0x98>
 800697a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800697e:	4405      	add	r5, r0
 8006980:	f8c9 5000 	str.w	r5, [r9]
 8006984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006988:	f8c8 0000 	str.w	r0, [r8]
 800698c:	4620      	mov	r0, r4
 800698e:	b003      	add	sp, #12
 8006990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006998:	e7d5      	b.n	8006946 <__d2b+0x2e>
 800699a:	6161      	str	r1, [r4, #20]
 800699c:	e7e5      	b.n	800696a <__d2b+0x52>
 800699e:	a801      	add	r0, sp, #4
 80069a0:	f7ff fd64 	bl	800646c <__lo0bits>
 80069a4:	9b01      	ldr	r3, [sp, #4]
 80069a6:	6163      	str	r3, [r4, #20]
 80069a8:	2201      	movs	r2, #1
 80069aa:	6122      	str	r2, [r4, #16]
 80069ac:	3020      	adds	r0, #32
 80069ae:	e7e3      	b.n	8006978 <__d2b+0x60>
 80069b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80069b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069b8:	f8c9 0000 	str.w	r0, [r9]
 80069bc:	6918      	ldr	r0, [r3, #16]
 80069be:	f7ff fd35 	bl	800642c <__hi0bits>
 80069c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069c6:	e7df      	b.n	8006988 <__d2b+0x70>
 80069c8:	08007d6f 	.word	0x08007d6f
 80069cc:	08007d80 	.word	0x08007d80

080069d0 <_calloc_r>:
 80069d0:	b513      	push	{r0, r1, r4, lr}
 80069d2:	434a      	muls	r2, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	9201      	str	r2, [sp, #4]
 80069d8:	f000 f85a 	bl	8006a90 <_malloc_r>
 80069dc:	4604      	mov	r4, r0
 80069de:	b118      	cbz	r0, 80069e8 <_calloc_r+0x18>
 80069e0:	9a01      	ldr	r2, [sp, #4]
 80069e2:	2100      	movs	r1, #0
 80069e4:	f7fe f950 	bl	8004c88 <memset>
 80069e8:	4620      	mov	r0, r4
 80069ea:	b002      	add	sp, #8
 80069ec:	bd10      	pop	{r4, pc}
	...

080069f0 <_free_r>:
 80069f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069f2:	2900      	cmp	r1, #0
 80069f4:	d048      	beq.n	8006a88 <_free_r+0x98>
 80069f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fa:	9001      	str	r0, [sp, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006a02:	bfb8      	it	lt
 8006a04:	18e4      	addlt	r4, r4, r3
 8006a06:	f000 fa65 	bl	8006ed4 <__malloc_lock>
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <_free_r+0x9c>)
 8006a0c:	9801      	ldr	r0, [sp, #4]
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	4615      	mov	r5, r2
 8006a12:	b933      	cbnz	r3, 8006a22 <_free_r+0x32>
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6014      	str	r4, [r2, #0]
 8006a18:	b003      	add	sp, #12
 8006a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a1e:	f000 ba5f 	b.w	8006ee0 <__malloc_unlock>
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	d90b      	bls.n	8006a3e <_free_r+0x4e>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	1862      	adds	r2, r4, r1
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bf04      	itt	eq
 8006a2e:	681a      	ldreq	r2, [r3, #0]
 8006a30:	685b      	ldreq	r3, [r3, #4]
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	bf04      	itt	eq
 8006a36:	1852      	addeq	r2, r2, r1
 8006a38:	6022      	streq	r2, [r4, #0]
 8006a3a:	602c      	str	r4, [r5, #0]
 8006a3c:	e7ec      	b.n	8006a18 <_free_r+0x28>
 8006a3e:	461a      	mov	r2, r3
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b10b      	cbz	r3, 8006a48 <_free_r+0x58>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x4e>
 8006a48:	6811      	ldr	r1, [r2, #0]
 8006a4a:	1855      	adds	r5, r2, r1
 8006a4c:	42a5      	cmp	r5, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x78>
 8006a50:	6824      	ldr	r4, [r4, #0]
 8006a52:	4421      	add	r1, r4
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	42a3      	cmp	r3, r4
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	d1dd      	bne.n	8006a18 <_free_r+0x28>
 8006a5c:	681c      	ldr	r4, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	6053      	str	r3, [r2, #4]
 8006a62:	4421      	add	r1, r4
 8006a64:	6011      	str	r1, [r2, #0]
 8006a66:	e7d7      	b.n	8006a18 <_free_r+0x28>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x80>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	e7d3      	b.n	8006a18 <_free_r+0x28>
 8006a70:	6825      	ldr	r5, [r4, #0]
 8006a72:	1961      	adds	r1, r4, r5
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	6063      	str	r3, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1949      	addeq	r1, r1, r5
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6054      	str	r4, [r2, #4]
 8006a86:	e7c7      	b.n	8006a18 <_free_r+0x28>
 8006a88:	b003      	add	sp, #12
 8006a8a:	bd30      	pop	{r4, r5, pc}
 8006a8c:	20000208 	.word	0x20000208

08006a90 <_malloc_r>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	1ccd      	adds	r5, r1, #3
 8006a94:	f025 0503 	bic.w	r5, r5, #3
 8006a98:	3508      	adds	r5, #8
 8006a9a:	2d0c      	cmp	r5, #12
 8006a9c:	bf38      	it	cc
 8006a9e:	250c      	movcc	r5, #12
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	db01      	blt.n	8006aaa <_malloc_r+0x1a>
 8006aa6:	42a9      	cmp	r1, r5
 8006aa8:	d903      	bls.n	8006ab2 <_malloc_r+0x22>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab2:	f000 fa0f 	bl	8006ed4 <__malloc_lock>
 8006ab6:	4921      	ldr	r1, [pc, #132]	; (8006b3c <_malloc_r+0xac>)
 8006ab8:	680a      	ldr	r2, [r1, #0]
 8006aba:	4614      	mov	r4, r2
 8006abc:	b99c      	cbnz	r4, 8006ae6 <_malloc_r+0x56>
 8006abe:	4f20      	ldr	r7, [pc, #128]	; (8006b40 <_malloc_r+0xb0>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	b923      	cbnz	r3, 8006ace <_malloc_r+0x3e>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 f998 	bl	8006dfc <_sbrk_r>
 8006acc:	6038      	str	r0, [r7, #0]
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 f993 	bl	8006dfc <_sbrk_r>
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d123      	bne.n	8006b22 <_malloc_r+0x92>
 8006ada:	230c      	movs	r3, #12
 8006adc:	6033      	str	r3, [r6, #0]
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f000 f9fe 	bl	8006ee0 <__malloc_unlock>
 8006ae4:	e7e3      	b.n	8006aae <_malloc_r+0x1e>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	1b5b      	subs	r3, r3, r5
 8006aea:	d417      	bmi.n	8006b1c <_malloc_r+0x8c>
 8006aec:	2b0b      	cmp	r3, #11
 8006aee:	d903      	bls.n	8006af8 <_malloc_r+0x68>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	441c      	add	r4, r3
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	e004      	b.n	8006b02 <_malloc_r+0x72>
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	42a2      	cmp	r2, r4
 8006afc:	bf0c      	ite	eq
 8006afe:	600b      	streq	r3, [r1, #0]
 8006b00:	6053      	strne	r3, [r2, #4]
 8006b02:	4630      	mov	r0, r6
 8006b04:	f000 f9ec 	bl	8006ee0 <__malloc_unlock>
 8006b08:	f104 000b 	add.w	r0, r4, #11
 8006b0c:	1d23      	adds	r3, r4, #4
 8006b0e:	f020 0007 	bic.w	r0, r0, #7
 8006b12:	1ac2      	subs	r2, r0, r3
 8006b14:	d0cc      	beq.n	8006ab0 <_malloc_r+0x20>
 8006b16:	1a1b      	subs	r3, r3, r0
 8006b18:	50a3      	str	r3, [r4, r2]
 8006b1a:	e7c9      	b.n	8006ab0 <_malloc_r+0x20>
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	6864      	ldr	r4, [r4, #4]
 8006b20:	e7cc      	b.n	8006abc <_malloc_r+0x2c>
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d0e3      	beq.n	8006af4 <_malloc_r+0x64>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f000 f964 	bl	8006dfc <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d1dd      	bne.n	8006af4 <_malloc_r+0x64>
 8006b38:	e7cf      	b.n	8006ada <_malloc_r+0x4a>
 8006b3a:	bf00      	nop
 8006b3c:	20000208 	.word	0x20000208
 8006b40:	2000020c 	.word	0x2000020c

08006b44 <__ssputs_r>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	688e      	ldr	r6, [r1, #8]
 8006b4a:	429e      	cmp	r6, r3
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4690      	mov	r8, r2
 8006b52:	461f      	mov	r7, r3
 8006b54:	d838      	bhi.n	8006bc8 <__ssputs_r+0x84>
 8006b56:	898a      	ldrh	r2, [r1, #12]
 8006b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b5c:	d032      	beq.n	8006bc4 <__ssputs_r+0x80>
 8006b5e:	6825      	ldr	r5, [r4, #0]
 8006b60:	6909      	ldr	r1, [r1, #16]
 8006b62:	eba5 0901 	sub.w	r9, r5, r1
 8006b66:	6965      	ldr	r5, [r4, #20]
 8006b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b70:	3301      	adds	r3, #1
 8006b72:	444b      	add	r3, r9
 8006b74:	106d      	asrs	r5, r5, #1
 8006b76:	429d      	cmp	r5, r3
 8006b78:	bf38      	it	cc
 8006b7a:	461d      	movcc	r5, r3
 8006b7c:	0553      	lsls	r3, r2, #21
 8006b7e:	d531      	bpl.n	8006be4 <__ssputs_r+0xa0>
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7ff ff85 	bl	8006a90 <_malloc_r>
 8006b86:	4606      	mov	r6, r0
 8006b88:	b950      	cbnz	r0, 8006ba0 <__ssputs_r+0x5c>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	f8ca 3000 	str.w	r3, [sl]
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	6921      	ldr	r1, [r4, #16]
 8006ba2:	464a      	mov	r2, r9
 8006ba4:	f7ff fb88 	bl	80062b8 <memcpy>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	6126      	str	r6, [r4, #16]
 8006bb6:	6165      	str	r5, [r4, #20]
 8006bb8:	444e      	add	r6, r9
 8006bba:	eba5 0509 	sub.w	r5, r5, r9
 8006bbe:	6026      	str	r6, [r4, #0]
 8006bc0:	60a5      	str	r5, [r4, #8]
 8006bc2:	463e      	mov	r6, r7
 8006bc4:	42be      	cmp	r6, r7
 8006bc6:	d900      	bls.n	8006bca <__ssputs_r+0x86>
 8006bc8:	463e      	mov	r6, r7
 8006bca:	4632      	mov	r2, r6
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	4641      	mov	r1, r8
 8006bd0:	f000 f966 	bl	8006ea0 <memmove>
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	1b9b      	subs	r3, r3, r6
 8006bda:	4432      	add	r2, r6
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	6022      	str	r2, [r4, #0]
 8006be0:	2000      	movs	r0, #0
 8006be2:	e7db      	b.n	8006b9c <__ssputs_r+0x58>
 8006be4:	462a      	mov	r2, r5
 8006be6:	f000 f981 	bl	8006eec <_realloc_r>
 8006bea:	4606      	mov	r6, r0
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d1e1      	bne.n	8006bb4 <__ssputs_r+0x70>
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	f7ff fefc 	bl	80069f0 <_free_r>
 8006bf8:	e7c7      	b.n	8006b8a <__ssputs_r+0x46>
	...

08006bfc <_svfiprintf_r>:
 8006bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	4698      	mov	r8, r3
 8006c02:	898b      	ldrh	r3, [r1, #12]
 8006c04:	061b      	lsls	r3, r3, #24
 8006c06:	b09d      	sub	sp, #116	; 0x74
 8006c08:	4607      	mov	r7, r0
 8006c0a:	460d      	mov	r5, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	d50e      	bpl.n	8006c2e <_svfiprintf_r+0x32>
 8006c10:	690b      	ldr	r3, [r1, #16]
 8006c12:	b963      	cbnz	r3, 8006c2e <_svfiprintf_r+0x32>
 8006c14:	2140      	movs	r1, #64	; 0x40
 8006c16:	f7ff ff3b 	bl	8006a90 <_malloc_r>
 8006c1a:	6028      	str	r0, [r5, #0]
 8006c1c:	6128      	str	r0, [r5, #16]
 8006c1e:	b920      	cbnz	r0, 8006c2a <_svfiprintf_r+0x2e>
 8006c20:	230c      	movs	r3, #12
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	e0d1      	b.n	8006dce <_svfiprintf_r+0x1d2>
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	616b      	str	r3, [r5, #20]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	9309      	str	r3, [sp, #36]	; 0x24
 8006c32:	2320      	movs	r3, #32
 8006c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c3c:	2330      	movs	r3, #48	; 0x30
 8006c3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006de8 <_svfiprintf_r+0x1ec>
 8006c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c46:	f04f 0901 	mov.w	r9, #1
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	469a      	mov	sl, r3
 8006c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c52:	b10a      	cbz	r2, 8006c58 <_svfiprintf_r+0x5c>
 8006c54:	2a25      	cmp	r2, #37	; 0x25
 8006c56:	d1f9      	bne.n	8006c4c <_svfiprintf_r+0x50>
 8006c58:	ebba 0b04 	subs.w	fp, sl, r4
 8006c5c:	d00b      	beq.n	8006c76 <_svfiprintf_r+0x7a>
 8006c5e:	465b      	mov	r3, fp
 8006c60:	4622      	mov	r2, r4
 8006c62:	4629      	mov	r1, r5
 8006c64:	4638      	mov	r0, r7
 8006c66:	f7ff ff6d 	bl	8006b44 <__ssputs_r>
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	f000 80aa 	beq.w	8006dc4 <_svfiprintf_r+0x1c8>
 8006c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c72:	445a      	add	r2, fp
 8006c74:	9209      	str	r2, [sp, #36]	; 0x24
 8006c76:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80a2 	beq.w	8006dc4 <_svfiprintf_r+0x1c8>
 8006c80:	2300      	movs	r3, #0
 8006c82:	f04f 32ff 	mov.w	r2, #4294967295
 8006c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c8a:	f10a 0a01 	add.w	sl, sl, #1
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	9307      	str	r3, [sp, #28]
 8006c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c96:	931a      	str	r3, [sp, #104]	; 0x68
 8006c98:	4654      	mov	r4, sl
 8006c9a:	2205      	movs	r2, #5
 8006c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca0:	4851      	ldr	r0, [pc, #324]	; (8006de8 <_svfiprintf_r+0x1ec>)
 8006ca2:	f7f9 fabd 	bl	8000220 <memchr>
 8006ca6:	9a04      	ldr	r2, [sp, #16]
 8006ca8:	b9d8      	cbnz	r0, 8006ce2 <_svfiprintf_r+0xe6>
 8006caa:	06d0      	lsls	r0, r2, #27
 8006cac:	bf44      	itt	mi
 8006cae:	2320      	movmi	r3, #32
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb4:	0711      	lsls	r1, r2, #28
 8006cb6:	bf44      	itt	mi
 8006cb8:	232b      	movmi	r3, #43	; 0x2b
 8006cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc4:	d015      	beq.n	8006cf2 <_svfiprintf_r+0xf6>
 8006cc6:	9a07      	ldr	r2, [sp, #28]
 8006cc8:	4654      	mov	r4, sl
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f04f 0c0a 	mov.w	ip, #10
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cd6:	3b30      	subs	r3, #48	; 0x30
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	d94e      	bls.n	8006d7a <_svfiprintf_r+0x17e>
 8006cdc:	b1b0      	cbz	r0, 8006d0c <_svfiprintf_r+0x110>
 8006cde:	9207      	str	r2, [sp, #28]
 8006ce0:	e014      	b.n	8006d0c <_svfiprintf_r+0x110>
 8006ce2:	eba0 0308 	sub.w	r3, r0, r8
 8006ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	46a2      	mov	sl, r4
 8006cf0:	e7d2      	b.n	8006c98 <_svfiprintf_r+0x9c>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	1d19      	adds	r1, r3, #4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	9103      	str	r1, [sp, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfbb      	ittet	lt
 8006cfe:	425b      	neglt	r3, r3
 8006d00:	f042 0202 	orrlt.w	r2, r2, #2
 8006d04:	9307      	strge	r3, [sp, #28]
 8006d06:	9307      	strlt	r3, [sp, #28]
 8006d08:	bfb8      	it	lt
 8006d0a:	9204      	strlt	r2, [sp, #16]
 8006d0c:	7823      	ldrb	r3, [r4, #0]
 8006d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d10:	d10c      	bne.n	8006d2c <_svfiprintf_r+0x130>
 8006d12:	7863      	ldrb	r3, [r4, #1]
 8006d14:	2b2a      	cmp	r3, #42	; 0x2a
 8006d16:	d135      	bne.n	8006d84 <_svfiprintf_r+0x188>
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	9203      	str	r2, [sp, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfb8      	it	lt
 8006d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d28:	3402      	adds	r4, #2
 8006d2a:	9305      	str	r3, [sp, #20]
 8006d2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006df8 <_svfiprintf_r+0x1fc>
 8006d30:	7821      	ldrb	r1, [r4, #0]
 8006d32:	2203      	movs	r2, #3
 8006d34:	4650      	mov	r0, sl
 8006d36:	f7f9 fa73 	bl	8000220 <memchr>
 8006d3a:	b140      	cbz	r0, 8006d4e <_svfiprintf_r+0x152>
 8006d3c:	2340      	movs	r3, #64	; 0x40
 8006d3e:	eba0 000a 	sub.w	r0, r0, sl
 8006d42:	fa03 f000 	lsl.w	r0, r3, r0
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	4303      	orrs	r3, r0
 8006d4a:	3401      	adds	r4, #1
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d52:	4826      	ldr	r0, [pc, #152]	; (8006dec <_svfiprintf_r+0x1f0>)
 8006d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d58:	2206      	movs	r2, #6
 8006d5a:	f7f9 fa61 	bl	8000220 <memchr>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d038      	beq.n	8006dd4 <_svfiprintf_r+0x1d8>
 8006d62:	4b23      	ldr	r3, [pc, #140]	; (8006df0 <_svfiprintf_r+0x1f4>)
 8006d64:	bb1b      	cbnz	r3, 8006dae <_svfiprintf_r+0x1b2>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	3307      	adds	r3, #7
 8006d6a:	f023 0307 	bic.w	r3, r3, #7
 8006d6e:	3308      	adds	r3, #8
 8006d70:	9303      	str	r3, [sp, #12]
 8006d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d74:	4433      	add	r3, r6
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	e767      	b.n	8006c4a <_svfiprintf_r+0x4e>
 8006d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d7e:	460c      	mov	r4, r1
 8006d80:	2001      	movs	r0, #1
 8006d82:	e7a5      	b.n	8006cd0 <_svfiprintf_r+0xd4>
 8006d84:	2300      	movs	r3, #0
 8006d86:	3401      	adds	r4, #1
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f04f 0c0a 	mov.w	ip, #10
 8006d90:	4620      	mov	r0, r4
 8006d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d96:	3a30      	subs	r2, #48	; 0x30
 8006d98:	2a09      	cmp	r2, #9
 8006d9a:	d903      	bls.n	8006da4 <_svfiprintf_r+0x1a8>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0c5      	beq.n	8006d2c <_svfiprintf_r+0x130>
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	e7c3      	b.n	8006d2c <_svfiprintf_r+0x130>
 8006da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006da8:	4604      	mov	r4, r0
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7f0      	b.n	8006d90 <_svfiprintf_r+0x194>
 8006dae:	ab03      	add	r3, sp, #12
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	462a      	mov	r2, r5
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <_svfiprintf_r+0x1f8>)
 8006db6:	a904      	add	r1, sp, #16
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7fe f80d 	bl	8004dd8 <_printf_float>
 8006dbe:	1c42      	adds	r2, r0, #1
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	d1d6      	bne.n	8006d72 <_svfiprintf_r+0x176>
 8006dc4:	89ab      	ldrh	r3, [r5, #12]
 8006dc6:	065b      	lsls	r3, r3, #25
 8006dc8:	f53f af2c 	bmi.w	8006c24 <_svfiprintf_r+0x28>
 8006dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dce:	b01d      	add	sp, #116	; 0x74
 8006dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd4:	ab03      	add	r3, sp, #12
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <_svfiprintf_r+0x1f8>)
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7fe fa9e 	bl	8005320 <_printf_i>
 8006de4:	e7eb      	b.n	8006dbe <_svfiprintf_r+0x1c2>
 8006de6:	bf00      	nop
 8006de8:	08007edc 	.word	0x08007edc
 8006dec:	08007ee6 	.word	0x08007ee6
 8006df0:	08004dd9 	.word	0x08004dd9
 8006df4:	08006b45 	.word	0x08006b45
 8006df8:	08007ee2 	.word	0x08007ee2

08006dfc <_sbrk_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d06      	ldr	r5, [pc, #24]	; (8006e18 <_sbrk_r+0x1c>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	f7fa ff90 	bl	8001d2c <_sbrk>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_sbrk_r+0x1a>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_sbrk_r+0x1a>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	20000398 	.word	0x20000398

08006e1c <__assert_func>:
 8006e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e1e:	4614      	mov	r4, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <__assert_func+0x2c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4605      	mov	r5, r0
 8006e28:	68d8      	ldr	r0, [r3, #12]
 8006e2a:	b14c      	cbz	r4, 8006e40 <__assert_func+0x24>
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <__assert_func+0x30>)
 8006e2e:	9100      	str	r1, [sp, #0]
 8006e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e34:	4906      	ldr	r1, [pc, #24]	; (8006e50 <__assert_func+0x34>)
 8006e36:	462b      	mov	r3, r5
 8006e38:	f000 f80e 	bl	8006e58 <fiprintf>
 8006e3c:	f000 faa4 	bl	8007388 <abort>
 8006e40:	4b04      	ldr	r3, [pc, #16]	; (8006e54 <__assert_func+0x38>)
 8006e42:	461c      	mov	r4, r3
 8006e44:	e7f3      	b.n	8006e2e <__assert_func+0x12>
 8006e46:	bf00      	nop
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	08007eed 	.word	0x08007eed
 8006e50:	08007efa 	.word	0x08007efa
 8006e54:	08007f28 	.word	0x08007f28

08006e58 <fiprintf>:
 8006e58:	b40e      	push	{r1, r2, r3}
 8006e5a:	b503      	push	{r0, r1, lr}
 8006e5c:	4601      	mov	r1, r0
 8006e5e:	ab03      	add	r3, sp, #12
 8006e60:	4805      	ldr	r0, [pc, #20]	; (8006e78 <fiprintf+0x20>)
 8006e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e66:	6800      	ldr	r0, [r0, #0]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	f000 f88f 	bl	8006f8c <_vfiprintf_r>
 8006e6e:	b002      	add	sp, #8
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	2000000c 	.word	0x2000000c

08006e7c <__ascii_mbtowc>:
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	b901      	cbnz	r1, 8006e82 <__ascii_mbtowc+0x6>
 8006e80:	a901      	add	r1, sp, #4
 8006e82:	b142      	cbz	r2, 8006e96 <__ascii_mbtowc+0x1a>
 8006e84:	b14b      	cbz	r3, 8006e9a <__ascii_mbtowc+0x1e>
 8006e86:	7813      	ldrb	r3, [r2, #0]
 8006e88:	600b      	str	r3, [r1, #0]
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	1e10      	subs	r0, r2, #0
 8006e8e:	bf18      	it	ne
 8006e90:	2001      	movne	r0, #1
 8006e92:	b002      	add	sp, #8
 8006e94:	4770      	bx	lr
 8006e96:	4610      	mov	r0, r2
 8006e98:	e7fb      	b.n	8006e92 <__ascii_mbtowc+0x16>
 8006e9a:	f06f 0001 	mvn.w	r0, #1
 8006e9e:	e7f8      	b.n	8006e92 <__ascii_mbtowc+0x16>

08006ea0 <memmove>:
 8006ea0:	4288      	cmp	r0, r1
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	eb01 0402 	add.w	r4, r1, r2
 8006ea8:	d902      	bls.n	8006eb0 <memmove+0x10>
 8006eaa:	4284      	cmp	r4, r0
 8006eac:	4623      	mov	r3, r4
 8006eae:	d807      	bhi.n	8006ec0 <memmove+0x20>
 8006eb0:	1e43      	subs	r3, r0, #1
 8006eb2:	42a1      	cmp	r1, r4
 8006eb4:	d008      	beq.n	8006ec8 <memmove+0x28>
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ebe:	e7f8      	b.n	8006eb2 <memmove+0x12>
 8006ec0:	4402      	add	r2, r0
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	d100      	bne.n	8006eca <memmove+0x2a>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed2:	e7f7      	b.n	8006ec4 <memmove+0x24>

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f000 bc17 	b.w	8007708 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	200003a0 	.word	0x200003a0

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f000 bc12 	b.w	800770a <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	200003a0 	.word	0x200003a0

08006eec <_realloc_r>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	4607      	mov	r7, r0
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	460e      	mov	r6, r1
 8006ef4:	b921      	cbnz	r1, 8006f00 <_realloc_r+0x14>
 8006ef6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006efa:	4611      	mov	r1, r2
 8006efc:	f7ff bdc8 	b.w	8006a90 <_malloc_r>
 8006f00:	b922      	cbnz	r2, 8006f0c <_realloc_r+0x20>
 8006f02:	f7ff fd75 	bl	80069f0 <_free_r>
 8006f06:	4625      	mov	r5, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	f000 fc62 	bl	80077d4 <_malloc_usable_size_r>
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d20f      	bcs.n	8006f34 <_realloc_r+0x48>
 8006f14:	4621      	mov	r1, r4
 8006f16:	4638      	mov	r0, r7
 8006f18:	f7ff fdba 	bl	8006a90 <_malloc_r>
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0f2      	beq.n	8006f08 <_realloc_r+0x1c>
 8006f22:	4631      	mov	r1, r6
 8006f24:	4622      	mov	r2, r4
 8006f26:	f7ff f9c7 	bl	80062b8 <memcpy>
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff fd5f 	bl	80069f0 <_free_r>
 8006f32:	e7e9      	b.n	8006f08 <_realloc_r+0x1c>
 8006f34:	4635      	mov	r5, r6
 8006f36:	e7e7      	b.n	8006f08 <_realloc_r+0x1c>

08006f38 <__sfputc_r>:
 8006f38:	6893      	ldr	r3, [r2, #8]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	b410      	push	{r4}
 8006f40:	6093      	str	r3, [r2, #8]
 8006f42:	da08      	bge.n	8006f56 <__sfputc_r+0x1e>
 8006f44:	6994      	ldr	r4, [r2, #24]
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	db01      	blt.n	8006f4e <__sfputc_r+0x16>
 8006f4a:	290a      	cmp	r1, #10
 8006f4c:	d103      	bne.n	8006f56 <__sfputc_r+0x1e>
 8006f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f52:	f000 b94b 	b.w	80071ec <__swbuf_r>
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	1c58      	adds	r0, r3, #1
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	7019      	strb	r1, [r3, #0]
 8006f5e:	4608      	mov	r0, r1
 8006f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <__sfputs_r>:
 8006f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f68:	4606      	mov	r6, r0
 8006f6a:	460f      	mov	r7, r1
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	18d5      	adds	r5, r2, r3
 8006f70:	42ac      	cmp	r4, r5
 8006f72:	d101      	bne.n	8006f78 <__sfputs_r+0x12>
 8006f74:	2000      	movs	r0, #0
 8006f76:	e007      	b.n	8006f88 <__sfputs_r+0x22>
 8006f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f7ff ffda 	bl	8006f38 <__sfputc_r>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d1f3      	bne.n	8006f70 <__sfputs_r+0xa>
 8006f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f8c <_vfiprintf_r>:
 8006f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	460d      	mov	r5, r1
 8006f92:	b09d      	sub	sp, #116	; 0x74
 8006f94:	4614      	mov	r4, r2
 8006f96:	4698      	mov	r8, r3
 8006f98:	4606      	mov	r6, r0
 8006f9a:	b118      	cbz	r0, 8006fa4 <_vfiprintf_r+0x18>
 8006f9c:	6983      	ldr	r3, [r0, #24]
 8006f9e:	b90b      	cbnz	r3, 8006fa4 <_vfiprintf_r+0x18>
 8006fa0:	f000 fb14 	bl	80075cc <__sinit>
 8006fa4:	4b89      	ldr	r3, [pc, #548]	; (80071cc <_vfiprintf_r+0x240>)
 8006fa6:	429d      	cmp	r5, r3
 8006fa8:	d11b      	bne.n	8006fe2 <_vfiprintf_r+0x56>
 8006faa:	6875      	ldr	r5, [r6, #4]
 8006fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fae:	07d9      	lsls	r1, r3, #31
 8006fb0:	d405      	bmi.n	8006fbe <_vfiprintf_r+0x32>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	059a      	lsls	r2, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <_vfiprintf_r+0x32>
 8006fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fba:	f000 fba5 	bl	8007708 <__retarget_lock_acquire_recursive>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	071b      	lsls	r3, r3, #28
 8006fc2:	d501      	bpl.n	8006fc8 <_vfiprintf_r+0x3c>
 8006fc4:	692b      	ldr	r3, [r5, #16]
 8006fc6:	b9eb      	cbnz	r3, 8007004 <_vfiprintf_r+0x78>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f000 f96e 	bl	80072ac <__swsetup_r>
 8006fd0:	b1c0      	cbz	r0, 8007004 <_vfiprintf_r+0x78>
 8006fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd4:	07dc      	lsls	r4, r3, #31
 8006fd6:	d50e      	bpl.n	8006ff6 <_vfiprintf_r+0x6a>
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	b01d      	add	sp, #116	; 0x74
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	4b7b      	ldr	r3, [pc, #492]	; (80071d0 <_vfiprintf_r+0x244>)
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	d101      	bne.n	8006fec <_vfiprintf_r+0x60>
 8006fe8:	68b5      	ldr	r5, [r6, #8]
 8006fea:	e7df      	b.n	8006fac <_vfiprintf_r+0x20>
 8006fec:	4b79      	ldr	r3, [pc, #484]	; (80071d4 <_vfiprintf_r+0x248>)
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	bf08      	it	eq
 8006ff2:	68f5      	ldreq	r5, [r6, #12]
 8006ff4:	e7da      	b.n	8006fac <_vfiprintf_r+0x20>
 8006ff6:	89ab      	ldrh	r3, [r5, #12]
 8006ff8:	0598      	lsls	r0, r3, #22
 8006ffa:	d4ed      	bmi.n	8006fd8 <_vfiprintf_r+0x4c>
 8006ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffe:	f000 fb84 	bl	800770a <__retarget_lock_release_recursive>
 8007002:	e7e9      	b.n	8006fd8 <_vfiprintf_r+0x4c>
 8007004:	2300      	movs	r3, #0
 8007006:	9309      	str	r3, [sp, #36]	; 0x24
 8007008:	2320      	movs	r3, #32
 800700a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800700e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007012:	2330      	movs	r3, #48	; 0x30
 8007014:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071d8 <_vfiprintf_r+0x24c>
 8007018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800701c:	f04f 0901 	mov.w	r9, #1
 8007020:	4623      	mov	r3, r4
 8007022:	469a      	mov	sl, r3
 8007024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007028:	b10a      	cbz	r2, 800702e <_vfiprintf_r+0xa2>
 800702a:	2a25      	cmp	r2, #37	; 0x25
 800702c:	d1f9      	bne.n	8007022 <_vfiprintf_r+0x96>
 800702e:	ebba 0b04 	subs.w	fp, sl, r4
 8007032:	d00b      	beq.n	800704c <_vfiprintf_r+0xc0>
 8007034:	465b      	mov	r3, fp
 8007036:	4622      	mov	r2, r4
 8007038:	4629      	mov	r1, r5
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff ff93 	bl	8006f66 <__sfputs_r>
 8007040:	3001      	adds	r0, #1
 8007042:	f000 80aa 	beq.w	800719a <_vfiprintf_r+0x20e>
 8007046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007048:	445a      	add	r2, fp
 800704a:	9209      	str	r2, [sp, #36]	; 0x24
 800704c:	f89a 3000 	ldrb.w	r3, [sl]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80a2 	beq.w	800719a <_vfiprintf_r+0x20e>
 8007056:	2300      	movs	r3, #0
 8007058:	f04f 32ff 	mov.w	r2, #4294967295
 800705c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007060:	f10a 0a01 	add.w	sl, sl, #1
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	9307      	str	r3, [sp, #28]
 8007068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800706c:	931a      	str	r3, [sp, #104]	; 0x68
 800706e:	4654      	mov	r4, sl
 8007070:	2205      	movs	r2, #5
 8007072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007076:	4858      	ldr	r0, [pc, #352]	; (80071d8 <_vfiprintf_r+0x24c>)
 8007078:	f7f9 f8d2 	bl	8000220 <memchr>
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	b9d8      	cbnz	r0, 80070b8 <_vfiprintf_r+0x12c>
 8007080:	06d1      	lsls	r1, r2, #27
 8007082:	bf44      	itt	mi
 8007084:	2320      	movmi	r3, #32
 8007086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800708a:	0713      	lsls	r3, r2, #28
 800708c:	bf44      	itt	mi
 800708e:	232b      	movmi	r3, #43	; 0x2b
 8007090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007094:	f89a 3000 	ldrb.w	r3, [sl]
 8007098:	2b2a      	cmp	r3, #42	; 0x2a
 800709a:	d015      	beq.n	80070c8 <_vfiprintf_r+0x13c>
 800709c:	9a07      	ldr	r2, [sp, #28]
 800709e:	4654      	mov	r4, sl
 80070a0:	2000      	movs	r0, #0
 80070a2:	f04f 0c0a 	mov.w	ip, #10
 80070a6:	4621      	mov	r1, r4
 80070a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ac:	3b30      	subs	r3, #48	; 0x30
 80070ae:	2b09      	cmp	r3, #9
 80070b0:	d94e      	bls.n	8007150 <_vfiprintf_r+0x1c4>
 80070b2:	b1b0      	cbz	r0, 80070e2 <_vfiprintf_r+0x156>
 80070b4:	9207      	str	r2, [sp, #28]
 80070b6:	e014      	b.n	80070e2 <_vfiprintf_r+0x156>
 80070b8:	eba0 0308 	sub.w	r3, r0, r8
 80070bc:	fa09 f303 	lsl.w	r3, r9, r3
 80070c0:	4313      	orrs	r3, r2
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	46a2      	mov	sl, r4
 80070c6:	e7d2      	b.n	800706e <_vfiprintf_r+0xe2>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	1d19      	adds	r1, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfbb      	ittet	lt
 80070d4:	425b      	neglt	r3, r3
 80070d6:	f042 0202 	orrlt.w	r2, r2, #2
 80070da:	9307      	strge	r3, [sp, #28]
 80070dc:	9307      	strlt	r3, [sp, #28]
 80070de:	bfb8      	it	lt
 80070e0:	9204      	strlt	r2, [sp, #16]
 80070e2:	7823      	ldrb	r3, [r4, #0]
 80070e4:	2b2e      	cmp	r3, #46	; 0x2e
 80070e6:	d10c      	bne.n	8007102 <_vfiprintf_r+0x176>
 80070e8:	7863      	ldrb	r3, [r4, #1]
 80070ea:	2b2a      	cmp	r3, #42	; 0x2a
 80070ec:	d135      	bne.n	800715a <_vfiprintf_r+0x1ce>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9203      	str	r2, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfb8      	it	lt
 80070fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80070fe:	3402      	adds	r4, #2
 8007100:	9305      	str	r3, [sp, #20]
 8007102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071e8 <_vfiprintf_r+0x25c>
 8007106:	7821      	ldrb	r1, [r4, #0]
 8007108:	2203      	movs	r2, #3
 800710a:	4650      	mov	r0, sl
 800710c:	f7f9 f888 	bl	8000220 <memchr>
 8007110:	b140      	cbz	r0, 8007124 <_vfiprintf_r+0x198>
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	eba0 000a 	sub.w	r0, r0, sl
 8007118:	fa03 f000 	lsl.w	r0, r3, r0
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	4303      	orrs	r3, r0
 8007120:	3401      	adds	r4, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007128:	482c      	ldr	r0, [pc, #176]	; (80071dc <_vfiprintf_r+0x250>)
 800712a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800712e:	2206      	movs	r2, #6
 8007130:	f7f9 f876 	bl	8000220 <memchr>
 8007134:	2800      	cmp	r0, #0
 8007136:	d03f      	beq.n	80071b8 <_vfiprintf_r+0x22c>
 8007138:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <_vfiprintf_r+0x254>)
 800713a:	bb1b      	cbnz	r3, 8007184 <_vfiprintf_r+0x1f8>
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	3307      	adds	r3, #7
 8007140:	f023 0307 	bic.w	r3, r3, #7
 8007144:	3308      	adds	r3, #8
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714a:	443b      	add	r3, r7
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	e767      	b.n	8007020 <_vfiprintf_r+0x94>
 8007150:	fb0c 3202 	mla	r2, ip, r2, r3
 8007154:	460c      	mov	r4, r1
 8007156:	2001      	movs	r0, #1
 8007158:	e7a5      	b.n	80070a6 <_vfiprintf_r+0x11a>
 800715a:	2300      	movs	r3, #0
 800715c:	3401      	adds	r4, #1
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	4619      	mov	r1, r3
 8007162:	f04f 0c0a 	mov.w	ip, #10
 8007166:	4620      	mov	r0, r4
 8007168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716c:	3a30      	subs	r2, #48	; 0x30
 800716e:	2a09      	cmp	r2, #9
 8007170:	d903      	bls.n	800717a <_vfiprintf_r+0x1ee>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0c5      	beq.n	8007102 <_vfiprintf_r+0x176>
 8007176:	9105      	str	r1, [sp, #20]
 8007178:	e7c3      	b.n	8007102 <_vfiprintf_r+0x176>
 800717a:	fb0c 2101 	mla	r1, ip, r1, r2
 800717e:	4604      	mov	r4, r0
 8007180:	2301      	movs	r3, #1
 8007182:	e7f0      	b.n	8007166 <_vfiprintf_r+0x1da>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <_vfiprintf_r+0x258>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4630      	mov	r0, r6
 8007190:	f7fd fe22 	bl	8004dd8 <_printf_float>
 8007194:	4607      	mov	r7, r0
 8007196:	1c78      	adds	r0, r7, #1
 8007198:	d1d6      	bne.n	8007148 <_vfiprintf_r+0x1bc>
 800719a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719c:	07d9      	lsls	r1, r3, #31
 800719e:	d405      	bmi.n	80071ac <_vfiprintf_r+0x220>
 80071a0:	89ab      	ldrh	r3, [r5, #12]
 80071a2:	059a      	lsls	r2, r3, #22
 80071a4:	d402      	bmi.n	80071ac <_vfiprintf_r+0x220>
 80071a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a8:	f000 faaf 	bl	800770a <__retarget_lock_release_recursive>
 80071ac:	89ab      	ldrh	r3, [r5, #12]
 80071ae:	065b      	lsls	r3, r3, #25
 80071b0:	f53f af12 	bmi.w	8006fd8 <_vfiprintf_r+0x4c>
 80071b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b6:	e711      	b.n	8006fdc <_vfiprintf_r+0x50>
 80071b8:	ab03      	add	r3, sp, #12
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	462a      	mov	r2, r5
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <_vfiprintf_r+0x258>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7fe f8ac 	bl	8005320 <_printf_i>
 80071c8:	e7e4      	b.n	8007194 <_vfiprintf_r+0x208>
 80071ca:	bf00      	nop
 80071cc:	08008054 	.word	0x08008054
 80071d0:	08008074 	.word	0x08008074
 80071d4:	08008034 	.word	0x08008034
 80071d8:	08007edc 	.word	0x08007edc
 80071dc:	08007ee6 	.word	0x08007ee6
 80071e0:	08004dd9 	.word	0x08004dd9
 80071e4:	08006f67 	.word	0x08006f67
 80071e8:	08007ee2 	.word	0x08007ee2

080071ec <__swbuf_r>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	460e      	mov	r6, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	4605      	mov	r5, r0
 80071f4:	b118      	cbz	r0, 80071fe <__swbuf_r+0x12>
 80071f6:	6983      	ldr	r3, [r0, #24]
 80071f8:	b90b      	cbnz	r3, 80071fe <__swbuf_r+0x12>
 80071fa:	f000 f9e7 	bl	80075cc <__sinit>
 80071fe:	4b21      	ldr	r3, [pc, #132]	; (8007284 <__swbuf_r+0x98>)
 8007200:	429c      	cmp	r4, r3
 8007202:	d12b      	bne.n	800725c <__swbuf_r+0x70>
 8007204:	686c      	ldr	r4, [r5, #4]
 8007206:	69a3      	ldr	r3, [r4, #24]
 8007208:	60a3      	str	r3, [r4, #8]
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	071a      	lsls	r2, r3, #28
 800720e:	d52f      	bpl.n	8007270 <__swbuf_r+0x84>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	b36b      	cbz	r3, 8007270 <__swbuf_r+0x84>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	6820      	ldr	r0, [r4, #0]
 8007218:	1ac0      	subs	r0, r0, r3
 800721a:	6963      	ldr	r3, [r4, #20]
 800721c:	b2f6      	uxtb	r6, r6
 800721e:	4283      	cmp	r3, r0
 8007220:	4637      	mov	r7, r6
 8007222:	dc04      	bgt.n	800722e <__swbuf_r+0x42>
 8007224:	4621      	mov	r1, r4
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f93c 	bl	80074a4 <_fflush_r>
 800722c:	bb30      	cbnz	r0, 800727c <__swbuf_r+0x90>
 800722e:	68a3      	ldr	r3, [r4, #8]
 8007230:	3b01      	subs	r3, #1
 8007232:	60a3      	str	r3, [r4, #8]
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	6022      	str	r2, [r4, #0]
 800723a:	701e      	strb	r6, [r3, #0]
 800723c:	6963      	ldr	r3, [r4, #20]
 800723e:	3001      	adds	r0, #1
 8007240:	4283      	cmp	r3, r0
 8007242:	d004      	beq.n	800724e <__swbuf_r+0x62>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	07db      	lsls	r3, r3, #31
 8007248:	d506      	bpl.n	8007258 <__swbuf_r+0x6c>
 800724a:	2e0a      	cmp	r6, #10
 800724c:	d104      	bne.n	8007258 <__swbuf_r+0x6c>
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f927 	bl	80074a4 <_fflush_r>
 8007256:	b988      	cbnz	r0, 800727c <__swbuf_r+0x90>
 8007258:	4638      	mov	r0, r7
 800725a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <__swbuf_r+0x9c>)
 800725e:	429c      	cmp	r4, r3
 8007260:	d101      	bne.n	8007266 <__swbuf_r+0x7a>
 8007262:	68ac      	ldr	r4, [r5, #8]
 8007264:	e7cf      	b.n	8007206 <__swbuf_r+0x1a>
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <__swbuf_r+0xa0>)
 8007268:	429c      	cmp	r4, r3
 800726a:	bf08      	it	eq
 800726c:	68ec      	ldreq	r4, [r5, #12]
 800726e:	e7ca      	b.n	8007206 <__swbuf_r+0x1a>
 8007270:	4621      	mov	r1, r4
 8007272:	4628      	mov	r0, r5
 8007274:	f000 f81a 	bl	80072ac <__swsetup_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	d0cb      	beq.n	8007214 <__swbuf_r+0x28>
 800727c:	f04f 37ff 	mov.w	r7, #4294967295
 8007280:	e7ea      	b.n	8007258 <__swbuf_r+0x6c>
 8007282:	bf00      	nop
 8007284:	08008054 	.word	0x08008054
 8007288:	08008074 	.word	0x08008074
 800728c:	08008034 	.word	0x08008034

08007290 <__ascii_wctomb>:
 8007290:	b149      	cbz	r1, 80072a6 <__ascii_wctomb+0x16>
 8007292:	2aff      	cmp	r2, #255	; 0xff
 8007294:	bf85      	ittet	hi
 8007296:	238a      	movhi	r3, #138	; 0x8a
 8007298:	6003      	strhi	r3, [r0, #0]
 800729a:	700a      	strbls	r2, [r1, #0]
 800729c:	f04f 30ff 	movhi.w	r0, #4294967295
 80072a0:	bf98      	it	ls
 80072a2:	2001      	movls	r0, #1
 80072a4:	4770      	bx	lr
 80072a6:	4608      	mov	r0, r1
 80072a8:	4770      	bx	lr
	...

080072ac <__swsetup_r>:
 80072ac:	4b32      	ldr	r3, [pc, #200]	; (8007378 <__swsetup_r+0xcc>)
 80072ae:	b570      	push	{r4, r5, r6, lr}
 80072b0:	681d      	ldr	r5, [r3, #0]
 80072b2:	4606      	mov	r6, r0
 80072b4:	460c      	mov	r4, r1
 80072b6:	b125      	cbz	r5, 80072c2 <__swsetup_r+0x16>
 80072b8:	69ab      	ldr	r3, [r5, #24]
 80072ba:	b913      	cbnz	r3, 80072c2 <__swsetup_r+0x16>
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 f985 	bl	80075cc <__sinit>
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <__swsetup_r+0xd0>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	d10f      	bne.n	80072e8 <__swsetup_r+0x3c>
 80072c8:	686c      	ldr	r4, [r5, #4]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072d0:	0719      	lsls	r1, r3, #28
 80072d2:	d42c      	bmi.n	800732e <__swsetup_r+0x82>
 80072d4:	06dd      	lsls	r5, r3, #27
 80072d6:	d411      	bmi.n	80072fc <__swsetup_r+0x50>
 80072d8:	2309      	movs	r3, #9
 80072da:	6033      	str	r3, [r6, #0]
 80072dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072e0:	81a3      	strh	r3, [r4, #12]
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295
 80072e6:	e03e      	b.n	8007366 <__swsetup_r+0xba>
 80072e8:	4b25      	ldr	r3, [pc, #148]	; (8007380 <__swsetup_r+0xd4>)
 80072ea:	429c      	cmp	r4, r3
 80072ec:	d101      	bne.n	80072f2 <__swsetup_r+0x46>
 80072ee:	68ac      	ldr	r4, [r5, #8]
 80072f0:	e7eb      	b.n	80072ca <__swsetup_r+0x1e>
 80072f2:	4b24      	ldr	r3, [pc, #144]	; (8007384 <__swsetup_r+0xd8>)
 80072f4:	429c      	cmp	r4, r3
 80072f6:	bf08      	it	eq
 80072f8:	68ec      	ldreq	r4, [r5, #12]
 80072fa:	e7e6      	b.n	80072ca <__swsetup_r+0x1e>
 80072fc:	0758      	lsls	r0, r3, #29
 80072fe:	d512      	bpl.n	8007326 <__swsetup_r+0x7a>
 8007300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007302:	b141      	cbz	r1, 8007316 <__swsetup_r+0x6a>
 8007304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <__swsetup_r+0x66>
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff fb6f 	bl	80069f0 <_free_r>
 8007312:	2300      	movs	r3, #0
 8007314:	6363      	str	r3, [r4, #52]	; 0x34
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	2300      	movs	r3, #0
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	f043 0308 	orr.w	r3, r3, #8
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	b94b      	cbnz	r3, 8007346 <__swsetup_r+0x9a>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733c:	d003      	beq.n	8007346 <__swsetup_r+0x9a>
 800733e:	4621      	mov	r1, r4
 8007340:	4630      	mov	r0, r6
 8007342:	f000 fa07 	bl	8007754 <__smakebuf_r>
 8007346:	89a0      	ldrh	r0, [r4, #12]
 8007348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800734c:	f010 0301 	ands.w	r3, r0, #1
 8007350:	d00a      	beq.n	8007368 <__swsetup_r+0xbc>
 8007352:	2300      	movs	r3, #0
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	6963      	ldr	r3, [r4, #20]
 8007358:	425b      	negs	r3, r3
 800735a:	61a3      	str	r3, [r4, #24]
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	b943      	cbnz	r3, 8007372 <__swsetup_r+0xc6>
 8007360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007364:	d1ba      	bne.n	80072dc <__swsetup_r+0x30>
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	0781      	lsls	r1, r0, #30
 800736a:	bf58      	it	pl
 800736c:	6963      	ldrpl	r3, [r4, #20]
 800736e:	60a3      	str	r3, [r4, #8]
 8007370:	e7f4      	b.n	800735c <__swsetup_r+0xb0>
 8007372:	2000      	movs	r0, #0
 8007374:	e7f7      	b.n	8007366 <__swsetup_r+0xba>
 8007376:	bf00      	nop
 8007378:	2000000c 	.word	0x2000000c
 800737c:	08008054 	.word	0x08008054
 8007380:	08008074 	.word	0x08008074
 8007384:	08008034 	.word	0x08008034

08007388 <abort>:
 8007388:	b508      	push	{r3, lr}
 800738a:	2006      	movs	r0, #6
 800738c:	f000 fa52 	bl	8007834 <raise>
 8007390:	2001      	movs	r0, #1
 8007392:	f7fa fc9f 	bl	8001cd4 <_exit>
	...

08007398 <__sflush_r>:
 8007398:	898a      	ldrh	r2, [r1, #12]
 800739a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739e:	4605      	mov	r5, r0
 80073a0:	0710      	lsls	r0, r2, #28
 80073a2:	460c      	mov	r4, r1
 80073a4:	d458      	bmi.n	8007458 <__sflush_r+0xc0>
 80073a6:	684b      	ldr	r3, [r1, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dc05      	bgt.n	80073b8 <__sflush_r+0x20>
 80073ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dc02      	bgt.n	80073b8 <__sflush_r+0x20>
 80073b2:	2000      	movs	r0, #0
 80073b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d0f9      	beq.n	80073b2 <__sflush_r+0x1a>
 80073be:	2300      	movs	r3, #0
 80073c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073c4:	682f      	ldr	r7, [r5, #0]
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	d032      	beq.n	8007430 <__sflush_r+0x98>
 80073ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	075a      	lsls	r2, r3, #29
 80073d0:	d505      	bpl.n	80073de <__sflush_r+0x46>
 80073d2:	6863      	ldr	r3, [r4, #4]
 80073d4:	1ac0      	subs	r0, r0, r3
 80073d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073d8:	b10b      	cbz	r3, 80073de <__sflush_r+0x46>
 80073da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073dc:	1ac0      	subs	r0, r0, r3
 80073de:	2300      	movs	r3, #0
 80073e0:	4602      	mov	r2, r0
 80073e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073e4:	6a21      	ldr	r1, [r4, #32]
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b0      	blx	r6
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	d106      	bne.n	80073fe <__sflush_r+0x66>
 80073f0:	6829      	ldr	r1, [r5, #0]
 80073f2:	291d      	cmp	r1, #29
 80073f4:	d82c      	bhi.n	8007450 <__sflush_r+0xb8>
 80073f6:	4a2a      	ldr	r2, [pc, #168]	; (80074a0 <__sflush_r+0x108>)
 80073f8:	40ca      	lsrs	r2, r1
 80073fa:	07d6      	lsls	r6, r2, #31
 80073fc:	d528      	bpl.n	8007450 <__sflush_r+0xb8>
 80073fe:	2200      	movs	r2, #0
 8007400:	6062      	str	r2, [r4, #4]
 8007402:	04d9      	lsls	r1, r3, #19
 8007404:	6922      	ldr	r2, [r4, #16]
 8007406:	6022      	str	r2, [r4, #0]
 8007408:	d504      	bpl.n	8007414 <__sflush_r+0x7c>
 800740a:	1c42      	adds	r2, r0, #1
 800740c:	d101      	bne.n	8007412 <__sflush_r+0x7a>
 800740e:	682b      	ldr	r3, [r5, #0]
 8007410:	b903      	cbnz	r3, 8007414 <__sflush_r+0x7c>
 8007412:	6560      	str	r0, [r4, #84]	; 0x54
 8007414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007416:	602f      	str	r7, [r5, #0]
 8007418:	2900      	cmp	r1, #0
 800741a:	d0ca      	beq.n	80073b2 <__sflush_r+0x1a>
 800741c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007420:	4299      	cmp	r1, r3
 8007422:	d002      	beq.n	800742a <__sflush_r+0x92>
 8007424:	4628      	mov	r0, r5
 8007426:	f7ff fae3 	bl	80069f0 <_free_r>
 800742a:	2000      	movs	r0, #0
 800742c:	6360      	str	r0, [r4, #52]	; 0x34
 800742e:	e7c1      	b.n	80073b4 <__sflush_r+0x1c>
 8007430:	6a21      	ldr	r1, [r4, #32]
 8007432:	2301      	movs	r3, #1
 8007434:	4628      	mov	r0, r5
 8007436:	47b0      	blx	r6
 8007438:	1c41      	adds	r1, r0, #1
 800743a:	d1c7      	bne.n	80073cc <__sflush_r+0x34>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0c4      	beq.n	80073cc <__sflush_r+0x34>
 8007442:	2b1d      	cmp	r3, #29
 8007444:	d001      	beq.n	800744a <__sflush_r+0xb2>
 8007446:	2b16      	cmp	r3, #22
 8007448:	d101      	bne.n	800744e <__sflush_r+0xb6>
 800744a:	602f      	str	r7, [r5, #0]
 800744c:	e7b1      	b.n	80073b2 <__sflush_r+0x1a>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	e7ad      	b.n	80073b4 <__sflush_r+0x1c>
 8007458:	690f      	ldr	r7, [r1, #16]
 800745a:	2f00      	cmp	r7, #0
 800745c:	d0a9      	beq.n	80073b2 <__sflush_r+0x1a>
 800745e:	0793      	lsls	r3, r2, #30
 8007460:	680e      	ldr	r6, [r1, #0]
 8007462:	bf08      	it	eq
 8007464:	694b      	ldreq	r3, [r1, #20]
 8007466:	600f      	str	r7, [r1, #0]
 8007468:	bf18      	it	ne
 800746a:	2300      	movne	r3, #0
 800746c:	eba6 0807 	sub.w	r8, r6, r7
 8007470:	608b      	str	r3, [r1, #8]
 8007472:	f1b8 0f00 	cmp.w	r8, #0
 8007476:	dd9c      	ble.n	80073b2 <__sflush_r+0x1a>
 8007478:	6a21      	ldr	r1, [r4, #32]
 800747a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800747c:	4643      	mov	r3, r8
 800747e:	463a      	mov	r2, r7
 8007480:	4628      	mov	r0, r5
 8007482:	47b0      	blx	r6
 8007484:	2800      	cmp	r0, #0
 8007486:	dc06      	bgt.n	8007496 <__sflush_r+0xfe>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748e:	81a3      	strh	r3, [r4, #12]
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e78e      	b.n	80073b4 <__sflush_r+0x1c>
 8007496:	4407      	add	r7, r0
 8007498:	eba8 0800 	sub.w	r8, r8, r0
 800749c:	e7e9      	b.n	8007472 <__sflush_r+0xda>
 800749e:	bf00      	nop
 80074a0:	20400001 	.word	0x20400001

080074a4 <_fflush_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	4605      	mov	r5, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	b913      	cbnz	r3, 80074b4 <_fflush_r+0x10>
 80074ae:	2500      	movs	r5, #0
 80074b0:	4628      	mov	r0, r5
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	b118      	cbz	r0, 80074be <_fflush_r+0x1a>
 80074b6:	6983      	ldr	r3, [r0, #24]
 80074b8:	b90b      	cbnz	r3, 80074be <_fflush_r+0x1a>
 80074ba:	f000 f887 	bl	80075cc <__sinit>
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <_fflush_r+0x6c>)
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d11b      	bne.n	80074fc <_fflush_r+0x58>
 80074c4:	686c      	ldr	r4, [r5, #4]
 80074c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0ef      	beq.n	80074ae <_fflush_r+0xa>
 80074ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074d0:	07d0      	lsls	r0, r2, #31
 80074d2:	d404      	bmi.n	80074de <_fflush_r+0x3a>
 80074d4:	0599      	lsls	r1, r3, #22
 80074d6:	d402      	bmi.n	80074de <_fflush_r+0x3a>
 80074d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074da:	f000 f915 	bl	8007708 <__retarget_lock_acquire_recursive>
 80074de:	4628      	mov	r0, r5
 80074e0:	4621      	mov	r1, r4
 80074e2:	f7ff ff59 	bl	8007398 <__sflush_r>
 80074e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074e8:	07da      	lsls	r2, r3, #31
 80074ea:	4605      	mov	r5, r0
 80074ec:	d4e0      	bmi.n	80074b0 <_fflush_r+0xc>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	059b      	lsls	r3, r3, #22
 80074f2:	d4dd      	bmi.n	80074b0 <_fflush_r+0xc>
 80074f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074f6:	f000 f908 	bl	800770a <__retarget_lock_release_recursive>
 80074fa:	e7d9      	b.n	80074b0 <_fflush_r+0xc>
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <_fflush_r+0x70>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <_fflush_r+0x62>
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	e7df      	b.n	80074c6 <_fflush_r+0x22>
 8007506:	4b04      	ldr	r3, [pc, #16]	; (8007518 <_fflush_r+0x74>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68ec      	ldreq	r4, [r5, #12]
 800750e:	e7da      	b.n	80074c6 <_fflush_r+0x22>
 8007510:	08008054 	.word	0x08008054
 8007514:	08008074 	.word	0x08008074
 8007518:	08008034 	.word	0x08008034

0800751c <std>:
 800751c:	2300      	movs	r3, #0
 800751e:	b510      	push	{r4, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	e9c0 3300 	strd	r3, r3, [r0]
 8007526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800752a:	6083      	str	r3, [r0, #8]
 800752c:	8181      	strh	r1, [r0, #12]
 800752e:	6643      	str	r3, [r0, #100]	; 0x64
 8007530:	81c2      	strh	r2, [r0, #14]
 8007532:	6183      	str	r3, [r0, #24]
 8007534:	4619      	mov	r1, r3
 8007536:	2208      	movs	r2, #8
 8007538:	305c      	adds	r0, #92	; 0x5c
 800753a:	f7fd fba5 	bl	8004c88 <memset>
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <std+0x38>)
 8007540:	6263      	str	r3, [r4, #36]	; 0x24
 8007542:	4b05      	ldr	r3, [pc, #20]	; (8007558 <std+0x3c>)
 8007544:	62a3      	str	r3, [r4, #40]	; 0x28
 8007546:	4b05      	ldr	r3, [pc, #20]	; (800755c <std+0x40>)
 8007548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <std+0x44>)
 800754c:	6224      	str	r4, [r4, #32]
 800754e:	6323      	str	r3, [r4, #48]	; 0x30
 8007550:	bd10      	pop	{r4, pc}
 8007552:	bf00      	nop
 8007554:	0800786d 	.word	0x0800786d
 8007558:	0800788f 	.word	0x0800788f
 800755c:	080078c7 	.word	0x080078c7
 8007560:	080078eb 	.word	0x080078eb

08007564 <_cleanup_r>:
 8007564:	4901      	ldr	r1, [pc, #4]	; (800756c <_cleanup_r+0x8>)
 8007566:	f000 b8af 	b.w	80076c8 <_fwalk_reent>
 800756a:	bf00      	nop
 800756c:	080074a5 	.word	0x080074a5

08007570 <__sfmoreglue>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	1e4a      	subs	r2, r1, #1
 8007574:	2568      	movs	r5, #104	; 0x68
 8007576:	4355      	muls	r5, r2
 8007578:	460e      	mov	r6, r1
 800757a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800757e:	f7ff fa87 	bl	8006a90 <_malloc_r>
 8007582:	4604      	mov	r4, r0
 8007584:	b140      	cbz	r0, 8007598 <__sfmoreglue+0x28>
 8007586:	2100      	movs	r1, #0
 8007588:	e9c0 1600 	strd	r1, r6, [r0]
 800758c:	300c      	adds	r0, #12
 800758e:	60a0      	str	r0, [r4, #8]
 8007590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007594:	f7fd fb78 	bl	8004c88 <memset>
 8007598:	4620      	mov	r0, r4
 800759a:	bd70      	pop	{r4, r5, r6, pc}

0800759c <__sfp_lock_acquire>:
 800759c:	4801      	ldr	r0, [pc, #4]	; (80075a4 <__sfp_lock_acquire+0x8>)
 800759e:	f000 b8b3 	b.w	8007708 <__retarget_lock_acquire_recursive>
 80075a2:	bf00      	nop
 80075a4:	200003a4 	.word	0x200003a4

080075a8 <__sfp_lock_release>:
 80075a8:	4801      	ldr	r0, [pc, #4]	; (80075b0 <__sfp_lock_release+0x8>)
 80075aa:	f000 b8ae 	b.w	800770a <__retarget_lock_release_recursive>
 80075ae:	bf00      	nop
 80075b0:	200003a4 	.word	0x200003a4

080075b4 <__sinit_lock_acquire>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__sinit_lock_acquire+0x8>)
 80075b6:	f000 b8a7 	b.w	8007708 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	2000039f 	.word	0x2000039f

080075c0 <__sinit_lock_release>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__sinit_lock_release+0x8>)
 80075c2:	f000 b8a2 	b.w	800770a <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	2000039f 	.word	0x2000039f

080075cc <__sinit>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4604      	mov	r4, r0
 80075d0:	f7ff fff0 	bl	80075b4 <__sinit_lock_acquire>
 80075d4:	69a3      	ldr	r3, [r4, #24]
 80075d6:	b11b      	cbz	r3, 80075e0 <__sinit+0x14>
 80075d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075dc:	f7ff bff0 	b.w	80075c0 <__sinit_lock_release>
 80075e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075e4:	6523      	str	r3, [r4, #80]	; 0x50
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <__sinit+0x68>)
 80075e8:	4a13      	ldr	r2, [pc, #76]	; (8007638 <__sinit+0x6c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	bf04      	itt	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	61a3      	streq	r3, [r4, #24]
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f820 	bl	800763c <__sfp>
 80075fc:	6060      	str	r0, [r4, #4]
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 f81c 	bl	800763c <__sfp>
 8007604:	60a0      	str	r0, [r4, #8]
 8007606:	4620      	mov	r0, r4
 8007608:	f000 f818 	bl	800763c <__sfp>
 800760c:	2200      	movs	r2, #0
 800760e:	60e0      	str	r0, [r4, #12]
 8007610:	2104      	movs	r1, #4
 8007612:	6860      	ldr	r0, [r4, #4]
 8007614:	f7ff ff82 	bl	800751c <std>
 8007618:	68a0      	ldr	r0, [r4, #8]
 800761a:	2201      	movs	r2, #1
 800761c:	2109      	movs	r1, #9
 800761e:	f7ff ff7d 	bl	800751c <std>
 8007622:	68e0      	ldr	r0, [r4, #12]
 8007624:	2202      	movs	r2, #2
 8007626:	2112      	movs	r1, #18
 8007628:	f7ff ff78 	bl	800751c <std>
 800762c:	2301      	movs	r3, #1
 800762e:	61a3      	str	r3, [r4, #24]
 8007630:	e7d2      	b.n	80075d8 <__sinit+0xc>
 8007632:	bf00      	nop
 8007634:	08007cb4 	.word	0x08007cb4
 8007638:	08007565 	.word	0x08007565

0800763c <__sfp>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	4607      	mov	r7, r0
 8007640:	f7ff ffac 	bl	800759c <__sfp_lock_acquire>
 8007644:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <__sfp+0x84>)
 8007646:	681e      	ldr	r6, [r3, #0]
 8007648:	69b3      	ldr	r3, [r6, #24]
 800764a:	b913      	cbnz	r3, 8007652 <__sfp+0x16>
 800764c:	4630      	mov	r0, r6
 800764e:	f7ff ffbd 	bl	80075cc <__sinit>
 8007652:	3648      	adds	r6, #72	; 0x48
 8007654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007658:	3b01      	subs	r3, #1
 800765a:	d503      	bpl.n	8007664 <__sfp+0x28>
 800765c:	6833      	ldr	r3, [r6, #0]
 800765e:	b30b      	cbz	r3, 80076a4 <__sfp+0x68>
 8007660:	6836      	ldr	r6, [r6, #0]
 8007662:	e7f7      	b.n	8007654 <__sfp+0x18>
 8007664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007668:	b9d5      	cbnz	r5, 80076a0 <__sfp+0x64>
 800766a:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <__sfp+0x88>)
 800766c:	60e3      	str	r3, [r4, #12]
 800766e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007672:	6665      	str	r5, [r4, #100]	; 0x64
 8007674:	f000 f847 	bl	8007706 <__retarget_lock_init_recursive>
 8007678:	f7ff ff96 	bl	80075a8 <__sfp_lock_release>
 800767c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007684:	6025      	str	r5, [r4, #0]
 8007686:	61a5      	str	r5, [r4, #24]
 8007688:	2208      	movs	r2, #8
 800768a:	4629      	mov	r1, r5
 800768c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007690:	f7fd fafa 	bl	8004c88 <memset>
 8007694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800769c:	4620      	mov	r0, r4
 800769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a0:	3468      	adds	r4, #104	; 0x68
 80076a2:	e7d9      	b.n	8007658 <__sfp+0x1c>
 80076a4:	2104      	movs	r1, #4
 80076a6:	4638      	mov	r0, r7
 80076a8:	f7ff ff62 	bl	8007570 <__sfmoreglue>
 80076ac:	4604      	mov	r4, r0
 80076ae:	6030      	str	r0, [r6, #0]
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d1d5      	bne.n	8007660 <__sfp+0x24>
 80076b4:	f7ff ff78 	bl	80075a8 <__sfp_lock_release>
 80076b8:	230c      	movs	r3, #12
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	e7ee      	b.n	800769c <__sfp+0x60>
 80076be:	bf00      	nop
 80076c0:	08007cb4 	.word	0x08007cb4
 80076c4:	ffff0001 	.word	0xffff0001

080076c8 <_fwalk_reent>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	4606      	mov	r6, r0
 80076ce:	4688      	mov	r8, r1
 80076d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076d4:	2700      	movs	r7, #0
 80076d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076da:	f1b9 0901 	subs.w	r9, r9, #1
 80076de:	d505      	bpl.n	80076ec <_fwalk_reent+0x24>
 80076e0:	6824      	ldr	r4, [r4, #0]
 80076e2:	2c00      	cmp	r4, #0
 80076e4:	d1f7      	bne.n	80076d6 <_fwalk_reent+0xe>
 80076e6:	4638      	mov	r0, r7
 80076e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ec:	89ab      	ldrh	r3, [r5, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d907      	bls.n	8007702 <_fwalk_reent+0x3a>
 80076f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076f6:	3301      	adds	r3, #1
 80076f8:	d003      	beq.n	8007702 <_fwalk_reent+0x3a>
 80076fa:	4629      	mov	r1, r5
 80076fc:	4630      	mov	r0, r6
 80076fe:	47c0      	blx	r8
 8007700:	4307      	orrs	r7, r0
 8007702:	3568      	adds	r5, #104	; 0x68
 8007704:	e7e9      	b.n	80076da <_fwalk_reent+0x12>

08007706 <__retarget_lock_init_recursive>:
 8007706:	4770      	bx	lr

08007708 <__retarget_lock_acquire_recursive>:
 8007708:	4770      	bx	lr

0800770a <__retarget_lock_release_recursive>:
 800770a:	4770      	bx	lr

0800770c <__swhatbuf_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	460e      	mov	r6, r1
 8007710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007714:	2900      	cmp	r1, #0
 8007716:	b096      	sub	sp, #88	; 0x58
 8007718:	4614      	mov	r4, r2
 800771a:	461d      	mov	r5, r3
 800771c:	da07      	bge.n	800772e <__swhatbuf_r+0x22>
 800771e:	2300      	movs	r3, #0
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	89b3      	ldrh	r3, [r6, #12]
 8007724:	061a      	lsls	r2, r3, #24
 8007726:	d410      	bmi.n	800774a <__swhatbuf_r+0x3e>
 8007728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772c:	e00e      	b.n	800774c <__swhatbuf_r+0x40>
 800772e:	466a      	mov	r2, sp
 8007730:	f000 f902 	bl	8007938 <_fstat_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	dbf2      	blt.n	800771e <__swhatbuf_r+0x12>
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800773e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007742:	425a      	negs	r2, r3
 8007744:	415a      	adcs	r2, r3
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	e7ee      	b.n	8007728 <__swhatbuf_r+0x1c>
 800774a:	2340      	movs	r3, #64	; 0x40
 800774c:	2000      	movs	r0, #0
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	b016      	add	sp, #88	; 0x58
 8007752:	bd70      	pop	{r4, r5, r6, pc}

08007754 <__smakebuf_r>:
 8007754:	898b      	ldrh	r3, [r1, #12]
 8007756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007758:	079d      	lsls	r5, r3, #30
 800775a:	4606      	mov	r6, r0
 800775c:	460c      	mov	r4, r1
 800775e:	d507      	bpl.n	8007770 <__smakebuf_r+0x1c>
 8007760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	2301      	movs	r3, #1
 800776a:	6163      	str	r3, [r4, #20]
 800776c:	b002      	add	sp, #8
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	ab01      	add	r3, sp, #4
 8007772:	466a      	mov	r2, sp
 8007774:	f7ff ffca 	bl	800770c <__swhatbuf_r>
 8007778:	9900      	ldr	r1, [sp, #0]
 800777a:	4605      	mov	r5, r0
 800777c:	4630      	mov	r0, r6
 800777e:	f7ff f987 	bl	8006a90 <_malloc_r>
 8007782:	b948      	cbnz	r0, 8007798 <__smakebuf_r+0x44>
 8007784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007788:	059a      	lsls	r2, r3, #22
 800778a:	d4ef      	bmi.n	800776c <__smakebuf_r+0x18>
 800778c:	f023 0303 	bic.w	r3, r3, #3
 8007790:	f043 0302 	orr.w	r3, r3, #2
 8007794:	81a3      	strh	r3, [r4, #12]
 8007796:	e7e3      	b.n	8007760 <__smakebuf_r+0xc>
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <__smakebuf_r+0x7c>)
 800779a:	62b3      	str	r3, [r6, #40]	; 0x28
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	6020      	str	r0, [r4, #0]
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	81a3      	strh	r3, [r4, #12]
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	6163      	str	r3, [r4, #20]
 80077aa:	9b01      	ldr	r3, [sp, #4]
 80077ac:	6120      	str	r0, [r4, #16]
 80077ae:	b15b      	cbz	r3, 80077c8 <__smakebuf_r+0x74>
 80077b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f8d1 	bl	800795c <_isatty_r>
 80077ba:	b128      	cbz	r0, 80077c8 <__smakebuf_r+0x74>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f023 0303 	bic.w	r3, r3, #3
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	89a0      	ldrh	r0, [r4, #12]
 80077ca:	4305      	orrs	r5, r0
 80077cc:	81a5      	strh	r5, [r4, #12]
 80077ce:	e7cd      	b.n	800776c <__smakebuf_r+0x18>
 80077d0:	08007565 	.word	0x08007565

080077d4 <_malloc_usable_size_r>:
 80077d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d8:	1f18      	subs	r0, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfbc      	itt	lt
 80077de:	580b      	ldrlt	r3, [r1, r0]
 80077e0:	18c0      	addlt	r0, r0, r3
 80077e2:	4770      	bx	lr

080077e4 <_raise_r>:
 80077e4:	291f      	cmp	r1, #31
 80077e6:	b538      	push	{r3, r4, r5, lr}
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	d904      	bls.n	80077f8 <_raise_r+0x14>
 80077ee:	2316      	movs	r3, #22
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	f04f 30ff 	mov.w	r0, #4294967295
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077fa:	b112      	cbz	r2, 8007802 <_raise_r+0x1e>
 80077fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007800:	b94b      	cbnz	r3, 8007816 <_raise_r+0x32>
 8007802:	4620      	mov	r0, r4
 8007804:	f000 f830 	bl	8007868 <_getpid_r>
 8007808:	462a      	mov	r2, r5
 800780a:	4601      	mov	r1, r0
 800780c:	4620      	mov	r0, r4
 800780e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007812:	f000 b817 	b.w	8007844 <_kill_r>
 8007816:	2b01      	cmp	r3, #1
 8007818:	d00a      	beq.n	8007830 <_raise_r+0x4c>
 800781a:	1c59      	adds	r1, r3, #1
 800781c:	d103      	bne.n	8007826 <_raise_r+0x42>
 800781e:	2316      	movs	r3, #22
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	2001      	movs	r0, #1
 8007824:	e7e7      	b.n	80077f6 <_raise_r+0x12>
 8007826:	2400      	movs	r4, #0
 8007828:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800782c:	4628      	mov	r0, r5
 800782e:	4798      	blx	r3
 8007830:	2000      	movs	r0, #0
 8007832:	e7e0      	b.n	80077f6 <_raise_r+0x12>

08007834 <raise>:
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <raise+0xc>)
 8007836:	4601      	mov	r1, r0
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f7ff bfd3 	b.w	80077e4 <_raise_r>
 800783e:	bf00      	nop
 8007840:	2000000c 	.word	0x2000000c

08007844 <_kill_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4d07      	ldr	r5, [pc, #28]	; (8007864 <_kill_r+0x20>)
 8007848:	2300      	movs	r3, #0
 800784a:	4604      	mov	r4, r0
 800784c:	4608      	mov	r0, r1
 800784e:	4611      	mov	r1, r2
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f7fa fa37 	bl	8001cc4 <_kill>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d102      	bne.n	8007860 <_kill_r+0x1c>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	b103      	cbz	r3, 8007860 <_kill_r+0x1c>
 800785e:	6023      	str	r3, [r4, #0]
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	bf00      	nop
 8007864:	20000398 	.word	0x20000398

08007868 <_getpid_r>:
 8007868:	f7fa ba2a 	b.w	8001cc0 <_getpid>

0800786c <__sread>:
 800786c:	b510      	push	{r4, lr}
 800786e:	460c      	mov	r4, r1
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	f000 f894 	bl	80079a0 <_read_r>
 8007878:	2800      	cmp	r0, #0
 800787a:	bfab      	itete	ge
 800787c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800787e:	89a3      	ldrhlt	r3, [r4, #12]
 8007880:	181b      	addge	r3, r3, r0
 8007882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007886:	bfac      	ite	ge
 8007888:	6563      	strge	r3, [r4, #84]	; 0x54
 800788a:	81a3      	strhlt	r3, [r4, #12]
 800788c:	bd10      	pop	{r4, pc}

0800788e <__swrite>:
 800788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	461f      	mov	r7, r3
 8007894:	898b      	ldrh	r3, [r1, #12]
 8007896:	05db      	lsls	r3, r3, #23
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	4616      	mov	r6, r2
 800789e:	d505      	bpl.n	80078ac <__swrite+0x1e>
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	2302      	movs	r3, #2
 80078a6:	2200      	movs	r2, #0
 80078a8:	f000 f868 	bl	800797c <_lseek_r>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	4632      	mov	r2, r6
 80078ba:	463b      	mov	r3, r7
 80078bc:	4628      	mov	r0, r5
 80078be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	f000 b817 	b.w	80078f4 <_write_r>

080078c6 <__sseek>:
 80078c6:	b510      	push	{r4, lr}
 80078c8:	460c      	mov	r4, r1
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 f855 	bl	800797c <_lseek_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	bf15      	itete	ne
 80078d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078e2:	81a3      	strheq	r3, [r4, #12]
 80078e4:	bf18      	it	ne
 80078e6:	81a3      	strhne	r3, [r4, #12]
 80078e8:	bd10      	pop	{r4, pc}

080078ea <__sclose>:
 80078ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ee:	f000 b813 	b.w	8007918 <_close_r>
	...

080078f4 <_write_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d07      	ldr	r5, [pc, #28]	; (8007914 <_write_r+0x20>)
 80078f8:	4604      	mov	r4, r0
 80078fa:	4608      	mov	r0, r1
 80078fc:	4611      	mov	r1, r2
 80078fe:	2200      	movs	r2, #0
 8007900:	602a      	str	r2, [r5, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f7fa f9f9 	bl	8001cfa <_write>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d102      	bne.n	8007912 <_write_r+0x1e>
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	b103      	cbz	r3, 8007912 <_write_r+0x1e>
 8007910:	6023      	str	r3, [r4, #0]
 8007912:	bd38      	pop	{r3, r4, r5, pc}
 8007914:	20000398 	.word	0x20000398

08007918 <_close_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d06      	ldr	r5, [pc, #24]	; (8007934 <_close_r+0x1c>)
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	f7fa f9f6 	bl	8001d14 <_close>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_close_r+0x1a>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_close_r+0x1a>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20000398 	.word	0x20000398

08007938 <_fstat_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	; (8007958 <_fstat_r+0x20>)
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	4611      	mov	r1, r2
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	f7fa f9e8 	bl	8001d1a <_fstat>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d102      	bne.n	8007954 <_fstat_r+0x1c>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b103      	cbz	r3, 8007954 <_fstat_r+0x1c>
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	bd38      	pop	{r3, r4, r5, pc}
 8007956:	bf00      	nop
 8007958:	20000398 	.word	0x20000398

0800795c <_isatty_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d06      	ldr	r5, [pc, #24]	; (8007978 <_isatty_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7fa f9dc 	bl	8001d24 <_isatty>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_isatty_r+0x1a>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_isatty_r+0x1a>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	20000398 	.word	0x20000398

0800797c <_lseek_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_lseek_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fa f9cc 	bl	8001d28 <_lseek>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_lseek_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_lseek_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000398 	.word	0x20000398

080079a0 <_read_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_read_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7fa f996 	bl	8001ce0 <_read>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_read_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_read_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000398 	.word	0x20000398
 80079c4:	00000000 	.word	0x00000000

080079c8 <ceil>:
 80079c8:	ec51 0b10 	vmov	r0, r1, d0
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80079d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80079d8:	2e13      	cmp	r6, #19
 80079da:	ee10 5a10 	vmov	r5, s0
 80079de:	ee10 8a10 	vmov	r8, s0
 80079e2:	460c      	mov	r4, r1
 80079e4:	dc30      	bgt.n	8007a48 <ceil+0x80>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	da12      	bge.n	8007a10 <ceil+0x48>
 80079ea:	a335      	add	r3, pc, #212	; (adr r3, 8007ac0 <ceil+0xf8>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fc6c 	bl	80002cc <__adddf3>
 80079f4:	2200      	movs	r2, #0
 80079f6:	2300      	movs	r3, #0
 80079f8:	f7f9 f8ae 	bl	8000b58 <__aeabi_dcmpgt>
 80079fc:	b128      	cbz	r0, 8007a0a <ceil+0x42>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	db55      	blt.n	8007aae <ceil+0xe6>
 8007a02:	432c      	orrs	r4, r5
 8007a04:	d057      	beq.n	8007ab6 <ceil+0xee>
 8007a06:	4c30      	ldr	r4, [pc, #192]	; (8007ac8 <ceil+0x100>)
 8007a08:	2500      	movs	r5, #0
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e025      	b.n	8007a5c <ceil+0x94>
 8007a10:	4f2e      	ldr	r7, [pc, #184]	; (8007acc <ceil+0x104>)
 8007a12:	4137      	asrs	r7, r6
 8007a14:	ea01 0307 	and.w	r3, r1, r7
 8007a18:	4303      	orrs	r3, r0
 8007a1a:	d01f      	beq.n	8007a5c <ceil+0x94>
 8007a1c:	a328      	add	r3, pc, #160	; (adr r3, 8007ac0 <ceil+0xf8>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	f7f8 fc53 	bl	80002cc <__adddf3>
 8007a26:	2200      	movs	r2, #0
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f7f9 f895 	bl	8000b58 <__aeabi_dcmpgt>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0eb      	beq.n	8007a0a <ceil+0x42>
 8007a32:	2c00      	cmp	r4, #0
 8007a34:	bfc2      	ittt	gt
 8007a36:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8007a3a:	fa43 f606 	asrgt.w	r6, r3, r6
 8007a3e:	19a4      	addgt	r4, r4, r6
 8007a40:	ea24 0407 	bic.w	r4, r4, r7
 8007a44:	2500      	movs	r5, #0
 8007a46:	e7e0      	b.n	8007a0a <ceil+0x42>
 8007a48:	2e33      	cmp	r6, #51	; 0x33
 8007a4a:	dd0b      	ble.n	8007a64 <ceil+0x9c>
 8007a4c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007a50:	d104      	bne.n	8007a5c <ceil+0x94>
 8007a52:	ee10 2a10 	vmov	r2, s0
 8007a56:	460b      	mov	r3, r1
 8007a58:	f7f8 fc38 	bl	80002cc <__adddf3>
 8007a5c:	ec41 0b10 	vmov	d0, r0, r1
 8007a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a64:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007a68:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6c:	fa23 f707 	lsr.w	r7, r3, r7
 8007a70:	4207      	tst	r7, r0
 8007a72:	d0f3      	beq.n	8007a5c <ceil+0x94>
 8007a74:	a312      	add	r3, pc, #72	; (adr r3, 8007ac0 <ceil+0xf8>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f7f8 fc27 	bl	80002cc <__adddf3>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2300      	movs	r3, #0
 8007a82:	f7f9 f869 	bl	8000b58 <__aeabi_dcmpgt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d0bf      	beq.n	8007a0a <ceil+0x42>
 8007a8a:	2c00      	cmp	r4, #0
 8007a8c:	dd02      	ble.n	8007a94 <ceil+0xcc>
 8007a8e:	2e14      	cmp	r6, #20
 8007a90:	d103      	bne.n	8007a9a <ceil+0xd2>
 8007a92:	3401      	adds	r4, #1
 8007a94:	ea25 0507 	bic.w	r5, r5, r7
 8007a98:	e7b7      	b.n	8007a0a <ceil+0x42>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007aa0:	fa03 f606 	lsl.w	r6, r3, r6
 8007aa4:	4435      	add	r5, r6
 8007aa6:	4545      	cmp	r5, r8
 8007aa8:	bf38      	it	cc
 8007aaa:	18e4      	addcc	r4, r4, r3
 8007aac:	e7f2      	b.n	8007a94 <ceil+0xcc>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ab4:	e7a9      	b.n	8007a0a <ceil+0x42>
 8007ab6:	4625      	mov	r5, r4
 8007ab8:	e7a7      	b.n	8007a0a <ceil+0x42>
 8007aba:	bf00      	nop
 8007abc:	f3af 8000 	nop.w
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	7e37e43c 	.word	0x7e37e43c
 8007ac8:	3ff00000 	.word	0x3ff00000
 8007acc:	000fffff 	.word	0x000fffff

08007ad0 <floor>:
 8007ad0:	ec51 0b10 	vmov	r0, r1, d0
 8007ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007adc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007ae0:	2e13      	cmp	r6, #19
 8007ae2:	ee10 5a10 	vmov	r5, s0
 8007ae6:	ee10 8a10 	vmov	r8, s0
 8007aea:	460c      	mov	r4, r1
 8007aec:	dc32      	bgt.n	8007b54 <floor+0x84>
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	da14      	bge.n	8007b1c <floor+0x4c>
 8007af2:	a333      	add	r3, pc, #204	; (adr r3, 8007bc0 <floor+0xf0>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fbe8 	bl	80002cc <__adddf3>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	f7f9 f82a 	bl	8000b58 <__aeabi_dcmpgt>
 8007b04:	b138      	cbz	r0, 8007b16 <floor+0x46>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	da57      	bge.n	8007bba <floor+0xea>
 8007b0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007b0e:	431d      	orrs	r5, r3
 8007b10:	d001      	beq.n	8007b16 <floor+0x46>
 8007b12:	4c2d      	ldr	r4, [pc, #180]	; (8007bc8 <floor+0xf8>)
 8007b14:	2500      	movs	r5, #0
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	e025      	b.n	8007b68 <floor+0x98>
 8007b1c:	4f2b      	ldr	r7, [pc, #172]	; (8007bcc <floor+0xfc>)
 8007b1e:	4137      	asrs	r7, r6
 8007b20:	ea01 0307 	and.w	r3, r1, r7
 8007b24:	4303      	orrs	r3, r0
 8007b26:	d01f      	beq.n	8007b68 <floor+0x98>
 8007b28:	a325      	add	r3, pc, #148	; (adr r3, 8007bc0 <floor+0xf0>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fbcd 	bl	80002cc <__adddf3>
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	f7f9 f80f 	bl	8000b58 <__aeabi_dcmpgt>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d0eb      	beq.n	8007b16 <floor+0x46>
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	bfbe      	ittt	lt
 8007b42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007b46:	fa43 f606 	asrlt.w	r6, r3, r6
 8007b4a:	19a4      	addlt	r4, r4, r6
 8007b4c:	ea24 0407 	bic.w	r4, r4, r7
 8007b50:	2500      	movs	r5, #0
 8007b52:	e7e0      	b.n	8007b16 <floor+0x46>
 8007b54:	2e33      	cmp	r6, #51	; 0x33
 8007b56:	dd0b      	ble.n	8007b70 <floor+0xa0>
 8007b58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b5c:	d104      	bne.n	8007b68 <floor+0x98>
 8007b5e:	ee10 2a10 	vmov	r2, s0
 8007b62:	460b      	mov	r3, r1
 8007b64:	f7f8 fbb2 	bl	80002cc <__adddf3>
 8007b68:	ec41 0b10 	vmov	d0, r0, r1
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295
 8007b78:	fa23 f707 	lsr.w	r7, r3, r7
 8007b7c:	4207      	tst	r7, r0
 8007b7e:	d0f3      	beq.n	8007b68 <floor+0x98>
 8007b80:	a30f      	add	r3, pc, #60	; (adr r3, 8007bc0 <floor+0xf0>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fba1 	bl	80002cc <__adddf3>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f7f8 ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d0bf      	beq.n	8007b16 <floor+0x46>
 8007b96:	2c00      	cmp	r4, #0
 8007b98:	da02      	bge.n	8007ba0 <floor+0xd0>
 8007b9a:	2e14      	cmp	r6, #20
 8007b9c:	d103      	bne.n	8007ba6 <floor+0xd6>
 8007b9e:	3401      	adds	r4, #1
 8007ba0:	ea25 0507 	bic.w	r5, r5, r7
 8007ba4:	e7b7      	b.n	8007b16 <floor+0x46>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007bac:	fa03 f606 	lsl.w	r6, r3, r6
 8007bb0:	4435      	add	r5, r6
 8007bb2:	4545      	cmp	r5, r8
 8007bb4:	bf38      	it	cc
 8007bb6:	18e4      	addcc	r4, r4, r3
 8007bb8:	e7f2      	b.n	8007ba0 <floor+0xd0>
 8007bba:	2500      	movs	r5, #0
 8007bbc:	462c      	mov	r4, r5
 8007bbe:	e7aa      	b.n	8007b16 <floor+0x46>
 8007bc0:	8800759c 	.word	0x8800759c
 8007bc4:	7e37e43c 	.word	0x7e37e43c
 8007bc8:	bff00000 	.word	0xbff00000
 8007bcc:	000fffff 	.word	0x000fffff

08007bd0 <round>:
 8007bd0:	ec51 0b10 	vmov	r0, r1, d0
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8007bda:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8007bde:	2c13      	cmp	r4, #19
 8007be0:	ee10 2a10 	vmov	r2, s0
 8007be4:	460b      	mov	r3, r1
 8007be6:	dc19      	bgt.n	8007c1c <round+0x4c>
 8007be8:	2c00      	cmp	r4, #0
 8007bea:	da09      	bge.n	8007c00 <round+0x30>
 8007bec:	3401      	adds	r4, #1
 8007bee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007bf2:	d103      	bne.n	8007bfc <round+0x2c>
 8007bf4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007bf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	e028      	b.n	8007c52 <round+0x82>
 8007c00:	4d15      	ldr	r5, [pc, #84]	; (8007c58 <round+0x88>)
 8007c02:	4125      	asrs	r5, r4
 8007c04:	ea01 0605 	and.w	r6, r1, r5
 8007c08:	4332      	orrs	r2, r6
 8007c0a:	d00e      	beq.n	8007c2a <round+0x5a>
 8007c0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c10:	fa42 f404 	asr.w	r4, r2, r4
 8007c14:	4423      	add	r3, r4
 8007c16:	ea23 0305 	bic.w	r3, r3, r5
 8007c1a:	e7ef      	b.n	8007bfc <round+0x2c>
 8007c1c:	2c33      	cmp	r4, #51	; 0x33
 8007c1e:	dd07      	ble.n	8007c30 <round+0x60>
 8007c20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007c24:	d101      	bne.n	8007c2a <round+0x5a>
 8007c26:	f7f8 fb51 	bl	80002cc <__adddf3>
 8007c2a:	ec41 0b10 	vmov	d0, r0, r1
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8007c34:	f04f 35ff 	mov.w	r5, #4294967295
 8007c38:	40f5      	lsrs	r5, r6
 8007c3a:	4228      	tst	r0, r5
 8007c3c:	d0f5      	beq.n	8007c2a <round+0x5a>
 8007c3e:	2101      	movs	r1, #1
 8007c40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007c44:	fa01 f404 	lsl.w	r4, r1, r4
 8007c48:	1912      	adds	r2, r2, r4
 8007c4a:	bf28      	it	cs
 8007c4c:	185b      	addcs	r3, r3, r1
 8007c4e:	ea22 0105 	bic.w	r1, r2, r5
 8007c52:	4608      	mov	r0, r1
 8007c54:	4619      	mov	r1, r3
 8007c56:	e7e8      	b.n	8007c2a <round+0x5a>
 8007c58:	000fffff 	.word	0x000fffff

08007c5c <_init>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	bf00      	nop
 8007c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c62:	bc08      	pop	{r3}
 8007c64:	469e      	mov	lr, r3
 8007c66:	4770      	bx	lr

08007c68 <_fini>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr
